import React, { useState, useEffect } from 'react';
import { Button } from 'react-bootstrap';
import OrderForm from './OrderForm';
import RequestTable from './RequestTable';
import { supabase } from '../supabaseClient';
import OrderPDF from './OrderPDF';
import OrderActions from './OrderActions';
import ConsolidationModal from './ConsolidationModal';
import OrderCompletionForm from './OrderCompletionForm';

const AdminDashboard = ({ activeTab, solicitudesPendientes, solicitudesHistorial, ordenesHistorial }) => {
  const [showOrderForm, setShowOrderForm] = useState(false);
  const [showConsolidation, setShowConsolidation] = useState(false);
  const [showCompletion, setShowCompletion] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [selectedOrden, setSelectedOrden] = useState(null);
  const [ordenes, setOrdenes] = useState([]);

  // Cargar Ã³rdenes con relaciones actualizadas
  const cargarOrdenes = async () => {
    const { data: ordenesData } = await supabase
      .from('ordencompra')
      .select(`
        *,
        proveedor:proveedor_id(*),
        detalles:ordencompra_detalle(*, producto:producto_id(*)),
        solicitudes:orden_solicitud(solicitud_id(*))
      `)
      .order('fecha_orden', { ascending: false });
    
    setOrdenes(ordenesData || []);
  };

  useEffect(() => {
    cargarOrdenes();
  }, []);

  const handleReject = async (id) => {
    const { error } = await supabase
      .from('solicitudcompra')
      .update({ estado: 'Rechazada' })
      .eq('id', id);
  
    if (!error) {
      const updatedRequests = solicitudesPendientes.filter(req => req.id !== id);
      setSolicitudesPendientes(updatedRequests);
    }
  };

  const handleApprove = (request) => {
    setSelectedRequest(request);
    setShowConsolidation(true);
  };

  const handleCompleteOrder = (orden) => {
    setSelectedOrden(orden);
    setShowCompletion(true);
  };

  return (
    <>
      {activeTab === 'solicitudes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">ðŸ”„ Solicitudes Pendientes</h4>
          <RequestTable
            requests={solicitudesPendientes}
            withActions={true}
            onApprove={handleApprove}
            onReject={handleReject}
          />
        </div>
      )}

      {activeTab === 'historial' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">ðŸ“š Historial de Solicitudes</h4>
          <RequestTable
            requests={solicitudesHistorial}
            showStatus={true}
          />
        </div>
      )}

      {activeTab === 'ordenes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">ðŸ“¦ Historial de Ã“rdenes</h4>
          <div className="table-responsive">
            <table className="table table-dark table-hover align-middle">
              <thead className="table-dark">
                <tr>
                  <th>ID</th>
                  <th>Proveedor</th>
                  <th>Solicitudes Relacionadas</th>
                  <th>Fecha</th>
                  <th>Total</th>
                  <th>Estado</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {ordenes.map(orden => {
                  const statusColor = {
                    'borrador': 'warning',
                    'completada': 'success',
                    'anulada': 'secondary'
                  }[orden.estado_orden.toLowerCase()];

                  return (
                    <tr key={orden.id}>
                      <td>{orden.id}</td>
                      <td>{orden.proveedor?.nombre || 'N/A'}</td>
                      <td>
                        {orden.solicitudes
                          ?.map(s => `#${s.solicitud_id.id}`)
                          .join(', ')}
                      </td>
                      <td>{new Date(orden.fecha_orden).toLocaleDateString()}</td>
                      <td>
                        {orden.detalles
                          ?.reduce((sum, d) => sum + (d.cantidad * d.precio_unitario), 0)
                          ?.toFixed(2)} {orden.unidad}
                      </td>
                      <td>
                        <span className={`badge bg-${statusColor}`}>
                          {orden.estado_orden}
                        </span>
                      </td>
                      <td>
                        <div className="d-flex gap-2">
                          <OrderPDF order={orden} />
                          <OrderActions 
                            order={orden}
                            onComplete={() => handleCompleteOrder(orden)}
                          />
                        </div>
                      </td>
                    </tr>
                  );
                })}
                {ordenes.length === 0 && (
                  <tr>
                    <td colSpan="7" className="text-center text-muted py-4">
                      No hay Ã³rdenes registradas
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      )}

      <ConsolidationModal
        show={showConsolidation}
        onHide={() => setShowConsolidation(false)}
        solicitud={selectedRequest}
        onConsolidate={async (solicitudes, proveedorId) => {
          const { data: orden } = await supabase
            .from('ordencompra')
            .insert({
              proveedor_id: proveedorId,
              estado_orden: 'borrador',
              fecha_orden: new Date().toISOString()
            })
            .select('*')
            .single();

          await supabase
            .from('orden_solicitud')
            .insert(solicitudes.map(s => ({
              orden_id: orden.id,
              solicitud_id: s.id
            })));

          await supabase
            .from('solicitudcompra')
            .update({ estado: 'En Proceso' })
            .in('id', solicitudes.map(s => s.id));

          cargarOrdenes();
          setShowConsolidation(false);
          setShowOrderForm(true);
          setSelectedRequest(orden);
        }}
      />

      {showOrderForm && (
        <OrderForm
          show={showOrderForm}
          onHide={() => setShowOrderForm(false)}
          request={selectedRequest}
          onSuccess={() => {
            cargarOrdenes();
            window.location.reload();
          }}
        />
      )}

      {showCompletion && (
        <OrderCompletionForm
          show={showCompletion}
          onHide={() => setShowCompletion(false)}
          orden={selectedOrden}
          onSuccess={() => {
            cargarOrdenes();
            window.location.reload();
          }}
        />
      )}
    </>
  );
};

export default AdminDashboard;