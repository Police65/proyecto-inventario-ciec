[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir
Captura.jpg                  node_modules                                       pnpm-lock.yaml  src
Codigo\ aun\ mas\ viejo.rar  package.json                                       prueba2.html    testConexion.js
esta\ es\ main.txt           package-lock.json                                  prueba.html     vite.config.js
index.html                   Plantilla\ que\ me\ servira\ para\ el\ inventario  README.md
logo.jpg                     plantillas\ y\ esas\ cosas                         script_si.sql
[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir src
api.txt  assets      Login.jsx  Prompt.txt  supabaseClient.js      temp.txt
App.jsx  components  main.jsx   styles      supabaseClientTest.js
[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir src/components
a001prompt.txt                     DirectOrderForm.jsx     OrderCompletionForm.jsx  ProviderManagement.jsx
AdminDashboard.jsx                 generateDescription.js  OrderDetailsModal.jsx    RequestDetailsModal.jsx
AdminHome.jsx                      Home.jsx                OrderForm.jsx            RequestForm.jsx
Aside.jsx                          ModoOscuro.jsx          OrderPDF.jsx             RequestTable.jsx
ConsolidatedOrderDetailsModal.jsx  Navbar.jsx              PDFTemplate.jsx          Sidebar.jsx
ConsolidationModal.jsx             OrderActions.jsx        ProductManagement.jsx    UserManagement.jsx
[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir src/styles
App.css  Home.css  index.css  login.css  Navbar.css  sidebar.css
[fermin@fermin-systemproductname proyecto-inventario-ciec]$ 


package.json
{
  "name": "proyecto-inventario-ciec",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "main": "/src/main.jsx",
  "homepage": "",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "preview": "vite preview",
    "update": "npm-check-updates -u",
    "deploy": "vite build && gh-pages -d dist",
    "test-conexion": "node testConexion.js"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.1",
    "axios": "^1.9.0",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "cdbreact": "^1.5.19",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "gh-pages": "^6.3.0",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.0",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-bootstrap-icons": "^1.11.5",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.3.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "npm-check-updates": "^17.1.15",
    "vite": "^6.2.0"
  }
}

.env
VITE_SUPABASE_KEY = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBja2JkcGVydXBvdnhybml1YnJsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNDM1MTIsImV4cCI6MjA1NTcxOTUxMn0.p1qIe03QXpwmMKGeiobK-i5Sv_2ANYkSUQ-eUfydOis
VITE_SUPABASE_URL = https://pckbdperupovxrniubrl.supabase.co
VITE_APP_OPENROUTER_API_URL= https://openrouter.ai/api/v1/chat/completions
VITE_APP_OPENROUTER_API_KEY= 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

supabaseClientTest.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = "https://pckbdperupovxrniubrl.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBja2JkcGVydXBvdnhybml1YnJsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNDM1MTIsImV4cCI6MjA1NTcxOTUxMn0.p1qIe03QXpwmMKGeiobK-i5Sv_2ANYkSUQ-eUfydOis";

export const supabase = createClient(supabaseUrl, supabaseKey);

supabaseClient.js
// supabaseClient.js
import { createClient } from '@supabase/supabase-js';

// Configuración principal de Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY;

export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    storage: localStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  }
});

// Funciones de agrupación
export const agruparSolicitudes = async (solicitudId) => {
  const { data: currentSolicitud } = await supabase
    .from('solicitudcompra')
    .select('*, detalles:solicitudcompra_detalle(*, producto:producto_id(categoria_id))')
    .eq('id', solicitudId)
    .single();

  const productosIds = currentSolicitud.detalles.map(d => d.producto_id);
  const categoriasIds = currentSolicitud.detalles.map(d => d.producto.categoria_id);

  // Corregir la sintaxis de la consulta
  const { data: agrupables } = await supabase
    .from('solicitudcompra')
    .select(`
      *,
      detalles:solicitudcompra_detalle(*, producto:producto_id(categoria_id)),
      empleado:empleado_id(nombre, apellido)
    `)
    .or(`and(estado.eq.Pendiente,detalles.producto_id.in.(${productosIds.join(',')}),
          and(estado.eq.Pendiente,producto.categoria_id.in.(${categoriasIds.join(',')}))`)
    .neq('id', solicitudId);

  return {
    porProducto: agruparPorProducto(agrupables),
    porCategoria: agruparPorCategoria(agrupables)
  };
};

// Funciones helper
const agruparPorProducto = (solicitudes) => {
  const grupos = {};
  solicitudes?.forEach(solicitud => {
    solicitud.detalles?.forEach(detalle => {
      const productoId = detalle.producto_id;
      if (!grupos[productoId]) {
        grupos[productoId] = {
          producto: detalle.producto_id,
          cantidadTotal: 0,
          solicitudes: new Set(),
          detalles: []
        };
      }
      grupos[productoId].cantidadTotal += detalle.cantidad;
      grupos[productoId].solicitudes.add(solicitud.id);
      grupos[productoId].detalles.push(detalle);
    });
  });
  return Object.values(grupos);
};

const agruparPorCategoria = (solicitudes) => {
  const grupos = {};
  solicitudes?.forEach(solicitud => {
    solicitud.detalles?.forEach(detalle => {
      const categoriaId = detalle.producto?.categoria_id;
      if (!grupos[categoriaId]) {
        grupos[categoriaId] = {
          categoria: categoriaId,
          cantidadTotal: 0,
          solicitudes: new Set(),
          productos: new Set(),
          detalles: []
        };
      }
      grupos[categoriaId].cantidadTotal += detalle.cantidad;
      grupos[categoriaId].solicitudes.add(solicitud.id);
      grupos[categoriaId].productos.add(detalle.producto_id);
      grupos[categoriaId].detalles.push(detalle);
    });
  });
  return Object.values(grupos);
};

main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/index.css';
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap-icons/font/bootstrap-icons.css";

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

App.jsx
// src/App.jsx
import React, { useState, useEffect, useRef } from "react";
import { BrowserRouter, Routes, Route, Navigate, useLocation } from "react-router-dom";
import { Container, Modal, Button } from "react-bootstrap";
import Sidebar from "./components/Sidebar";
import CustomNavbar from "./components/Navbar";
import RequestForm from "./components/RequestForm";
import RequestTable from "./components/RequestTable";
import AdminDashboard from "./components/AdminDashboard";
import Home from "./components/Home";
import AdminHome from "./components/AdminHome";
import Login from "./Login";
import { supabase } from "./supabaseClient";
import ModoOscuro from "./components/ModoOscuro";
import { generateDescription } from "./components/generateDescription.js";
import InventoryManagement from "./components/InventoryManagement";
import InventorySidebar from "./components/InventorySidebar";
import ViewInventory from "./components/ViewInventory"; // Nuevo componente
import ProductManagement from "./components/ProductManagement"; // Nuevo componente
import ProviderManagement from "./components/ProviderManagement"; // Nuevo componente

const INACTIVITY_WARNING_TIME = 10 * 60 * 1000; // 10 minutos en milisegundos
const INACTIVITY_LOGOUT_TIME = 15 * 60 * 1000; // 15 minutos en milisegundos
const COUNTDOWN_INTERVAL = 1000; // 1 segundo

const checkStoredSession = () => {
  const storedUser = localStorage.getItem("userProfile");
  const storedTime = localStorage.getItem("sessionTime");

  if (storedUser && storedTime) {
    const timeElapsed = Date.now() - parseInt(storedTime);
    if (timeElapsed < INACTIVITY_LOGOUT_TIME) {
      const parsedUser = JSON.parse(storedUser);
      if (parsedUser.empleado_id && parsedUser.rol) {
        return parsedUser;
      }
    }
  }
  return null;
};

function AuthenticatedLayout({
  userProfile,
  showForm,
  setShowForm,
  requests,
  orders,
  isSidebarVisible,
  toggleSidebar,
  activeTab,
  setActiveTab,
  handleSubmitRequest,
  getFilteredRequests,
}) {
  const location = useLocation();
  const isInventoryRoute = location.pathname.startsWith("/inventory");

  return (
    <>
      <CustomNavbar
        onToggleSidebar={toggleSidebar}
        userRole={userProfile.rol}
        userId={userProfile.id}
      />
      {isInventoryRoute ? (
        <InventorySidebar isVisible={isSidebarVisible} userProfile={userProfile} />
      ) : (
        <Sidebar
          isVisible={isSidebarVisible}
          onNewRequest={() => setShowForm(true)}
          onSelectTab={setActiveTab}
          userProfile={userProfile}
          pendingRequests={getFilteredRequests(["Pendiente"], true)}
        />
      )}
      <div
        style={{
          marginLeft: isSidebarVisible ? "250px" : "0",
          marginTop: "56px",
          padding: "20px",
          transition: "margin-left 0.3s",
          minHeight: "calc(100vh - 56px)",
          backgroundColor: "#212529",
        }}
      >
        <Container fluid>
          <Routes>
            <Route
              path="/home"
              element={
                userProfile.rol === "admin" ? (
                  <AdminHome userProfile={userProfile} />
                ) : (
                  <Home userProfile={userProfile} />
                )
              }
            />
            <Route
              path="/solicitudes"
              element={
                userProfile.rol === "admin" ? (
                  <AdminDashboard
                    activeTab={activeTab}
                    solicitudesPendientes={getFilteredRequests(["Pendiente"])}
                    solicitudesHistorial={getFilteredRequests([
                      "Aprobada",
                      "Rechazada",
                    ])}
                    ordenesHistorial={orders}
                    userProfile={userProfile}
                  />
                ) : (
                  <>
                    {activeTab === "solicitudes" && (
                      <RequestTable
                        requests={getFilteredRequests(["Pendiente"], true)}
                      />
                    )}
                    {activeTab === "historial" && (
                      <RequestTable
                        requests={getFilteredRequests(
                          ["Aprobada", "Rechazada"],
                          true
                        )}
                      />
                    )}
                  </>
                )
              }
            />
            <Route
              path="/inventory"
              element={
                userProfile.rol === "admin" ? (
                  <InventoryManagement userProfile={userProfile} />
                ) : (
                  <Navigate to="/home" replace />
                )
              }
            />
            <Route
              path="/inventory/view"
              element={
                userProfile.rol === "admin" ? (
                  <ViewInventory />
                ) : (
                  <Navigate to="/home" replace />
                )
              }
            />
            <Route
              path="/inventory/add-product"
              element={
                userProfile.rol === "admin" ? (
                  <ProductManagement />
                ) : (
                  <Navigate to="/home" replace />
                )
              }
            />
            <Route
              path="/inventory/add-provider"
              element={
                userProfile.rol === "admin" ? (
                  <ProviderManagement />
                ) : (
                  <Navigate to="/home" replace />
                )
              }
            />
            <Route path="/" element={<Navigate to="/home" replace />} />
            <Route path="*" element={<Navigate to="/home" replace />} />
            </Routes>
        </Container>
      </div>
      {userProfile.rol === "usuario" && (
        <RequestForm
          show={showForm}
          onHide={() => setShowForm(false)}
          onSubmit={handleSubmitRequest}
        />
      )}
    </>
  );
}

function App() {
  const [showForm, setShowForm] = useState(false);
  const [requests, setRequests] = useState([]);
  const [orders, setOrders] = useState([]);
  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
  const [activeTab, setActiveTab] = useState("solicitudes");
  const [userProfile, setUserProfile] = useState(checkStoredSession());
  const [showWarningModal, setShowWarningModal] = useState(false);
  const [timeLeft, setTimeLeft] = useState(5 * 60); // 5 minutos en segundos

  const inactivityWarningTimer = useRef(null);
  const inactivityLogoutTimer = useRef(null);
  const countdownTimer = useRef(null);

  const fetchRequests = async () => {
    try {
      const baseQuery = supabase
        .from("solicitudcompra")
        .select(
          `
          *,
          detalles:solicitudcompra_detalle(
            *,
            producto:producto_id(*)
          ),
          empleado:empleado_id(nombre, apellido),
          departamento:departamento_id(nombre)
        `
        )
        .order("fecha_solicitud", { ascending: false });

      let queryResult =
        userProfile?.rol === "admin"
          ? await baseQuery
          : await baseQuery.eq("empleado_id", userProfile?.empleado_id);

      if (queryResult.error) throw queryResult.error;
      setRequests(queryResult.data || []);
    } catch (error) {
      console.error("Error cargando solicitudes:", error);
      alert("Error al cargar las solicitudes");
    }
  };

  useEffect(() => {
    if (userProfile) {
      fetchRequests();
    }
  }, [userProfile]);

  const resetInactivityTimers = () => {
    clearTimeout(inactivityWarningTimer.current);
    clearTimeout(inactivityLogoutTimer.current);
    clearInterval(countdownTimer.current);
    setShowWarningModal(false);
    setTimeLeft(5 * 60);

    inactivityWarningTimer.current = setTimeout(() => {
      setShowWarningModal(true);
      countdownTimer.current = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            clearInterval(countdownTimer.current);
            handleLogout();
            return 0;
          }
          return prev - 1;
        });
      }, COUNTDOWN_INTERVAL);
    }, INACTIVITY_WARNING_TIME);

    inactivityLogoutTimer.current = setTimeout(() => {
      handleLogout();
    }, INACTIVITY_LOGOUT_TIME);
  };

  const handleActivity = () => {
    if (userProfile) {
      resetInactivityTimers();
    }
  };

  useEffect(() => {
    if (userProfile) {
      const events = ["mousemove", "keydown", "click"];
      events.forEach((e) => window.addEventListener(e, handleActivity));
      resetInactivityTimers();
      return () => {
        events.forEach((e) => window.removeEventListener(e, handleActivity));
        clearTimeout(inactivityWarningTimer.current);
        clearTimeout(inactivityLogoutTimer.current);
        clearInterval(countdownTimer.current);
      };
    }
  }, [userProfile]);

  useEffect(() => {
    if (userProfile) {
      localStorage.setItem("userProfile", JSON.stringify(userProfile));
      localStorage.setItem("sessionTime", Date.now().toString());
      fetchRequests();
      fetchOrders();
    }
  }, [userProfile]);

  const getFilteredRequests = (estados, deptFilter = false) => {
    return requests.filter(
      (request) =>
        estados.includes(request.estado) &&
        (userProfile?.rol === "admin" ||
          request.empleado_id === userProfile?.empleado_id ||
          (deptFilter && request.departamento_id === userProfile?.departamento_id))
    );
  };

  const handleSubmitRequest = async (requestData) => {
    try {
      if (!userProfile?.empleado_id) {
        throw new Error("Usuario no tiene empleado asociado");
      }

      let descripcion = "Solicitud múltiple";
      if (!requestData.customRequest && requestData.products) {
        console.log("Generando descripción para:", requestData.products);
        descripcion = await generateDescription(requestData.products);
      } else if (requestData.description) {
        descripcion = requestData.description;
      }

      const { data: solicitud, error } = await supabase
        .from("solicitudcompra")
        .insert([
          {
            descripcion: descripcion,
            estado: "Pendiente",
            empleado_id: userProfile.empleado_id,
            departamento_id: userProfile.departamento_id,
          },
        ])
        .select("id");

      if (error) throw error;

      if (!requestData.customRequest && requestData.products) {
        const inserts = requestData.products.map((product) => ({
          solicitud_compra_id: solicitud[0].id,
          producto_id: product.productId,
          cantidad: product.quantity,
        }));

        const { error: detalleError } = await supabase
          .from("solicitudcompra_detalle")
          .insert(inserts);

        if (detalleError) throw detalleError;
      }

      const { data: admins, error: adminsError } = await supabase
        .from("user_profile")
        .select("id")
        .eq("rol", "admin");

      if (adminsError) throw adminsError;

      const notificationInserts = admins.map((admin) => ({
        user_id: admin.id,
        title: "Nueva Solicitud de Compra",
        description: `Se ha creado una nueva solicitud de compra con ID ${solicitud[0].id}`,
        created_at: new Date().toISOString(),
        type: "solicitud_compra",
        read: false,
      }));

      const { error: notificationError } = await supabase
        .from("notificaciones")
        .insert(notificationInserts);

      if (notificationError) throw notificationError;

      await fetchRequests();
      setShowForm(false);
    } catch (error) {
      alert("Error: " + error.message);
    }
  };

  const fetchOrders = async () => {
    try {
      const { data, error } = await supabase
        .from("ordencompra")
        .select(
          `
          *,
          proveedor:proveedor_id(*),
          productos:ordencompra_detalle(
            *,
            producto:producto_id(*)
          ),
          empleado:empleado_id(*),
          solicitud_compra:solicitud_compra_id(*)
        `
        )
        .order("fecha_orden", { ascending: false });

      if (error) throw error;
      setOrders(data || []);
    } catch (error) {
      console.error("Error cargando órdenes:", error);
    }
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    localStorage.removeItem("userProfile");
    localStorage.removeItem("sessionTime");
    setUserProfile(null);
    clearTimeout(inactivityWarningTimer.current);
    clearTimeout(inactivityLogoutTimer.current);
    clearInterval(countdownTimer.current);
  };

  return (
    <BrowserRouter>
      <Routes>
        <Route
          path="/login"
          element={
            !userProfile ? (
              <Login
                onLogin={(profile) => {
                  if (!profile.empleado_id) {
                    alert(
                      "Tu usuario no está asociado a un empleado. Contacta al administrador."
                    );
                    return;
                  }
                  setUserProfile({
                    ...profile,
                    empleado_id: profile.empleado_id,
                  });
                }}
              />
            ) : (
              <Navigate to="/home" replace />
            )
          }
        />
        <Route
          path="/*"
          element={
            userProfile ? (
              <>
                <AuthenticatedLayout
                  userProfile={userProfile}
                  showForm={showForm}
                  setShowForm={setShowForm}
                  requests={requests}
                  orders={orders}
                  isSidebarVisible={isSidebarVisible}
                  toggleSidebar={() => setIsSidebarVisible(!isSidebarVisible)}
                  activeTab={activeTab}
                  setActiveTab={setActiveTab}
                  handleSubmitRequest={handleSubmitRequest}
                  getFilteredRequests={getFilteredRequests}
                />
                <Modal
                  show={showWarningModal}
                  onHide={() => {}}
                  backdrop="static"
                  keyboard={false}
                >
                  <Modal.Header>
                    <Modal.Title>Sesión a punto de expirar</Modal.Title>
                  </Modal.Header>
                  <Modal.Body>
                    <p>
                      Tu sesión se cerrará en {Math.floor(timeLeft / 60)}:
                      {(timeLeft % 60).toString().padStart(2, "0")} debido a
                      inactividad.
                    </p>
                    <p>¿Deseas mantener la sesión abierta?</p>
                  </Modal.Body>
                  <Modal.Footer>
                    <Button variant="secondary" onClick={handleLogout}>
                      Cerrar sesión ahora
                    </Button>
                    <Button variant="primary" onClick={handleActivity}>
                      Mantener sesión
                    </Button>
                  </Modal.Footer>
                </Modal>
              </>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
      </Routes>
    </BrowserRouter>
  );
}

export default App;

Login.jsx
import "./styles/login.css";
import { Link } from "react-router-dom";
import React, { useState } from "react";
import { Button, Form, Modal } from "react-bootstrap";
import { supabase } from "./supabaseClient.js";

const Login = ({ onLogin }) => {
  const mev= useState("");
  const [password, setPassword] = useState("");
  const [email, setEmail] = useState("");
  const [show, setShow] = useState(true);

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
  
      if (error) throw error;
  
      // Consultar perfil sin relación automática
      const { data: profile, error: profileError } = await supabase
        .from("user_profile")
        .select(`
          id,
          rol,
          empleado_id,
          departamento_id
        `)
        .eq("id", data.user.id)
        .single();
  
      if (profileError) throw profileError;
  
      // Consultar datos del empleado por separado
      const { data: empleado, error: empleadoError } = await supabase
        .from("empleado")
        .select("id, estado")
        .eq("id", profile.empleado_id)
        .single();
  
      if (empleadoError) throw empleadoError;
  
      // Combinar los datos
      const combinedProfile = {
        ...profile,
        empleado: empleado || null
      };
  
      // Verificar estado del empleado
      if (combinedProfile && combinedProfile.empleado?.estado === 'activo') {
        onLogin(combinedProfile);
        setShow(false);
      } else {
        throw new Error("Usuario inactivo. Contacta al administrador.");
      }
    } catch (error) {
      alert("Error: " + error.message);
    }
  };

  return (
    <div className="addUser">
      <h3>Iniciar Sesión</h3>
      <form className="addUserForm" onSubmit={handleLogin}>
        <div className="inputGroup">
          <Form.Group controlId="formEmail">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              placeholder="Ingrese su email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="input"
            />
          </Form.Group>
          <Form.Group controlId="formPassword">
            <Form.Label>Contraseña</Form.Label>
            <Form.Control
              type="password"
              placeholder="Ingrese su contraseña"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input"
            />
          </Form.Group>

          <button type="submit" className="btn-config">
            Login
          </button>
        </div>
      </form>
    </div>
  );
};

export default Login;

App.css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.table-responsive {
  overflow-x: auto;
}

.table-dark {
  background-color: #343a40;
  color: #fff;
  width: 100%;
}

.table-dark th,
.table-dark td {
  border-color: #454d55;
  padding: 12px;
  text-align: center;
}

.table-dark th {
  background-color: #454d55;
  font-size: 1.1rem;
}

.table-dark tbody tr:hover {
  background-color: rgba(255, 255, 255, 0.075);
}

.d-flex {
  display: flex;
}

.justify-content-center {
  justify-content: center;
}

.align-items-center {
  align-items: center;
}

.h-100 {
  height: 100%;
}

.w-100 {
  width: 100%;
}

index.css
:root{
  --color1: #001c51;
  --color2: #004f7d;
  --color3: #4990b2;
  --color4: #a7d6eb;
  --color5: #faffff;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--color1) !important; /* Fondo oscuro permanente */
  color: var(--color5) !important; /* Texto claro */
  transition: background-color 0.3s ease;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.card {
  margin-bottom: 20px;
  border: 1px solid #e3e6f0;
  border-radius: 0.35rem;
  background-color: #343a40 !important;
  color: #f8f9fa !important;
}

.card-header {
  padding: 0.75rem 1.25rem;
  margin-bottom: 0;
  border-bottom: 1px solid #e3e6f0;
  background-color: #2d3338 !important;
  border-bottom: 1px solid #495057 !important;
  color: #f8f9fa !important;
}
.table-dark {
  --bs-table-bg: #343a40;
  --bs-table-striped-bg: #2d3338;
  --bs-table-striped-color: #fff;
  --bs-table-active-bg: #373b3e;
  --bs-table-active-color: #fff;
  --bs-table-hover-bg: #323539;
  --bs-table-hover-color: #fff;
  color: #fff;
  border-color: #495057;
}

.card-body {
  padding: 1.25rem;
}

.table-responsive {
  overflow-x: auto;
}

.hidden {
  left: -250px !important; 
}

.visible {
  left: 0 !important; 
}
.badge {
  padding: 0.5em 0.75em;
  border-radius: 0.25rem;
  font-size: 0.875em;
}

.bg-warning {
  background-color: #ffc107 !important;
  color: #000;
}

.bg-success {
  background-color: #198754 !important;
}

.bg-danger {
  background-color: #dc3545 !important;
}


login.css
:root{
  --color1: #001c51;
  --color2: #004f7d;
  --color3: #4990b2;
  --color4: #a7d6eb;
  --color5: #faffff;
}
.addUser {
  background-color: var(--color2);
  width: 25%;
  margin: 50px auto;
  /* margin in top and bottom will be 50px  */
  /* left and right auto  */
  padding: 40px;
  border-radius: 10px;
  box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.065);

  /* horizon offset vertical offset blur offset  */
  /* opacity of shadow */
  /* red, green, blue, and (opacity ). */
}
.addUserForm .inputGroup {
  width: 100%;
  display: flex;
  flex-direction: column;
}

.addUserForm .inputGroup label {
  margin-top: 10px;
}

.addUserForm .inputGroup input {
  margin-top: 5px;
  padding: 10px;
}

.inputGroup button {
  margin-top: 10px;
}
.login {
  margin-top: 30px;
  text-align: center;
}

.login .btn.btn-success {
  width: 50%;
}

.addUser h3 {
  text-align: center;
  font-weight: bold;
  color: var(--color5);
  text-transform: uppercase;
  text-shadow: 1px 1px 2px var(--color1);
}


.input{
  background-color: var(--color5);
  color: var(--color1);
}

.btn-config{
  background-color: var(--color1);
  color: var(--color5);
  border: none;
  padding: 10px 20px;
}


Navbar.css
:root {
  --color1: #001c51;
  --color2: #004f7d;
  --color3: #4990b2;
  --color4: #a7d6eb;
  --color5: #faffff;
}

/* General Navbar styles */
.navbar {
  background-color: var(--color1); /* Dark background */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow */
  z-index: 1030; /* Ensure it stays on top */
}

/* Brand styling */
.navbar-brand {
  font-size: 1.25rem;
  font-weight: bold;
  color: var(--color5);
}

.navbar-brand:hover {
  color: var(--color4); /* Light blue on hover */
}

/* Button styling */
.navbar .btn-dark {
  background-color: var(--color2);
  border: none;
}

.navbar .btn-dark:hover {
  background-color: var(--color3); /* Slightly lighter on hover */
}

/* NavLink styling */
.navbar .nav-link {
  color: var(--color5);
  font-size: 0.95rem;
  transition: color 0.3s ease;
}

.navbar .nav-link:hover {
  color: var(--color4); /* Light blue on hover */
}

/* Badge styling */
.navbar .badge {
  font-size: 0.75rem;
  padding: 0.25em 0.5em;
  border-radius: 50%;
  background-color: var(--color3);
  color: var(--color5);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow */
}

/* Popover styling */
.popover {
  border: none;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */
}

.popover-header {
  background-color: var(--color2);
  color: var(--color5);
  font-size: 1rem;
  font-weight: bold;
}

.popover-body {
  font-size: 0.9rem;
  color: var(--color1);
}

/* Notification item styling */
.notification-item {
  background-color: var(--color4);
  border-radius: 0.25rem;
  transition: background-color 0.3s ease;
}

.notification-item:hover {
  background-color: var(--color3); /* Slightly darker on hover */
}

/* Logout button styling */
.popover .btn-outline-danger {
  font-size: 0.85rem;
  border-color: var(--color3);
  color: var(--color3);
}

.popover .btn-outline-danger:hover {
  background-color: var(--color3);
  color: var(--color5);
}

sidebar.css
/* Root Variables */
:root {
    --color1: #001c51;
    --color2: #004f7d;
    --color3: #4990b2;
    --color4: #a7d6eb;
    --color5: #faffff;
    --shadow-color: rgba(0, 0, 0, 0.2);
}

/* Sidebar Styles */
.sidebar {
    background-color: var(--color1);
    color: var(--color5);
    min-height: 100vh;
    padding: 1rem;
    width: 250px;
    position: fixed;
    top: 56px;
    left: -250px;
    transition: left 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    z-index: 1000;
    border-radius: 0 10px 10px 0; /* Bordes redondeados */
    box-shadow: 2px 0 5px var(--shadow-color); /* Sombra */
}

.sidebar.visible {
    left: 0;
    box-shadow: 4px 0 10px var(--shadow-color); /* Sombra más pronunciada */
}

/* Sidebar Header */
.sidebar h1 {
    font-size: 1.5rem; /* Tamaño de fuente más grande */
    margin-bottom: 1.5rem; /* Más espacio debajo */
    color: var(--color5);
    text-shadow: 2px 2px 4px var(--color3); /* Sombra de texto más suave */
    text-align: center; /* Centrar el texto */
}

/* Navigation Styles */
.sidebar nav ul {
    list-style: none;
    padding: 0;
}

.sidebar nav ul li {
    margin-bottom: 0.75rem; /* Más espacio entre elementos */
}

.sidebar nav ul li .btn {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 100%;
    text-align: left;
    padding: 0.75rem; /* Más espacio interno */
    color: var(--color5);
    text-decoration: none;
    background-color: transparent;
    border: none;
    white-space: nowrap;
    border-radius: 5px; /* Bordes redondeados */
    transition: background-color 0.3s ease-in-out, transform 0.2s ease-in-out;
}

.sidebar nav ul li .btn:hover {
    background-color: var(--color2);
    transform: translateX(5px); /* Efecto de desplazamiento */
}

/* Badge Styles */
.sidebar .badge {
    background-color: var(--color3);
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 24px; /* Tamaño más grande */
    height: 24px;
    border-radius: 50%;
    margin-left: 8px;
    font-size: 14px; /* Fuente más grande */
    color: var(--color5);
    vertical-align: middle;
    margin-top: -10%;
    box-shadow: 0 2px 4px var(--shadow-color); /* Sombra */
}

/* New Request Button */
.sidebar .new-request-btn {
    margin-top: 1.5rem; /* Más espacio superior */
    width: 100%;
    background-color: var(--color2);
    color: var(--color5);
    border: none;
    padding: 0.75rem; /* Más espacio interno */
    font-size: 1.1rem; /* Fuente más grande */
    cursor: pointer;
    border-radius: 5px; /* Bordes redondeados */
    transition: background-color 0.3s ease-in-out, transform 0.2s ease-in-out;
}

.sidebar .new-request-btn:hover {
    background-color: var(--color3);
    transform: scale(1.05); /* Efecto de agrandamiento */
    
}

.sidebar .btn {
    width: 100%;
    text-align: left;
    color: #fff;
    background-color: transparent;
    border: none;
  }
  
  .sidebar .btn:hover {
    background-color: #495057;
  }
  
  .sub-menu {
    list-style: none;
    padding-left: 20px;
    margin-top: 5px;
  }
  
  .sub-menu li {
    margin-bottom: 5px;
  }


  AdminDashboard.jsx
  import React, { useState, useEffect } from 'react';
import { Button, Badge, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap';
import OrderForm from './OrderForm';
import DirectOrderForm from './DirectOrderForm';
import RequestTable from './RequestTable';
import { supabase } from '../supabaseClient';
import OrderPDF from './OrderPDF';
import OrderActions from './OrderActions';
import UserManagement from './UserManagement';
import ConsolidationModal from './ConsolidationModal';
import OrderDetailsModal from './OrderDetailsModal';
import RequestDetailsModal from './RequestDetailsModal';
import ConsolidatedOrderDetailsModal from './ConsolidatedOrderDetailsModal';

const AdminDashboard = ({ activeTab, solicitudesPendientes, solicitudesHistorial, ordenesHistorial, userProfile }) => {
  const [showOrderForm, setShowOrderForm] = useState(false);
  const [isDirectOrder, setIsDirectOrder] = useState(false);
  const [showConsolidationModal, setShowConsolidationModal] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [solicitudesPendientesState, setSolicitudesPendientesState] = useState(solicitudesPendientes);
  const [ordenesConsolidadas, setOrdenesConsolidadas] = useState([]);
  const [showOrderDetails, setShowOrderDetails] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showPDFConfirmation, setShowPDFConfirmation] = useState(false);
  const [newOrder, setNewOrder] = useState(null);
  const [showRequestDetails, setShowRequestDetails] = useState(false);
  const [selectedRequestDetails, setSelectedRequestDetails] = useState(null);
  const [showConsolidatedOrderDetails, setShowConsolidatedOrderDetails] = useState(false);
  const [selectedConsolidatedOrder, setSelectedConsolidatedOrder] = useState(null);

  useEffect(() => {
    setSolicitudesPendientesState(solicitudesPendientes);
  }, [solicitudesPendientes]);

  useEffect(() => {
    const fetchOrdenesConsolidadas = async () => {
      const { data, error } = await supabase
        .from('ordenes_consolidadas')
        .select(`
          *,
          proveedor:proveedor_id(nombre),
          productos,
          solicitudes
        `)
        .order('fecha_creacion', { ascending: false });

      if (!error) setOrdenesConsolidadas(data);
    };
    fetchOrdenesConsolidadas();
  }, []);

  const handleReject = async (id) => {
    const { error } = await supabase
      .from('solicitudcompra')
      .update({ estado: 'Rechazada' })
      .eq('id', id);
  
    if (!error) {
      const request = solicitudesPendientesState.find(req => req.id === id);
      await supabase.from('notificaciones').insert([{
        user_id: request.empleado_id,
        title: 'Solicitud Rechazada',
        description: `Tu solicitud #${id} ha sido rechazada.`,
        created_at: new Date().toISOString(),
        read: false
      }]);
      setSolicitudesPendientesState(solicitudesPendientesState.filter(req => req.id !== id));
    }
  };

  const handleEliminarConsolidacion = async (id) => {
    try {
      await supabase.from('ordenes_consolidadas').delete().eq('id', id);
      setOrdenesConsolidadas(prev => prev.filter(oc => oc.id !== id));
    } catch (err) {
      console.error('Error eliminando consolidación:', err);
    }
  };

  const handleConsolidatedOrderClick = (order) => {
    setSelectedConsolidatedOrder(order);
    setShowConsolidatedOrderDetails(true);
  };

  const handleOrderClick = (order) => {
    setSelectedOrder(order);
    setShowOrderDetails(true);
  };

  const handleRequestClick = (request) => {
    setSelectedRequestDetails(request);
    setShowRequestDetails(true);
  };

  const handleOrderCreated = (createdOrder) => {
    setNewOrder(createdOrder);
    setShowPDFConfirmation(true);
    setShowOrderForm(false);
  };

  const handleApproveRequest = (request) => {
    const initialProducts = request.detalles.map(d => ({
      producto_id: d.producto_id,
      descripcion: d.producto?.descripcion || 'Producto sin nombre',
      cantidad: d.cantidad,
      precio_unitario: 0
    }));
    
    setSelectedRequest({
      initialProducts: initialProducts,
      solicitudes: [request.id],
      proveedor_id: null
    });
    
    supabase.from('notificaciones').insert([{
      user_id: request.empleado_id,
      title: 'Solicitud Aprobada',
      description: `Tu solicitud #${request.id} ha sido aprobada.`,
      created_at: new Date().toISOString(),
      read: false
    }]);
    
    setIsDirectOrder(false);
    setShowOrderForm(true);
  };

  const handleCreateDirectOrder = () => {
    setSelectedRequest(null);
    setIsDirectOrder(true);
    setShowOrderForm(true);
  };

  return (
    <>
      {activeTab === 'solicitudes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h4 className="text-light mb-0">🔄 Solicitudes Pendientes</h4>
            <div>
              <Button variant="primary" onClick={() => setShowConsolidationModal(true)} className="me-2">
                <i className="bi bi-archive me-2"></i>Consolidar Solicitudes
              </Button>
              <Button variant="success" onClick={handleCreateDirectOrder}>
                <i className="bi bi-plus-circle me-2"></i>Crear Orden Directa
              </Button>
            </div>
          </div>
          <RequestTable
            requests={solicitudesPendientesState}
            withActions={true}
            onApprove={handleApproveRequest}
            onReject={handleReject}
          />
        </div>
      )}

      {activeTab === 'usuarios' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">👥 Gestión de Usuarios</h4>
          <UserManagement />
        </div>
      )}

      {showConsolidationModal && (
        <ConsolidationModal
          show={showConsolidationModal}
          onHide={() => setShowConsolidationModal(false)}
          onConsolidate={(consolidatedOrder) => {
            setOrdenesConsolidadas(prev => [consolidatedOrder, ...prev]);
            setShowConsolidationModal(false);
          }}
          solicitudes={solicitudesPendientesState} 
        />
      )}

      {activeTab === 'historial-solicitudes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">📚 Historial de Solicitudes</h4>
          <RequestTable
            requests={solicitudesHistorial}
            showStatus={true}
            onRowClick={handleRequestClick}
          />
        </div>
      )}

      {activeTab === 'ordenes-consolidadas' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">📦 Historial de Órdenes Consolidadas</h4>
          <div className="table-responsive">
            <table className="table table-dark table-hover align-middle">
              <thead className="table-dark">
                <tr>
                  <th>ID</th>
                  <th>Proveedor</th>
                  <th>Productos</th>
                  <th>Fecha</th>
                  <th>Estado</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {ordenesConsolidadas?.map(orden => {
                  const statusColor = {
                    'Pendiente': 'warning',
                    'Completada': 'success',
                    'Anulada': 'secondary'
                  }[orden.estado];

                  return (
                    <tr 
                      key={orden.id} 
                      onClick={() => handleConsolidatedOrderClick(orden)} 
                      style={{ cursor: 'pointer' }}
                    >
                      <td>{orden.id}</td>
                      <td>{orden.proveedor?.nombre || 'N/A'}</td>
                      <td>
                        {orden.productos?.map((p, i) => (
                          <Badge key={i} bg="info" className="me-1">
                            {p.descripcion} (x{p.cantidad})
                          </Badge>
                        ))}
                      </td>
                      <td>{new Date(orden.fecha_creacion).toLocaleDateString()}</td>
                      <td>
                        <span className={`badge bg-${statusColor}`}>{orden.estado}</span>
                      </td>
                      <td onClick={(e) => e.stopPropagation()}>
                        <div className="d-flex gap-2">
                          <Button
                            variant="success"
                            size="sm"
                            onClick={() => {
                              const initialProducts = orden.productos.map(p => ({
                                producto_id: p.producto_id,
                                descripcion: p.descripcion,
                                cantidad: p.cantidad,
                                precio_unitario: 0
                              }));
                              
                              setSelectedRequest({
                                initialProducts: initialProducts,
                                solicitudes: orden.solicitudes,
                                proveedor_id: orden.proveedor_id
                              });
                              setIsDirectOrder(false);
                              setShowOrderForm(true);
                            }}
                          >
                            Crear Orden
                          </Button>
                          <Button
                            variant="danger"
                            size="sm"
                            onClick={() => handleEliminarConsolidacion(orden.id)}
                          >
                            Eliminar
                          </Button>
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {activeTab === 'ordenes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">📦 Historial de Órdenes</h4>
          <div className="table-responsive">
            <table className="table table-dark table-hover align-middle">
              <thead className="table-dark">
                <tr>
                  <th>ID</th>
                  <th>Proveedor</th>
                  <th>Solicitud Relacionada</th>
                  <th>Fecha</th>
                  <th>Total</th>
                  <th>Estado</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {ordenesHistorial?.map(orden => {
                  const statusColor = {
                    'Pendiente': 'warning',
                    'Completada': 'success',
                    'Anulada': 'secondary'
                  }[orden.estado];

                  return (
                    <tr key={orden.id} onClick={() => handleOrderClick(orden)} style={{ cursor: 'pointer' }}>
                      <td>{orden.id}</td>
                      <td>{orden.proveedor?.nombre || 'N/A'}</td>
                      <td>{orden.solicitud_compra?.descripcion || 'N/A'}</td>
                      <td>{new Date(orden.fecha_orden).toLocaleDateString()}</td>
                      <td>{orden.neto_a_pagar?.toFixed(2)} {orden.unidad}</td>
                      <td>
                        <span className={`badge bg-${statusColor}`}>{orden.estado}</span>
                      </td>
                      <td onClick={(e) => e.stopPropagation()}>
                        <div className="d-flex gap-2">
                          <OrderPDF order={orden} />
                          <OrderActions order={orden} onUpdate={() => window.location.reload()} />
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {showOrderForm && isDirectOrder ? (
        <DirectOrderForm
          show={showOrderForm}
          onHide={() => setShowOrderForm(false)}
          userProfile={userProfile}
          onSuccess={handleOrderCreated}
        />
      ) : (
        <OrderForm
          show={showOrderForm}
          onHide={() => setShowOrderForm(false)}
          userProfile={userProfile}
          onSuccess={handleOrderCreated}
          initialProducts={selectedRequest?.initialProducts || []}
          proveedorId={selectedRequest?.proveedor_id}
          solicitudesIds={selectedRequest?.solicitudes}
        />
      )}

      {showOrderDetails && <OrderDetailsModal show={showOrderDetails} onHide={() => setShowOrderDetails(false)} order={selectedOrder} />}
      {showRequestDetails && <RequestDetailsModal show={showRequestDetails} onHide={() => setShowRequestDetails(false)} request={selectedRequestDetails} />}
      {showConsolidatedOrderDetails && (
        <ConsolidatedOrderDetailsModal
          show={showConsolidatedOrderDetails}
          onHide={() => setShowConsolidatedOrderDetails(false)}
          order={selectedConsolidatedOrder}
        />
      )}

      {showPDFConfirmation && (
        <Modal show={showPDFConfirmation} onHide={() => setShowPDFConfirmation(false)} centered>
          <Modal.Header closeButton className="bg-dark text-light">
            <Modal.Title>Orden Creada</Modal.Title>
          </Modal.Header>
          <Modal.Body className="bg-dark text-light">
            <p>La orden #{newOrder?.id} ha sido creada exitosamente.</p>
            <div className="d-flex justify-content-end">
              <Button variant="secondary" onClick={() => setShowPDFConfirmation(false)} className="me-2">
                Cerrar
              </Button>
              <Button variant="primary" onClick={() => handleOrderClick(newOrder)}>
                Generar PDF
              </Button>
            </div>
          </Modal.Body>
        </Modal>
      )}
    </>
  );
};

export default AdminDashboard;

AdminHome.jsx
import React, { useState, useEffect } from 'react';
import { Container, Card, Row, Col, Button, Badge } from 'react-bootstrap';
import { supabase } from '../supabaseClient';
import RequestTable from './RequestTable';
import { useNavigate } from 'react-router-dom';

const AdminHome = ({ userProfile }) => {
  const [departments, setDepartments] = useState([]);
  const [selectedDepartment, setSelectedDepartment] = useState(null);
  const [requests, setRequests] = useState([]);
  const [filter, setFilter] = useState('Pendiente');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      const { data: depts, error: deptError } = await supabase
        .from('departamento')
        .select('id, nombre');

      if (deptError) return;

      const { data: reqs, error: reqError } = await supabase
        .from('solicitudcompra')
        .select(`
          *,
          departamento:departamento_id(nombre)
        `);

      if (!reqError) {
        const deptStats = depts.map(dept => ({
          ...dept,
          pendingCount: reqs.filter(r => r.departamento_id === dept.id && r.estado === 'Pendiente').length
        }));
        setDepartments(deptStats);
        setRequests(reqs);
      }
    };
    fetchData();
  }, []);

  const filteredRequests = selectedDepartment
    ? requests.filter(r => r.departamento_id === selectedDepartment.id && (filter === 'Historial' ? ['Aprobada', 'Rechazada'].includes(r.estado) : r.estado === filter))
    : [];

  return (
    <Container fluid className="mt-3">
      {!selectedDepartment ? (
        <>
          <h3 className="text-light mb-4">📊 Resumen por Departamento</h3>
          <Row>
            {departments.map(dept => (
              <Col md={4} key={dept.id} className="mb-4">
                <Card className="bg-dark text-light border-secondary" style={{ cursor: 'pointer' }} onClick={() => setSelectedDepartment(dept)}>
                  <Card.Body>
                    <Card.Title>{dept.nombre}</Card.Title>
                    <Badge bg="warning" text="dark">{dept.pendingCount} Pendientes</Badge>
                  </Card.Body>
                </Card>
              </Col>
            ))}
          </Row>
        </>
      ) : (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h3 className="text-light">Solicitudes de {selectedDepartment.nombre}</h3>
            <div>
              <Button variant={filter === 'Pendiente' ? 'primary' : 'outline-primary'} onClick={() => setFilter('Pendiente')} className="me-2">
                Pendientes
              </Button>
              <Button variant={filter === 'Historial' ? 'primary' : 'outline-primary'} onClick={() => setFilter('Historial')}>
                Historial
              </Button>
              <Button variant="secondary" onClick={() => setSelectedDepartment(null)} className="ms-2">
                Volver
              </Button>
            </div>
          </div>
          <RequestTable requests={filteredRequests} />
        </>
      )}
    </Container>
  );
};

export default AdminHome;

AIInsights.jsx
import React, { useState } from "react";
import { Card, Button, Tab, Tabs } from "react-bootstrap";
import { supabase } from "../supabaseClient";

const API_URL = import.meta.env.VITE_OPENROUTER_API_URL;
const API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY;

const AIInsights = () => {
  const [activeTab, setActiveTab] = useState("auditor");
  const [insights, setInsights] = useState({});
  const [loading, setLoading] = useState(false);

  const fetchAIResponse = async (prompt) => {
    try {
      if (!API_KEY || !API_URL) {
        throw new Error("Faltan las credenciales de OpenRouter en el archivo .env");
      }
      const response = await fetch(API_URL, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "meta-llama/llama-3-70b-instruct",
          messages: [{ role: "user", content: prompt }],
        }),
      });
      if (!response.ok) {
        throw new Error(`Error en la API: ${response.statusText}`);
      }
      const data = await response.json();
      if (data.choices && data.choices.length > 0) {
        return data.choices[0].message.content.trim();
      } else {
        return "No se encontró respuesta válida";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "Error al generar respuesta";
    }
  };

  const handleGenerateInsight = async (type) => {
    setLoading(true);
    let prompt = "";
    try {
      switch (type) {
        case "auditor":
          const { data: orders } = await supabase
            .from("ordencompra")
            .select("neto_a_pagar, departamento!departamento_id(nombre)");
          prompt = `
            Analiza los siguientes gastos por departamento:
            ${JSON.stringify(orders)}
            Detecta anomalías y sugiere acciones correctivas.
          `;
          break;
        case "proveedores":
          const { data: providers } = await supabase
            .from("proveedor")
            .select("id, nombre, direccion");
          const { data: orderDetails } = await supabase
            .from("ordencompra_detalle")
            .select("orden_compra_id, cantidad");
          prompt = `
            Con base en estos proveedores y órdenes:
            - Proveedores: ${JSON.stringify(providers)}
            - Detalles de órdenes: ${JSON.stringify(orderDetails)}
            Genera un ranking de proveedores éticos locales con explicaciones (prioriza entrega rápida y costos bajos).
          `;
          break;
        case "predictor":
          const { data: inventory } = await supabase
            .from("inventario")
            .select("producto_id, existencias");
          const { data: pastOrders } = await supabase
            .from("ordencompra")
            .select("fecha_orden, neto_a_pagar");
          prompt = `
            Según estos datos:
            - Inventario: ${JSON.stringify(inventory)}
            - Órdenes pasadas: ${JSON.stringify(pastOrders)}
            Recomienda cantidades a comprar para el próximo trimestre con justificación técnica.
          `;
          break;
        case "asistente":
          const { data: requests } = await supabase
            .from("solicitudcompra_detalle")
            .select("cantidad, producto!producto_id(descripcion)");
          prompt = `
            Analiza estas solicitudes recurrentes:
            ${JSON.stringify(requests)}
            Sugiere órdenes de compra recurrentes para optimizar el proceso.
          `;
          break;
        default:
          break;
      }
      const response = await fetchAIResponse(prompt);
      setInsights((prev) => ({ ...prev, [type]: response }));
    } catch (error) {
      setInsights((prev) => ({ ...prev, [type]: "Error al procesar datos" }));
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="bg-dark text-light">
      <Card.Body>
        <Card.Title>Insights de IA</Card.Title>
        <Tabs
          activeKey={activeTab}
          onSelect={(k) => setActiveTab(k)}
          className="mb-3"
        >
          <Tab eventKey="auditor" title="Auditor de Gastos">
            <Button
              onClick={() => handleGenerateInsight("auditor")}
              disabled={loading}
            >
              {loading ? "Generando..." : "Analizar Gastos"}
            </Button>
            <p className="mt-3">
              {insights.auditor || "Presiona el botón para generar análisis"}
            </p>
          </Tab>
          <Tab eventKey="proveedores" title="Optimizador de Proveedores">
            <Button
              onClick={() => handleGenerateInsight("proveedores")}
              disabled={loading}
            >
              {loading ? "Generando..." : "Optimizar Proveedores"}
            </Button>
            <p className="mt-3">
              {insights.proveedores || "Presiona el botón para generar ranking"}
            </p>
          </Tab>
          <Tab eventKey="predictor" title="Predictor de Consumo">
            <Button
              onClick={() => handleGenerateInsight("predictor")}
              disabled={loading}
            >
              {loading ? "Generando..." : "Predecir Consumo"}
            </Button>
            <p className="mt-3">
              {insights.predictor || "Presiona el botón para generar predicción"}
            </p>
          </Tab>
          <Tab eventKey="asistente" title="Asistente Inteligente">
            <Button
              onClick={() => handleGenerateInsight("asistente")}
              disabled={loading}
            >
              {loading ? "Generando..." : "Sugerir Órdenes Recurrentes"}
            </Button>
            <p className="mt-3">
              {insights.asistente || "Presiona el botón para generar sugerencias"}
            </p>
          </Tab>
        </Tabs>
      </Card.Body>
    </Card>
  );
};

export default AIInsights;

Aside.jsx
import React from "react";
import {
  CDBSidebar,
  CDBSidebarContent,
  CDBSidebarHeader,
  CDBSidebarMenu,
  CDBSidebarMenuItem,
  CDBSidebarFooter,
} from "cdbreact";

const Sidebar = () => {
  return (
    <CDBSidebar>
      <CDBSidebarHeader prefix={<i className="fa fa-bars" />}>
        Contrast
      </CDBSidebarHeader>
      <CDBSidebarContent>
        <CDBSidebarMenu>
          <CDBSidebarMenuItem icon="th-large">Dashboard</CDBSidebarMenuItem>
          <CDBSidebarMenuItem icon="sticky-note">Components</CDBSidebarMenuItem>
          <CDBSidebarMenuItem icon="credit-card" iconType="solid">
            Metrics
          </CDBSidebarMenuItem>
        </CDBSidebarMenu>
      </CDBSidebarContent>

      <CDBSidebarFooter style={{ textAlign: "center" }}>
        <div className="sidebar-btn-wrapper" style={{ padding: "20px 5px" }}>
          Sidebar Footer
        </div>
      </CDBSidebarFooter>
    </CDBSidebar>
  );
};

export default Sidebar;


ConsolidatedOrderDetailsModal.jsx
import React from 'react';
import { Modal, Table, Button } from 'react-bootstrap';

const ConsolidatedOrderDetailsModal = ({ show, onHide, order }) => {
  if (!order) return null;

  return (
    <Modal show={show} onHide={onHide} size="lg" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Detalles de la Orden Consolidada #{order.id}</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Table striped bordered hover variant="dark">
          <tbody>
            <tr>
              <td><strong>Proveedor:</strong></td>
              <td>{order.proveedor?.nombre || 'N/A'}</td>
            </tr>
            <tr>
              <td><strong>Fecha de Creación:</strong></td>
              <td>{new Date(order.fecha_creacion).toLocaleDateString()}</td>
            </tr>
            <tr>
              <td><strong>Estado:</strong></td>
              <td>{order.estado}</td>
            </tr>
            <tr>
              <td><strong>Solicitudes Vinculadas:</strong></td>
              <td>{order.solicitudes?.join(', ') || 'N/A'}</td>
            </tr>
          </tbody>
        </Table>
        <h5>Productos Consolidados</h5>
        <Table striped bordered hover variant="dark">
          <thead>
            <tr>
              <th>Producto</th>
              <th>Cantidad</th>
            </tr>
          </thead>
          <tbody>
            {order.productos?.map((p, i) => (
              <tr key={i}>
                <td>{p.descripcion || 'N/A'}</td>
                <td>{p.cantidad}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>
      <Modal.Footer className="bg-dark">
        <Button variant="secondary" onClick={onHide}>
          Cerrar
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default ConsolidatedOrderDetailsModal;

ConsolidationModal.jsx
import React, { useState, useEffect } from 'react';
import { Modal, Form, Button, Table, Row, Col, InputGroup, Alert, Badge } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const ConsolidationModal = ({ show, onHide, onConsolidate }) => {
  const [solicitudes, setSolicitudes] = useState([]);
  const [proveedores, setProveedores] = useState([]);
  const [selectedSolicitudes, setSelectedSolicitudes] = useState(new Set());
  const [cantidades, setCantidades] = useState(new Map());
  const [proveedorId, setProveedorId] = useState('');
  const [error, setError] = useState('');
  const [categorias, setCategorias] = useState([]);
  const [selectedCategoria, setSelectedCategoria] = useState('');

  useEffect(() => {
    const cargarDatos = async () => {
      try {
        const { data: solicitudesData } = await supabase
          .from('solicitudcompra')
          .select(`
            id,
            empleado:empleado_id(nombre, apellido),
            detalles:solicitudcompra_detalle(
              producto_id,
              cantidad,
              producto:producto_id(descripcion, categoria_id)
            )
          `)
          .eq('estado', 'Pendiente');

        const { data: proveedoresData } = await supabase
          .from('proveedor')
          .select(`
            id,
            nombre,
            categorias:proveedor_categoria(
              categoria_id,
              categoria:categoria_id(nombre)
            )
          `);

        const { data: categoriasData } = await supabase
          .from('categoria_producto')
          .select('id, nombre');

        setSolicitudes(solicitudesData || []);
        setProveedores(proveedoresData || []);
        setCategorias(categoriasData || []);
      } catch (err) {
        setError('Error cargando datos: ' + err.message);
      }
    };
    if (show) cargarDatos();
  }, [show]);

  const productosConsolidados = Array.from(selectedSolicitudes)
    .flatMap(solicitudId => {
      const solicitud = solicitudes.find(s => s.id === solicitudId);
      return solicitud?.detalles?.map(d => ({
        ...d,
        solicitudId: solicitud.id,
      })) || [];
    })
    .reduce((acc, item) => {
      const existente = acc.find(p => p.producto_id === item.producto_id);
      if (existente) {
        existente.cantidad += item.cantidad;
        existente.solicitudes.add(item.solicitudId);
      } else {
        acc.push({
          producto_id: item.producto_id,
          descripcion: item.producto.descripcion,
          cantidad: item.cantidad,
          solicitudes: new Set([item.solicitudId]),
          cantidadOrdenar: item.cantidad,
          categoria_id: item.producto.categoria_id,
        });
      }
      return acc;
    }, []);

  const [suggestedProviders, setSuggestedProviders] = useState([]);

  useEffect(() => {
    if (selectedSolicitudes.size > 0) {
      const categoriasIds = new Set(productosConsolidados.map(p => p.categoria_id));
      const providersWithCategories = proveedores.filter(p =>
        p.categorias?.some(c => categoriasIds.has(c.categoria_id))
      );
      setSuggestedProviders(providersWithCategories);
    } else {
      setSuggestedProviders([]);
    }
  }, [selectedSolicitudes, proveedores]);

  const solicitudesFiltradas = selectedCategoria
    ? solicitudes.filter(s => s.detalles.some(d => d.producto.categoria_id === selectedCategoria))
    : solicitudes;

  const handleCrearOrden = async () => {
    try {
      const todasSolicitudes = Array.from(selectedSolicitudes);

      const ordenData = {
        proveedor_id: Number(proveedorId),
        productos: productosConsolidados.map(p => ({
          producto_id: p.producto_id,
          descripcion: p.descripcion,
          cantidad: p.cantidadOrdenar,
        })),
        solicitudes: todasSolicitudes,
        estado: 'Pendiente',
        fecha_creacion: new Date().toISOString()
      };

      const { data, error } = await supabase
        .from('ordenes_consolidadas')
        .insert([ordenData])
        .select('id, proveedor_id, productos, solicitudes');

      if (error) throw error;

      onConsolidate(data[0]);
      onHide();
    } catch (err) {
      setError('Error al crear consolidación: ' + err.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered className="bg-dark text-light">
      <Modal.Header closeButton className="bg-dark border-secondary">
        <Modal.Title>Consolidar Solicitudes</Modal.Title>
      </Modal.Header>

      <Modal.Body>
        <Row>
          <Col md={7}>
            <Form.Group className="mb-3">
              <Form.Label>Filtrar por Categoría</Form.Label>
              <Form.Select
                value={selectedCategoria}
                onChange={(e) => setSelectedCategoria(e.target.value)}
              >
                <option value="">Todas las categorías</option>
                {categorias.map(cat => (
                  <option key={cat.id} value={cat.id}>{cat.nombre}</option>
                ))}
              </Form.Select>
            </Form.Group>
            <h5>Solicitudes Pendientes</h5>
            <Table striped bordered hover variant="dark">
              <thead>
                <tr>
                  <th></th>
                  <th>ID</th>
                  <th>Productos Solicitados</th>
                </tr>
              </thead>
              <tbody>
                {solicitudesFiltradas.map(solicitud => (
                  <tr key={solicitud.id}>
                    <td>
                      <Form.Check
                        checked={selectedSolicitudes.has(solicitud.id)}
                        onChange={(e) => {
                          const newSet = new Set(selectedSolicitudes);
                          e.target.checked
                            ? newSet.add(solicitud.id)
                            : newSet.delete(solicitud.id);
                          setSelectedSolicitudes(newSet);
                        }}
                      />
                    </td>
                    <td>#{solicitud.id}</td>
                    <td>
                      {solicitud.detalles?.map((d, i) => (
                        <Badge key={i} bg="secondary" className="me-1">
                          {d.producto.descripcion} (x{d.cantidad})
                        </Badge>
                      ))}
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </Col>

          <Col md={5} className="border-start">
            <h5>Productos Consolidados</h5>
            <Table striped bordered hover variant="dark">
              <thead>
                <tr>
                  <th>Producto</th>
                  <th>Total</th>
                  <th>A Ordenar</th>
                </tr>
              </thead>
              <tbody>
                {productosConsolidados.map((p, i) => (
                  <tr key={i}>
                    <td>{p.descripcion}</td>
                    <td>{p.cantidad}</td>
                    <td>
                      <InputGroup>
                        <Form.Control
                          type="number"
                          min="0"
                          max={p.cantidad}
                          value={cantidades.get(p.producto_id) || p.cantidad}
                          onChange={(e) => {
                            const newCantidades = new Map(cantidades);
                            newCantidades.set(p.producto_id, Math.min(p.cantidad, Number(e.target.value)));
                            setCantidades(newCantidades);
                          }}
                        />
                      </InputGroup>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>

            <h5 className="mt-4">Proveedor</h5>
            <Form.Select
              value={proveedorId}
              onChange={(e) => setProveedorId(e.target.value)}
              className="bg-secondary text-light"
            >
              <option value="">Seleccionar proveedor...</option>
              {suggestedProviders.length > 0 ? (
                <>
                  <optgroup label="Sugeridos">
                    {suggestedProviders.map(proveedor => (
                      <option key={proveedor.id} value={proveedor.id}>
                        {proveedor.nombre} - {proveedor.categorias?.map(c => c.categoria.nombre).join(', ')}
                      </option>
                    ))}
                  </optgroup>
                  <optgroup label="Otros">
                    {proveedores.map(proveedor => (
                      <option key={proveedor.id} value={proveedor.id}>
                        {proveedor.nombre} - {proveedor.categorias?.map(c => c.categoria.nombre).join(', ') || 'Sin categorías'}
                      </option>
                    ))}
                  </optgroup>
                </>
              ) : (
                proveedores.map(proveedor => (
                  <option key={proveedor.id} value={proveedor.id}>
                    {proveedor.nombre} - {proveedor.categorias?.map(c => c.categoria.nombre).join(', ') || 'Sin categorías'}
                  </option>
                ))
              )}
            </Form.Select>

            <Button
              variant="success"
              className="mt-3 w-100"
              onClick={handleCrearOrden}
              disabled={!proveedorId || productosConsolidados.length === 0}
            >
              Generar Orden Consolidada
            </Button>
          </Col>
        </Row>
      </Modal.Body>
    </Modal>
  );
};

export default ConsolidationModal;

DetailedStats.jsx
// src/components/DetailedStats.jsx
import React, { useState, useEffect } from "react";
import { Table } from "react-bootstrap";
import { supabase } from "../supabaseClient";

const DetailedStats = () => {
  const [departmentExpenses, setDepartmentExpenses] = useState([]);
  const [topOrderProducts, setTopOrderProducts] = useState([]);
  const [topRequestProducts, setTopRequestProducts] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Gastos por departamento
        const { data: orders, error: ordersError } = await supabase
          .from("ordencompra")
          .select("neto_a_pagar, departamento!departamento_id(nombre)");
        if (ordersError) throw ordersError;
        if (!orders) throw new Error("No se encontraron datos de órdenes");
        const expenses = orders.reduce((acc, order) => {
          const dept = order.departamento?.nombre || "Sin departamento";
          acc[dept] = (acc[dept] || 0) + (order.neto_a_pagar || 0);
          return acc;
        }, {});
        setDepartmentExpenses(
          Object.entries(expenses).map(([dept, total]) => ({ dept, total }))
        );

        // Productos más frecuentes en órdenes
        const { data: orderDetails, error: orderDetailsError } = await supabase
          .from("ordencompra_detalle")
          .select("cantidad, producto!producto_id(descripcion)")
          .order("cantidad", { ascending: false })
          .limit(5);
        if (orderDetailsError) throw orderDetailsError;
        if (!orderDetails) throw new Error("No se encontraron detalles de órdenes");
        const orderProducts = orderDetails.reduce((acc, detail) => {
          const prod = detail.producto?.descripcion || "Desconocido";
          acc[prod] = (acc[prod] || 0) + (detail.cantidad || 0);
          return acc;
        }, {});
        setTopOrderProducts(
          Object.entries(orderProducts).map(([product, quantity]) => ({
            product,
            quantity,
          }))
        );

        // Productos más frecuentes en solicitudes
        const { data: requestDetails, error: requestDetailsError } = await supabase
          .from("solicitudcompra_detalle")
          .select("cantidad, producto!producto_id(descripcion)")
          .order("cantidad", { ascending: false })
          .limit(5);
        if (requestDetailsError) throw requestDetailsError;
        if (!requestDetails) throw new Error("No se encontraron detalles de solicitudes");
        const requestProducts = requestDetails.reduce((acc, detail) => {
          const prod = detail.producto?.descripcion || "Desconocido";
          acc[prod] = (acc[prod] || 0) + (detail.cantidad || 0);
          return acc;
        }, {});
        setTopRequestProducts(
          Object.entries(requestProducts).map(([product, quantity]) => ({
            product,
            quantity,
          }))
        );
      } catch (error) {
        console.error("Error fetching detailed stats:", error);
        setError(error.message);
      }
    };
    fetchData();
  }, []);

  if (error) return <p className="text-light">Error: {error}</p>;

  return (
    <div className="mb-4">
      <h4 className="text-light">Gastos por Departamento</h4>
      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>Departamento</th>
            <th>Total Gastado (Bs)</th>
          </tr>
        </thead>
        <tbody>
          {departmentExpenses.map((expense, index) => (
            <tr key={index}>
              <td>{expense.dept}</td>
              <td>{expense.total.toFixed(2)}</td>
            </tr>
          ))}
        </tbody>
      </Table>

      <h4 className="text-light">Productos Más Frecuentes en Órdenes</h4>
      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>Producto</th>
            <th>Cantidad Total Ordenada</th>
          </tr>
        </thead>
        <tbody>
          {topOrderProducts.map((product, index) => (
            <tr key={index}>
              <td>{product.product}</td>
              <td>{product.quantity}</td>
            </tr>
          ))}
        </tbody>
      </Table>

      <h4 className="text-light">Productos Más Frecuentes en Solicitudes</h4>
      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>Producto</th>
            <th>Cantidad Total Solicitada</th>
          </tr>
        </thead>
        <tbody>
          {topRequestProducts.map((product, index) => (
            <tr key={index}>
              <td>{product.product}</td>
              <td>{product.quantity}</td>
            </tr>
          ))}
        </tbody>
      </Table>
    </div>
  );
};

export default DetailedStats;

DirectOrderForm.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Modal, Form, Button, Table, InputGroup } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const DirectOrderForm = ({ show, onHide, userProfile, onSuccess }) => {
  const [productos, setProductos] = useState([{ id: Date.now(), productId: '', quantity: 1, precio_unitario: 0 }]);
  const [proveedores, setProveedores] = useState([]);
  const [fetchedProducts, setFetchedProducts] = useState([]);
  const [formData, setFormData] = useState({
    sub_total: 0,
    iva: 0,
    ret_iva: 0,
    retencion_porcentaje: 75,
    neto_a_pagar: 0,
    unidad: 'Bs',
    empleado_id: userProfile?.empleado_id || null,
    proveedor_id: null
  });

  useEffect(() => {
    const cargarDatos = async () => {
      const { data: proveedoresData } = await supabase.from('proveedor').select('id, nombre');
      const { data: productsData } = await supabase.from('producto').select('*');
      
      setProveedores(proveedoresData || []);
      setFetchedProducts(productsData || []);
    };

    if (show) cargarDatos();
  }, [show]);

  const handleAddProduct = () => {
    setProductos(prev => [...prev, { 
      id: Date.now(), 
      productId: '', 
      quantity: 1, 
      precio_unitario: 0 
    }]);
  };

  const calcularTotales = useCallback((productosActualizados) => {
    const subtotal = productosActualizados.reduce(
      (acc, p) => acc + (Number(p.quantity || 0) * Number(p.precio_unitario || 0)),
      0
    );
    const iva = subtotal * 0.16;
    const retencion = iva * (Number(formData.retencion_porcentaje) / 100);
    const neto = subtotal + iva - retencion;
    
    setFormData(prev => ({ 
      ...prev, 
      sub_total: subtotal,
      iva: iva,
      ret_iva: retencion,
      neto_a_pagar: neto
    }));
  }, [formData.retencion_porcentaje]);

  const handleProductChange = useCallback((id, field, value) => {
    setProductos(prev => {
      const updated = prev.map(item => 
        item.id === id ? { ...item, [field]: value } : item
      );
      calcularTotales(updated);
      return updated;
    });
  }, [calcularTotales]);

  const handleRemoveProduct = (id) => {
    setProductos(prev => {
      const updated = prev.filter(item => item.id !== id);
      calcularTotales(updated);
      return updated;
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (!formData.proveedor_id) throw new Error("¡Seleccione un proveedor!");
      if (productos.some(p => !p.productId || p.quantity <= 0 || p.precio_unitario <= 0)) {
        throw new Error("Complete todos los campos de productos correctamente");
      }

      // Crear solicitud de compra dummy
      const { data: solicitud, error: solicitudError } = await supabase
        .from('solicitudcompra')
        .insert([{
          descripcion: 'Orden de compra directa',
          estado: 'Aprobada',
          empleado_id: userProfile.empleado_id,
          departamento_id: userProfile.departamento_id,
          fecha_solicitud: new Date().toISOString(),
        }])
        .select()
        .single();

      if (solicitudError) throw solicitudError;

      // Insertar detalles de la solicitud
      const detallesSolicitud = productos.map(p => ({
        solicitud_compra_id: solicitud.id,
        producto_id: p.productId,
        cantidad: p.quantity,
      }));

      const { error: detallesError } = await supabase
        .from('solicitudcompra_detalle')
        .insert(detallesSolicitud);

      if (detallesError) throw detallesError;

      // Crear la orden de compra con el ID de la solicitud
      const { data: orden, error } = await supabase
        .from('ordencompra')
        .insert([{
          ...formData,
          sub_total: Number(formData.sub_total),
          iva: Number(formData.iva),
          ret_iva: Number(formData.ret_iva),
          neto_a_pagar: Number(formData.neto_a_pagar),
          proveedor_id: Number(formData.proveedor_id),
          empleado_id: userProfile.empleado_id,
          estado: 'Pendiente',
          fecha_orden: new Date().toISOString(),
          solicitud_compra_id: solicitud.id,
        }])
        .select()
        .single();

      if (error) throw error;

      // Insertar detalles de la orden
      const detallesOrden = productos.map(p => ({
        orden_compra_id: orden.id,
        producto_id: p.productId,
        cantidad: Number(p.quantity),
        precio_unitario: Number(p.precio_unitario),
      }));
      await supabase.from('ordencompra_detalle').insert(detallesOrden);

      // Vincular la orden y la solicitud en orden_solicitud
      await supabase.from('orden_solicitud').insert([{
        ordencompra_id: orden.id,
        solicitud_id: solicitud.id,
      }]);

      onSuccess(orden);
      onHide();
    } catch (error) {
      alert('Error: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Crear Orden Directa</Modal.Title>
      </Modal.Header>
      
      <Modal.Body className="bg-dark text-light">
        <Form>
          <div className="row mb-4">
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Proveedor</Form.Label>
                <Form.Select
                  value={formData.proveedor_id || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, proveedor_id: e.target.value }))}
                  required
                  className="bg-secondary text-light"
                >
                  <option value="">Seleccionar proveedor...</option>
                  {proveedores.map(proveedor => (
                    <option key={proveedor.id} value={proveedor.id}>{proveedor.nombre}</option>
                  ))}
                </Form.Select>
              </Form.Group>
            </div>
            
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Unidad Monetaria</Form.Label>
                <Form.Select
                  value={formData.unidad}
                  onChange={(e) => setFormData(prev => ({ ...prev, unidad: e.target.value }))}
                  className="bg-secondary text-light"
                >
                  <option value="Bs">Bolívares (Bs)</option>
                  <option value="USD">Dólares (USD)</option>
                </Form.Select>
              </Form.Group>
            </div>
          </div>

          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Total</th>
                <th>Acción</th>
              </tr>
            </thead>
            <tbody>
              {productos.map((p) => (
                <tr key={p.id}>
                  <td>
                    <Form.Select
                      value={p.productId || ''}
                      onChange={(e) => {
                        const product = fetchedProducts.find(prod => prod.id === e.target.value);
                        handleProductChange(p.id, 'productId', e.target.value);
                        if (product) handleProductChange(p.id, 'descripcion', product.descripcion);
                      }}
                      onClick={(e) => e.stopPropagation()}
                      onMouseDown={(e) => e.stopPropagation()}
                    >
                      <option value="">Seleccionar</option>
                      {fetchedProducts.map(prod => (
                        <option key={prod.id} value={prod.id}>{prod.descripcion}</option>
                      ))}
                    </Form.Select>
                  </td>
                  <td>
                    <Form.Control
                      type="number"
                      min="1"
                      value={p.quantity}
                      onChange={(e) => handleProductChange(p.id, 'quantity', Number(e.target.value))}
                      onClick={(e) => e.stopPropagation()}
                    />
                  </td>
                  <td>
                    <InputGroup>
                      <Form.Control
                        type="number"
                        step="0.01"
                        min="0"
                        value={p.precio_unitario}
                        onChange={(e) => handleProductChange(p.id, 'precio_unitario', Number(e.target.value))}
                        onClick={(e) => e.stopPropagation()}
                      />
                      <InputGroup.Text>{formData.unidad}</InputGroup.Text>
                    </InputGroup>
                  </td>
                  <td>
                    {(Number(p.quantity || 0) * Number(p.precio_unitario || 0)).toFixed(2)}
                  </td>
                  <td>
                    <Button 
                      variant="danger" 
                      size="sm" 
                      onClick={() => handleRemoveProduct(p.id)}
                    >
                      Eliminar
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>

          <Button variant="outline-primary" onClick={handleAddProduct} className="mb-3">
            Añadir Producto
          </Button>

          <div className="mt-4 p-3 bg-secondary rounded">
            <h5>Totales</h5>
            <Form.Group className="mb-3">
              <Form.Label>Porcentaje de Retención IVA</Form.Label>
              <InputGroup>
                <Form.Control
                  type="number"
                  min="0"
                  max="100"
                  value={formData.retencion_porcentaje}
                  onChange={(e) => {
                    const value = Math.min(100, Math.max(0, Number(e.target.value)));
                    setFormData(prev => ({ ...prev, retencion_porcentaje: value }));
                    calcularTotales(productos);
                  }}
                />
                <InputGroup.Text>%</InputGroup.Text>
              </InputGroup>
            </Form.Group>
            <div className="d-flex justify-content-between">
              <span>Subtotal:</span>
              <span>{formData.unidad} {Number(formData.sub_total).toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>IVA (16%):</span>
              <span>{formData.unidad} {Number(formData.iva).toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>Retención IVA ({formData.retencion_porcentaje}%):</span>
              <span>{formData.unidad} {Number(formData.ret_iva).toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between fw-bold">
              <span>Neto a Pagar:</span>
              <span>{formData.unidad} {Number(formData.neto_a_pagar).toFixed(2)}</span>
            </div>
          </div>

          <div className="mt-4 d-grid gap-2">
            <Button variant="success" onClick={handleSubmit} size="lg">
              Crear Orden
            </Button>
            <Button variant="secondary" onClick={onHide} size="lg">
              Cancelar
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default DirectOrderForm;

generateDescription.js
const API_URL = import.meta.env.VITE_OPENROUTER_API_URL;
const API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY;
import { supabase } from "../supabaseClient";

async function getProductNames(productIds) {
  try {
    const { data, error } = await supabase
      .from('producto')
      .select('id, descripcion')
      .in('id', productIds);
    if (error) throw error;
    return data.map(p => p.descripcion);
  } catch (error) {
    console.error('Error obteniendo nombres de productos:', error);
    return productIds.map(id => `Producto ${id}`);
  }
}

async function generateDescription(products) {
  try {
    const productIds = products.map(p => p.productId);
    const productNames = await getProductNames(productIds);
    const productList = productNames.join(", ");
    const prompt = `Genera una descripción corta (máximo 5 palabras) para una solicitud de compra que incluye: ${productList}. La descripción debe resumir el propósito o categoría general de los productos basándote en su naturaleza.`;
    console.log("Prompt enviado:", prompt);

    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${API_KEY}`, // Añadido "Bearer"
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "meta-llama/llama-3-70b-instruct",
        messages: [{ role: "user", content: prompt }]
      })
    });

    if (!response.ok) {
      throw new Error(`Error en la API: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    console.log("Respuesta de la API:", data);

    if (data.choices && data.choices.length > 0) {
      return data.choices[0].message.content.trim();
    } else {
      throw new Error("Respuesta inválida de la API");
    }
  } catch (error) {
    console.error("Error en generateDescription:", error);
    return "Solicitud múltiple";
  }
}

export { generateDescription, getProductNames };

Home.jsx
import React, { useState, useEffect } from 'react';
import { Container, Table, Button, Form, Modal, Card, Row, Col } from 'react-bootstrap';
import { supabase } from '../supabaseClient';
import ProviderManagement from './ProviderManagement';
import ProductManagement from './ProductManagement';

const Home = ({ userProfile }) => {
  const [inventory, setInventory] = useState([]);
  const [stats, setStats] = useState({ total: 0, aprobadas: 0, rechazadas: 0 });
  const [showRezagadosModal, setShowRezagadosModal] = useState(false);
  const [productosRezagados, setProductosRezagados] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const { data: invData } = await supabase
        .from('inventario')
        .select(`
          *,
          producto:producto_id (
            descripcion,
            categoria:categoria_id (nombre)
          )
        `);
      setInventory(invData || []);

      const query = supabase.from('solicitudcompra').select('*');
      let reqs;
      if (userProfile.rol === 'admin') {
        const { data } = await query;
        reqs = data;
      } else {
        const { data } = await query.eq('departamento_id', userProfile.departamento_id);
        reqs = data;
      }
      setStats({
        total: reqs.length,
        aprobadas: reqs.filter(r => r.estado === 'Aprobada').length,
        rechazadas: reqs.filter(r => r.estado === 'Rechazada').length
      });

      if (userProfile?.rol === 'admin') {
        const { data: rezagadosData } = await supabase
          .from('productos_rezagados')
          .select(`
            *,
            producto:producto_id(descripcion),
            solicitud:solicitud_id(descripcion),
            orden:orden_compra_id(id)
          `);
        setProductosRezagados(rezagadosData || []);
      }
    };
    fetchData();
  }, [userProfile]);

  const handleDeleteRezagado = async (id) => {
    await supabase.from('productos_rezagados').delete().eq('id', id);
    setProductosRezagados(prev => prev.filter(p => p.id !== id));
  };

  return (
    <Container fluid className="mt-3">
      <h3 className="text-light mb-4">🏠 Inicio</h3>
      <Row className="mb-4">
        <Col md={4}>
          <Card className="bg-dark text-light">
            <Card.Body>
              <Card.Title>Total Solicitudes</Card.Title>
              <Card.Text>{stats.total}</Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={4}>
          <Card className="bg-dark text-light">
            <Card.Body>
              <Card.Title>Aprobadas</Card.Title>
              <Card.Text>{stats.aprobadas}</Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={4}>
          <Card className="bg-dark text-light">
            <Card.Body>
              <Card.Title>Rechazadas</Card.Title>
              <Card.Text>{stats.rechazadas}</Card.Text>
            </Card.Body>
          </Card>
        </Col>
      </Row>
      
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h3 className="text-light">📝 Inventario</h3>
        {userProfile?.rol === 'admin' && (
          <div>
            <Button variant="primary" onClick={() => setShowRezagadosModal(true)} className="me-2">
              Ver Productos Rezagados
            </Button>
          </div>
        )}
      </div>
      
      <Table striped bordered hover responsive variant="dark">
        <thead>
          <tr>
            <th>Nombre del Producto</th>
            <th>Categoría</th>
            <th>Ubicación</th>
            <th>Existencias</th>
            <th>Fecha de Actualización</th>
          </tr>
        </thead>
        <tbody>
          {inventory.length > 0 ? (
            inventory.map((item) => (
              <tr key={item.id}>
                <td>{item.producto?.descripcion || 'Sin nombre'}</td>
                <td>{item.producto?.categoria?.nombre || 'Sin categoría'}</td>
                <td>{item.ubicacion || 'N/A'}</td>
                <td>{item.existencias !== null ? item.existencias : '0'}</td>
                <td>{new Date(item.fecha_actualizacion).toLocaleString()}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" className="text-center text-light">
                No hay registros en el inventario
              </td>
            </tr>
          )}
        </tbody>
      </Table>

      {userProfile?.rol === 'admin' && (
        <div className="mt-4">
          <h4 className="text-light">Gestión de Proveedores y Productos</h4>
          <ProviderManagement />
          <ProductManagement />
        </div>
      )}

      <Modal show={showRezagadosModal} onHide={() => setShowRezagadosModal(false)} size="lg" centered>
        <Modal.Header closeButton className="bg-dark text-light">
          <Modal.Title>Productos Rezagados</Modal.Title>
        </Modal.Header>
        <Modal.Body className="bg-dark text-light">
          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Motivo</th>
                <th>Solicitud</th>
                <th>Orden</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              {productosRezagados.map(p => (
                <tr key={p.id}>
                  <td>{p.producto?.descripcion || 'N/A'}</td>
                  <td>{p.cantidad}</td>
                  <td>{p.motivo}</td>
                  <td>{p.solicitud?.descripcion || 'N/A'}</td>
                  <td>{p.orden?.id || 'N/A'}</td>
                  <td>
                    <Button variant="danger" onClick={() => handleDeleteRezagado(p.id)}>Eliminar</Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Modal.Body>
      </Modal>
    </Container>
  );
};

export default Home;

InventoryManagement.jsx
import React from "react";
import { Container } from "react-bootstrap";
import InventoryStats from "./InventoryStats";
import AIInsights from "./AIInsights";
import DetailedStats from "./DetailedStats";

const InventoryManagement = ({ userProfile }) => {
  return (
    <Container fluid className="mt-3">
      <h3 className="text-light mb-4">📦 Gestión de Inventario</h3>
      <InventoryStats />
      <DetailedStats />
      <AIInsights />
    </Container>
  );
};

export default InventoryManagement;

InventorySidebar
import React from "react";
import { Link } from "react-router-dom";
import { Button } from "react-bootstrap";
import "../styles/sidebar.css";

const InventorySidebar = ({ userProfile, isVisible }) => {
  return (
    <aside className={`sidebar ${isVisible ? "visible" : ""}`}>
      <h1>Gestión de Inventario</h1>
      <p className="text-light">
        Bienvenido, {userProfile.nombre} {userProfile.apellido}
      </p>
      <nav>
        <ul>
          <li>
            <Link to="/inventory" className="btn">
              <i className="bi bi-house-door me-2"></i>
              Home
            </Link>
          </li>
          <li>
            <Button variant="link" className="text-light">
              <i className="bi bi-gear me-2"></i>
              Administración
            </Button>
            <ul className="sub-menu">
              <li>
                <Link to="/inventory/view" className="btn">
                  Ver Inventario
                </Link>
              </li>
              <li>
                <Link to="/inventory/add-product" className="btn">
                  Añadir Producto
                </Link>
              </li>
              <li>
                <Link to="/inventory/add-provider" className="btn">
                  Añadir Proveedor
                </Link>
              </li>
            </ul>
          </li>
        </ul>
      </nav>
    </aside>
  );
};

export default InventorySidebar;

InventoryStats.jsx
// src/components/InventoryStats.jsx
import React, { useState, useEffect } from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const InventoryStats = () => {
  const [stats, setStats] = useState({
    totalProducts: 0,
    lowStockProducts: 0,
    totalOrders: 0,
    pendingOrders: 0,
    totalSpent: 0,
  });

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const { data: inventoryData } = await supabase
          .from('inventario')
          .select('id, existencias');
        const totalProducts = inventoryData.length;
        const lowStockProducts = inventoryData.filter(item => item.existencias < 10).length;

        const { data: ordersData } = await supabase
          .from('ordencompra')
          .select('id, estado, neto_a_pagar');
        const totalOrders = ordersData.length;
        const pendingOrders = ordersData.filter(order => order.estado === 'Pendiente').length;
        const totalSpent = ordersData.reduce((acc, order) => acc + (order.neto_a_pagar || 0), 0);

        setStats({
          totalProducts,
          lowStockProducts,
          totalOrders,
          pendingOrders,
          totalSpent,
        });
      } catch (error) {
        console.error('Error fetching stats:', error);
      }
    };
    fetchStats();
  }, []);

  return (
    <Row className="mb-4">
      <Col md={3}>
        <Card className="bg-dark text-light">
          <Card.Body>
            <Card.Title>Productos en Inventario</Card.Title>
            <Card.Text>{stats.totalProducts}</Card.Text>
          </Card.Body>
        </Card>
      </Col>
      <Col md={3}>
        <Card className="bg-dark text-light">
          <Card.Body>
            <Card.Title>Productos con Bajo Stock</Card.Title>
            <Card.Text>{stats.lowStockProducts}</Card.Text>
          </Card.Body>
        </Card>
      </Col>
      <Col md={3}>
        <Card className="bg-dark text-light">
          <Card.Body>
            <Card.Title>Órdenes de Compra Totales</Card.Title>
            <Card.Text>{stats.totalOrders}</Card.Text>
          </Card.Body>
        </Card>
      </Col>
      <Col md={3}>
        <Card className="bg-dark text-light">
          <Card.Body>
            <Card.Title>Órdenes Pendientes</Card.Title>
            <Card.Text>{stats.pendingOrders}</Card.Text>
          </Card.Body>
        </Card>
      </Col>
      <Col md={3}>
        <Card className="bg-dark text-light">
          <Card.Body>
            <Card.Title>Gasto Total en Órdenes</Card.Title>
            <Card.Text>{stats.totalSpent.toFixed(2)} Bs</Card.Text>
          </Card.Body>
        </Card>
      </Col>
    </Row>
  );
};

export default InventoryStats;

ModoOscuro.jsx
import React, { useEffect, useState } from 'react';

const ModoOscuro = () => {
    const [modo, setModo] = useState("dark");

    useEffect(() => {
        const htmlElement = document.documentElement;
        htmlElement.setAttribute("data-bs-theme", modo);
        
        // Aplicar el fondo según el tema
        document.body.style.backgroundColor = modo === "dark" 
            ? "#212529" 
            : "#f8f9fa";
            
    }, [modo]); 

    return (
        <div className="btn-group" role="group">
            <button 
                className='btn btn-primary'
                onClick={() => setModo("dark")}
                title="Modo oscuro"
            >
                <i className="bi bi-moon-fill"></i>
            </button>
            <button 
                className='btn btn-primary'
                onClick={() => setModo("light")}
                title="Modo claro"
            >
                <i className="bi bi-sun-fill"></i>
            </button>
        </div>
    );
};

export default ModoOscuro;

Navbar.jsx
import React, { useState, useRef, useEffect } from "react";
import {
  Navbar,
  Nav,
  Container,
  Button,
  Overlay,
  Popover,
} from "react-bootstrap";
import { Bell, PersonCircle, List } from "react-bootstrap-icons";
import { NavLink } from "react-router-dom";
import { supabase } from "../supabaseClient";
import { useNavigate } from "react-router-dom";
import "../styles/Navbar.css";

const CustomNavbar = ({ onToggleSidebar, userRole, userId }) => {
  const navigate = useNavigate();
  const [showNotifications, setShowNotifications] = useState(false);
  const notificationRef = useRef(null);
  const [notifications, setNotifications] = useState([]);
  const [showProfileMenu, setShowProfileMenu] = useState(false);
  const profileRef = useRef(null);

  const handleNotificationClick = () => {
    setShowNotifications(!showNotifications);
  };

  const handleProfileClick = () => {
    setShowProfileMenu(!showProfileMenu);
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    localStorage.removeItem("userProfile");
    localStorage.removeItem("sessionTime");
    navigate("/login");
  };

  useEffect(() => {
    if (!userId) return;

    const fetchUserNotifications = async () => {
      try {
        const { data, error } = await supabase
          .from("notificaciones")
          .select("*")
          .eq("user_id", userId) // userId es el ID de autenticación
          .eq("read", false)
          .order("created_at", { ascending: false });

        if (error) throw error;
        setNotifications(data || []);
      } catch (error) {
        console.error("Error fetching notifications:", error.message);
      }
    };

    fetchUserNotifications();

    const subscription = supabase
      .channel(`notificaciones:user_${userId}`)
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "notificaciones",
          filter: `user_id=eq.${userId}`,
        },
        (payload) => {
          if (!payload.new.read) {
            setNotifications((prev) => [payload.new, ...prev]);
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(subscription);
    };
  }, [userId]);

  return (
    <Navbar
      bg="dark"
      variant="dark"
      expand="lg"
      className="shadow-sm fixed-top"
    >
      <Container fluid>
        <Button variant="dark" onClick={onToggleSidebar} className="me-2">
          <List size={20} />
        </Button>
        <Navbar.Brand href="#" className="ms-2">
          Cámara de Industriales
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="navbarSupportedContent" />
        <Navbar.Collapse id="navbarSupportedContent">
          <Nav className="me-auto mb-2 mb-lg-0">
            <Nav.Link as={NavLink} to="/" end>
              Home
            </Nav.Link>
            <Nav.Link as={NavLink} to="/solicitudes">
              Solicitudes
            </Nav.Link>
          </Nav>
          <Nav className="d-flex align-items-center">
            <Nav.Link
              href="#"
              className="me-3 position-relative"
              onClick={handleNotificationClick}
              ref={notificationRef}
            >
              <Bell size={20} />
              <span
                className="badge bg-danger rounded-pill position-absolute"
                style={{ top: "-5px", right: "-5px" }}
              >
                {notifications.length}
              </span>
            </Nav.Link>
            <Overlay
              show={showNotifications}
              target={notificationRef.current}
              placement="bottom"
              container={document.body}
              rootClose
              onHide={() => setShowNotifications(false)}
            >
              <Popover id="notifications-popover">
                <Popover.Header as="h3">Notificaciones</Popover.Header>
                <Popover.Body>
                  {notifications.length > 0 ? (
                    notifications.map((notification) => (
                      <div
                        key={notification.id}
                        className="notification-item border-bottom p-2"
                      >
                        <h6 className="mb-1">{notification.title}</h6>
                        <p className="mb-1 text-muted small">
                          {notification.description}
                        </p>
                        <small className="text-muted">
                          {new Date(
                            notification.created_at
                          ).toLocaleDateString()}
                        </small>
                      </div>
                    ))
                  ) : (
                    <p className="m-0">No hay notificaciones</p>
                  )}
                </Popover.Body>
              </Popover>
            </Overlay>
            <Nav.Link
              href="#"
              className="position-relative"
              onClick={handleProfileClick}
              ref={profileRef}
            >
              <PersonCircle size={20} />
            </Nav.Link>
            <Overlay
              show={showProfileMenu}
              target={profileRef.current}
              placement="bottom"
              container={document.body}
              rootClose
              onHide={() => setShowProfileMenu(false)}
            >
              <Popover id="profile-popover">
                <Popover.Body>
                  <Button
                    variant="outline-danger"
                    onClick={handleLogout}
                    size="sm"
                  >
                    Cerrar sesión
                  </Button>
                </Popover.Body>
              </Popover>
            </Overlay>
          </Nav>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
};

export default CustomNavbar;

OrderActions.jsx
import React, { useState } from 'react';
import { Button } from 'react-bootstrap';
import OrderCompletionForm from './OrderCompletionForm';
import { supabase } from '../supabaseClient';

const OrderActions = ({ order, onUpdate }) => {
  const [showCompletionForm, setShowCompletionForm] = useState(false);

  const handleStatusChange = async (newStatus) => {
    const { error } = await supabase
      .from('ordencompra')
      .update({ estado: newStatus })
      .eq('id', order.id);

    if (!error) onUpdate();
  };

  return (
    <div className="d-flex gap-2">
      {order.estado === 'Pendiente' && (
        <>
          <Button
            variant="success"
            size="sm"
            onClick={(e) => {
              e.stopPropagation(); // Evita que el clic se propague a la fila
              setShowCompletionForm(true);
            }}
          >
            Marcar como Completada
          </Button>
          <Button
            variant="danger"
            size="sm"
            onClick={(e) => {
              e.stopPropagation(); // Evita que el clic se propague a la fila
              handleStatusChange('Anulada');
            }}
          >
            Anular Orden
          </Button>
        </>
      )}
      {order.estado === 'Completada' && (
        <Button
          variant="secondary"
          size="sm"
          onClick={(e) => {
            e.stopPropagation(); // Evita que el clic se propague a la fila
            handleStatusChange('Anulada');
          }}
        >
          Revertir a Anulada
        </Button>
      )}
      <OrderCompletionForm
        show={showCompletionForm}
        onHide={() => setShowCompletionForm(false)}
        order={order}
        onComplete={onUpdate}
      />
    </div>
  );
};

export default OrderActions;


OrderCompletionForm.jsx
import React, { useState } from 'react';
import { Modal, Form, Button, Table } from 'react-bootstrap';
import { supabase } from '../supabaseClient';
import { v4 as uuidv4 } from 'uuid'; // Para generar nombres únicos

const OrderCompletionForm = ({ show, onHide, order, onComplete }) => {
  const [productosRecibidos, setProductosRecibidos] = useState({});
  const [factura, setFactura] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // Verificar autenticación
      const { data: { session }, error: authError } = await supabase.auth.getSession();
      if (authError || !session) {
        throw new Error('Usuario no autenticado. Inicia sesión para subir facturas.');
      }

      // Registrar productos faltantes
      const faltantes = order.productos
        .filter(p => (productosRecibidos[p.producto_id] || 0) < p.cantidad)
        .map(p => ({
          orden_compra_id: order.id,
          producto_id: p.producto_id,
          cantidad_faltante: p.cantidad - (productosRecibidos[p.producto_id] || 0),
          motivo: 'No entregado'
        }));

      if (faltantes.length > 0) {
        const { error } = await supabase.from('productos_no_recibidos').insert(faltantes);
        if (error) throw error;
      }

      // Subir factura si existe
      let facturaUrl = null;
      if (factura) {
        // Verificar que es un archivo válido
        if (!(factura instanceof File)) {
          throw new Error('El objeto seleccionado no es un archivo válido');
        }

        // Generar nombre único con UUID
        const fileExtension = factura.name.split('.').pop() || 'pdf';
        const uniqueFileName = `factura_${order.id}_${uuidv4()}.${fileExtension}`;
        const filePath = uniqueFileName; // Subir directamente al bucket sin subcarpetas

        // Verificar tamaño (50MB límite)
        if (factura.size > 50 * 1024 * 1024) {
          throw new Error('El archivo excede el límite de 50MB');
        }

        console.log('Generando URL firmada para subir archivo a:', filePath);

        // Generar URL firmada para la subida
        const { data: signedData, error: signedError } = await supabase.storage
          .from('facturas')
          .createSignedUploadUrl(filePath);

        if (signedError) {
          console.error('Error al generar URL firmada:', signedError);
          throw signedError;
        }

        console.log('URL firmada generada:', signedData.signedUrl);

        // Subir el archivo usando la URL firmada
        const response = await fetch(signedData.signedUrl, {
          method: 'PUT',
          body: factura,
          headers: {
            'Content-Type': factura.type || 'application/octet-stream',
          },
        });

        if (!response.ok) {
          throw new Error(`Error al subir archivo: ${response.statusText}`);
        }

        console.log('Archivo subido con éxito mediante URL firmada');

        // Obtener URL pública (ya que el bucket es público)
        const { data: publicUrlData, error: urlError } = supabase.storage
          .from('facturas')
          .getPublicUrl(filePath);

        if (urlError) {
          console.error('Error al obtener URL pública:', urlError);
          throw urlError;
        }

        facturaUrl = publicUrlData.publicUrl;
        console.log('Factura subida con éxito:', facturaUrl);
      }

      // Actualizar estado de la orden
      const { error: updateError } = await supabase
        .from('ordencompra')
        .update({ 
          estado: 'Completada',
          documento_factura: facturaUrl 
        })
        .eq('id', order.id);

      if (updateError) throw updateError;

      // Actualizar inventario
      const updates = order.productos.map(async (p) => {
        const cantidadRecibida = productosRecibidos[p.producto_id] || 0;
        if (cantidadRecibida > 0) {
          const { data: inventarioItem } = await supabase
            .from('inventario')
            .select('id, existencias')
            .eq('producto_id', p.producto_id)
            .single();

          if (inventarioItem) {
            await supabase
              .from('inventario')
              .update({
                existencias: inventarioItem.existencias + cantidadRecibida,
                fecha_actualizacion: new Date().toISOString()
              })
              .eq('id', inventarioItem.id);
          } else {
            await supabase
              .from('inventario')
              .insert({
                producto_id: p.producto_id,
                ubicacion: 'Almacén principal',
                existencias: cantidadRecibida,
                fecha_actualizacion: new Date().toISOString()
              });
          }
        }
      });

      await Promise.all(updates);

      onComplete();
      onHide();
    } catch (error) {
      console.error('Error al completar la orden:', error);
      alert('Error al completar la orden: ' + (error.message || 'Error desconocido'));
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Completar Orden #{order.id}</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Producto</th>
                <th>Cantidad Solicitada</th>
                <th>Cantidad Recibida</th>
              </tr>
            </thead>
            <tbody>
              {order.productos.map((p, i) => (
                <tr key={i}>
                  <td>{p.producto?.descripcion || 'N/A'}</td>
                  <td>{p.cantidad}</td>
                  <td>
                    <Form.Control
                      type="number"
                      min="0"
                      max={p.cantidad}
                      value={productosRecibidos[p.producto_id] || 0}
                      onChange={(e) => setProductosRecibidos(prev => ({
                        ...prev,
                        [p.producto_id]: parseInt(e.target.value) || 0
                      }))}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>

          <Form.Group className="mt-3">
            <Form.Label>Documento de Factura</Form.Label>
            <Form.Control
              type="file"
              accept=".pdf,.jpg,.png"
              onChange={(e) => setFactura(e.target.files[0])}
            />
          </Form.Group>

          <div className="mt-4 d-flex justify-content-end">
            <Button variant="primary" type="submit">
              Finalizar Recepción
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default OrderCompletionForm;

OrderDetailsModal.jsx 
import React from 'react';
import { Modal, Table, Button } from 'react-bootstrap';
import OrderPDF from './OrderPDF';

const OrderDetailsModal = ({ show, onHide, order }) => {
  if (!order) return null;

  return (
    <Modal show={show} onHide={onHide} size="lg" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Detalles de la Orden #{order.id}</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Table striped bordered hover variant="dark">
          <tbody>
            <tr>
              <td><strong>Proveedor:</strong></td>
              <td>{order.proveedor?.nombre || 'N/A'}</td>
            </tr>
            <tr>
              <td><strong>Fecha:</strong></td>
              <td>{new Date(order.fecha_orden).toLocaleDateString()}</td>
            </tr>
            <tr>
              <td><strong>Estado:</strong></td>
              <td>{order.estado}</td>
            </tr>
            <tr>
              <td><strong>Subtotal:</strong></td>
              <td>{order.sub_total?.toFixed(2)} {order.unidad}</td>
            </tr>
            <tr>
              <td><strong>IVA:</strong></td>
              <td>{order.iva?.toFixed(2)} {order.unidad}</td>
            </tr>
            <tr>
              <td><strong>Retención IVA:</strong></td>
              <td>{order.ret_iva?.toFixed(2)} {order.unidad}</td>
            </tr>
            <tr>
              <td><strong>Neto a Pagar:</strong></td>
              <td>{order.neto_a_pagar?.toFixed(2)} {order.unidad}</td>
            </tr>
          </tbody>
        </Table>
        <h5>Productos</h5>
        <Table striped bordered hover variant="dark">
          <thead>
            <tr>
              <th>Producto</th>
              <th>Cantidad</th>
              <th>Precio Unitario</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            {order.productos?.map((p, i) => (
              <tr key={i}>
                <td>{p.producto?.descripcion || 'N/A'}</td>
                <td>{p.cantidad}</td>
                <td>{p.precio_unitario?.toFixed(2)} {order.unidad}</td>
                <td>{(p.cantidad * p.precio_unitario).toFixed(2)} {order.unidad}</td>
              </tr>
            ))}
          </tbody>
        </Table>
        <div className="d-flex justify-content-end">
          <OrderPDF order={order} />
        </div>
      </Modal.Body>
    </Modal>
  );
};

export default OrderDetailsModal;

OrderForm.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Modal, Form, Button, Table, InputGroup } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const OrderForm = ({ 
  show, 
  onHide, 
  userProfile, 
  onSuccess,
  initialProducts = [],
  proveedorId = null,
  solicitudesIds = []
}) => {
  const [productosSeleccionados, setProductosSeleccionados] = useState(
    initialProducts.map(p => ({ 
      ...p, 
      seleccionado: true, 
      motivo: '' 
    }))
  );
  const [proveedores, setProveedores] = useState([]);
  const [formData, setFormData] = useState({
    sub_total: 0,
    iva: 0,
    ret_iva: 0,
    retencion_porcentaje: 75,
    neto_a_pagar: 0,
    unidad: 'Bs',
    empleado_id: userProfile?.empleado_id || null,
    proveedor_id: proveedorId || null
  });

  useEffect(() => {
    const cargarDatos = async () => {
      const { data: proveedoresData } = await supabase.from('proveedor').select('id, nombre');
      setProveedores(proveedoresData || []);

      if (initialProducts.length > 0) {
        const formattedProducts = initialProducts.map(p => ({
          id: p.producto_id || Date.now(),
          productId: p.producto_id,
          descripcion: p.descripcion,
          quantity: Number(p.cantidad) || 0,
          precio_unitario: Number(p.precio_unitario) || 0,
          seleccionado: true,
          motivo: ''
        }));
        setProductosSeleccionados(formattedProducts);
        calcularTotales(formattedProducts);
      }
    };

    if (show) cargarDatos();
  }, [show, initialProducts]);

  const calcularTotales = useCallback((productosActualizados) => {
    const subtotal = productosActualizados
      .filter(p => p.seleccionado)
      .reduce(
        (acc, p) => acc + (Number(p.quantity || 0) * Number(p.precio_unitario || 0)),
        0
      );
    const iva = subtotal * 0.16;
    const retencion = iva * (Number(formData.retencion_porcentaje) / 100);
    const neto = subtotal + iva - retencion;
    
    setFormData(prev => ({ 
      ...prev, 
      sub_total: subtotal,
      iva: iva,
      ret_iva: retencion,
      neto_a_pagar: neto
    }));
  }, [formData.retencion_porcentaje]);

  const handleProductChange = useCallback((id, field, value) => {
    setProductosSeleccionados(prev => {
      const updated = prev.map(item => 
        item.id === id ? { ...item, [field]: value } : item
      );
      calcularTotales(updated);
      return updated;
    });
  }, [calcularTotales]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (!formData.proveedor_id) throw new Error("¡Seleccione un proveedor!");
      const productosAOrdenar = productosSeleccionados.filter(p => p.seleccionado);
      if (productosAOrdenar.some(p => !p.productId || p.quantity <= 0 || p.precio_unitario <= 0)) {
        throw new Error("Complete todos los campos de productos seleccionados correctamente");
      }

      const { data: orden, error } = await supabase
        .from('ordencompra')
        .insert([{
          ...formData,
          sub_total: Number(formData.sub_total),
          iva: Number(formData.iva),
          ret_iva: Number(formData.ret_iva),
          neto_a_pagar: Number(formData.neto_a_pagar),
          proveedor_id: Number(formData.proveedor_id),
          empleado_id: userProfile.empleado_id,
          estado: 'Pendiente',
          fecha_orden: new Date().toISOString(),
          solicitud_compra_id: solicitudesIds?.[0]
        }])
        .select()
        .single();

      if (error) throw error;

      const detalles = productosAOrdenar.map(p => ({
        orden_compra_id: orden.id,
        producto_id: p.productId,
        cantidad: Number(p.quantity),
        precio_unitario: Number(p.precio_unitario)
      }));
      await supabase.from('ordencompra_detalle').insert(detalles);

      const productosRezagados = productosSeleccionados.filter(p => !p.seleccionado);
      if (productosRezagados.length > 0) {
        const rezagadosInserts = productosRezagados.map(p => ({
          orden_compra_id: orden.id,
          producto_id: p.productId,
          cantidad: p.quantity,
          motivo: p.motivo || 'No especificado',
          solicitud_id: solicitudesIds[0]
        }));
        await supabase.from('productos_rezagados').insert(rezagadosInserts);

        const { data: empleadoSolicitud } = await supabase
          .from('solicitudcompra')
          .select('empleado_id')
          .eq('id', solicitudesIds[0])
          .single();

        await supabase.from('notificaciones').insert(
          productosRezagados.map(p => ({
            user_id: empleadoSolicitud.empleado_id,
            title: 'Producto Rezagado',
            description: `El producto ${p.descripcion} de tu solicitud #${solicitudesIds[0]} fue rezagado. Motivo: ${p.motivo || 'No especificado'}`,
            created_at: new Date().toISOString(),
            read: false
          }))
        );
      }

      if (solicitudesIds?.length > 0) {
        await supabase.from('orden_solicitud').insert(
          solicitudesIds.map(solicitudId => ({
            ordencompra_id: orden.id,
            solicitud_id: solicitudId
          }))
        );
        
        await supabase
          .from('solicitudcompra')
          .update({ estado: productosRezagados.length > 0 && productosAOrdenar.length === 0 ? 'Rechazada' : 'Aprobada' })
          .in('id', solicitudesIds);
      }

      onSuccess(orden);
      onHide();
    } catch (error) {
      alert('Error: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Crear Orden de Compra</Modal.Title>
      </Modal.Header>
      
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <div className="row mb-4">
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Proveedor</Form.Label>
                <Form.Select
                  value={formData.proveedor_id || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, proveedor_id: e.target.value }))}
                  required
                  className="bg-secondary text-light"
                >
                  <option value="">Seleccionar proveedor...</option>
                  {proveedores.map(proveedor => (
                    <option key={proveedor.id} value={proveedor.id}>{proveedor.nombre}</option>
                  ))}
                </Form.Select>
              </Form.Group>
            </div>
            
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Unidad Monetaria</Form.Label>
                <Form.Select
                  value={formData.unidad}
                  onChange={(e) => setFormData(prev => ({ ...prev, unidad: e.target.value }))}
                  className="bg-secondary text-light"
                >
                  <option value="Bs">Bolívares (Bs)</option>
                  <option value="USD">Dólares (USD)</option>
                </Form.Select>
              </Form.Group>
            </div>
          </div>

          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Seleccionar</th>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Total</th>
                <th>Motivo (si no seleccionado)</th>
              </tr>
            </thead>
            <tbody>
              {productosSeleccionados.map((p) => (
                <tr key={p.id}>
                  <td>
                    <Form.Check
                      checked={p.seleccionado}
                      onChange={(e) => {
                        const updated = [...productosSeleccionados];
                        const index = updated.findIndex(item => item.id === p.id);
                        updated[index].seleccionado = e.target.checked;
                        setProductosSeleccionados(updated);
                        calcularTotales(updated);
                      }}
                    />
                  </td>
                  <td>{p.descripcion || 'Producto no disponible'}</td>
                  <td>
                    <Form.Control
                      type="number"
                      min="1"
                      value={p.quantity}
                      onChange={(e) => handleProductChange(p.id, 'quantity', Number(e.target.value) || 1)}
                    />
                  </td>
                  <td>
                    <InputGroup>
                      <Form.Control
                        type="number"
                        step="0.01"
                        min="0"
                        value={p.precio_unitario}
                        onChange={(e) => handleProductChange(p.id, 'precio_unitario', Number(e.target.value) || 0)}
                      />
                      <InputGroup.Text>{formData.unidad}</InputGroup.Text>
                    </InputGroup>
                  </td>
                  <td>
                    {p.seleccionado ? (Number(p.quantity || 0) * Number(p.precio_unitario || 0)).toFixed(2) : 'N/A'}
                  </td>
                  <td>
                    {!p.seleccionado && (
                      <Form.Control
                        type="text"
                        value={p.motivo}
                        onChange={(e) => handleProductChange(p.id, 'motivo', e.target.value)}
                        placeholder="Motivo del rechazo"
                      />
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>

          <div className="mt-4 p-3 bg-secondary rounded">
            <h5>Totales</h5>
            <Form.Group className="mb-3">
              <Form.Label>Porcentaje de Retención IVA</Form.Label>
              <InputGroup>
                <Form.Control
                  type="number"
                  min="0"
                  max="100"
                  value={formData.retencion_porcentaje}
                  onChange={(e) => {
                    const value = Math.min(100, Math.max(0, Number(e.target.value)));
                    setFormData(prev => ({ ...prev, retencion_porcentaje: value }));
                    calcularTotales(productosSeleccionados);
                  }}
                />
                <InputGroup.Text>%</InputGroup.Text>
              </InputGroup>
            </Form.Group>
            <div className="d-flex justify-content-between">
              <span>Subtotal:</span>
              <span>{formData.unidad} {Number(formData.sub_total).toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>IVA (16%):</span>
              <span>{formData.unidad} {Number(formData.iva).toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>Retención IVA ({formData.retencion_porcentaje}%):</span>
              <span>{formData.unidad} {Number(formData.ret_iva).toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between fw-bold">
              <span>Neto a Pagar:</span>
              <span>{formData.unidad} {Number(formData.neto_a_pagar).toFixed(2)}</span>
            </div>
          </div>

          <div className="mt-4 d-grid gap-2">
            <Button variant="success" type="submit" size="lg">
              Crear Orden
            </Button>
            <Button variant="secondary" onClick={onHide} size="lg">
              Cancelar
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default OrderForm;

OrderPDF.jsx
import React, { useRef, useState } from 'react';
import { Button } from 'react-bootstrap';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { supabase } from '../supabaseClient';
import PDFTemplate from './PDFTemplate';

const OrderPDF = ({ order }) => {
  const contentRef = useRef(null);
  const [loading, setLoading] = useState(false);
  const [pdfData, setPdfData] = useState(null);

  const handleGeneratePDF = async () => {
    setLoading(true);
    try {
      // 1. Cargar datos necesarios
      const [
        { data: camara }, 
        { data: ordenCompleta }
      ] = await Promise.all([
        supabase.from('camaraindustriales').select('*').single(),
        supabase.from('ordencompra')
          .select(`
            *,
            proveedor:proveedor_id(*),
            productos:ordencompra_detalle(
              *,
              producto:producto_id(*)
            ),
            empleado:empleado_id(*)
          `)
          .eq('id', order.id)
          .single()
      ]);

      // 2. Validar datos críticos
      if (!ordenCompleta || !camara) {
        throw new Error(`
          Datos faltantes:
          ${!ordenCompleta ? '- Orden no encontrada\n' : ''}
          ${!camara ? '- Datos de la cámara no configurados' : ''}
        `);
      }

      // 3. Actualizar estado con nuevos datos
      setPdfData({ orden: ordenCompleta, camara });

      // 4. Esperar ciclo de renderizado completo
      await new Promise(resolve => setTimeout(resolve, 100));

      // 5. Configurar elemento temporal visible
      const originalStyle = contentRef.current.style.cssText;
      contentRef.current.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
        visibility: visible;
      `;

      // 6. Generar PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const canvas = await html2canvas(contentRef.current, {
        scale: 2,
        useCORS: true,
        logging: true,
        backgroundColor: '#FFFFFF'
      });

      // 7. Restaurar estilos originales
      contentRef.current.style.cssText = originalStyle;

      // 8. Validar canvas
      if (canvas.width === 0 || canvas.height === 0) {
        throw new Error('El canvas generado no tiene dimensiones válidas');
      }

      // 9. Guardar PDF
      const imgProps = pdf.getImageProperties(canvas);
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
      
      pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);
      pdf.save(`orden_${order.id}.pdf`);

    } catch (error) {
      console.error("Error generando PDF:", error);
      alert(`Error al generar PDF: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Button 
        variant="primary" 
        onClick={handleGeneratePDF}
        size="sm"
        disabled={loading}
      >
        {loading ? 'Generando...' : 'Generar PDF'}
      </Button>

      {/* Contenedor PDF - Siempre presente en el DOM */}
      <div ref={contentRef} style={{
        width: '210mm',
        minHeight: '297mm',
        visibility: 'hidden',
        position: 'absolute',
        left: '-9999px',
        backgroundColor: 'white'
      }}>
        {pdfData && <PDFTemplate orden={pdfData.orden} camara={pdfData.camara} />}
      </div>
    </>
  );
};

export default OrderPDF;

PDFTemplate.jsx
import React from 'react';
import { format } from 'date-fns';

const PDFTemplate = ({ orden, camara }) => {
  // Función de formato monetario
  const formatCurrency = (value, unidad) => {
    return new Intl.NumberFormat('es-VE', {
      style: 'currency',
      currency: unidad === 'USD' ? 'USD' : 'VES',
      minimumFractionDigits: 2
    }).format(value || 0);
  };

  // Estilos base para compatibilidad con html2canvas
  const baseStyles = {
    page: {
      width: '210mm',
      minHeight: '297mm',
      padding: '20px',
      fontFamily: 'Arial, sans-serif',
      fontSize: '14px',
      color: '#000000',
      backgroundColor: '#FFFFFF'
    },
    header: {
      textAlign: 'center',
      marginBottom: '20px',
      borderBottom: '2px solid #000'
    },
    table: {
      width: '100%',
      borderCollapse: 'collapse',
      margin: '10px 0',
      backgroundColor: '#FFFFFF'
    },
    th: {
      backgroundColor: '#f8f9fa',
      border: '1px solid #000',
      padding: '8px',
      textAlign: 'left'
    },
    td: {
      border: '1px solid #000',
      padding: '8px',
      backgroundColor: '#FFFFFF'
    }
  };

  return (
    <div style={baseStyles.page}>
      {/* Cabecera Institucional */}
      <div style={baseStyles.header}>
        <h2 style={{ fontSize: '24px', margin: '5px 0', color: '#000' }}>
          {camara.nombre}
        </h2>
        <h3 style={{ fontSize: '18px', margin: '5px 0', color: '#000' }}>
          Orden de Compra N°: {orden.id}
        </h3>
        <p style={{ margin: '3px 0', color: '#000' }}>
          {format(new Date(orden.fecha_orden), 'dd/MM/yyyy')}
        </p>
      </div>

      {/* Información de Contacto */}
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <p style={{ color: '#000' }}>{camara.direccion}</p>
        <p style={{ color: '#000' }}>
          Teléfonos: {camara.telefonos} | RIF: {camara.rif}
        </p>
        <p style={{ color: '#000' }}>
          Web: {camara.web} | Email: {camara.correo}
        </p>
      </div>

      {/* Tabla de Proveedor */}
      <table style={baseStyles.table}>
        <tbody>
          <tr>
            <td style={{ ...baseStyles.td, fontWeight: 'bold', width: '15%' }}>Proveedor:</td>
            <td style={{ ...baseStyles.td, width: '35%' }}>{orden.proveedor?.nombre || 'N/A'}</td>
            <td style={{ ...baseStyles.td, fontWeight: 'bold', width: '15%' }}>RIF:</td>
            <td style={{ ...baseStyles.td, width: '35%' }}>{orden.proveedor?.rif || 'N/A'}</td>
          </tr>
          <tr>
            <td style={{ ...baseStyles.td, fontWeight: 'bold' }}>Dirección:</td>
            <td colSpan="3" style={baseStyles.td}>{orden.proveedor?.direccion || 'N/A'}</td>
          </tr>
        </tbody>
      </table>

      {/* Instrucciones */}
      <div style={{ margin: '20px 0', padding: '10px', border: '1px solid #000' }}>
        <p style={{ fontWeight: 'bold', color: '#000' }}>
          ESTIMADO PROVEEDOR, DE ACUERDO A SU COTIZACIÓN ENVIADA POR WS, FAVOR SUMINISTRAR LO ABAJO INDICADO
        </p>
      </div>

      {/* Tabla de Productos */}
      <table style={baseStyles.table}>
        <thead>
          <tr>
            <th style={baseStyles.th}>REF</th>
            <th style={baseStyles.th}>CANTIDAD</th>
            <th style={baseStyles.th}>DESCRIPCIÓN</th>
            <th style={baseStyles.th}>PRECIO UNITARIO</th>
            <th style={baseStyles.th}>TOTAL</th>
          </tr>
        </thead>
        <tbody>
          {orden.productos?.map((item, index) => (
            <tr key={index}>
              <td style={baseStyles.td}>{item.producto_id}</td>
              <td style={{ ...baseStyles.td, textAlign: 'center' }}>{item.cantidad}</td>
              <td style={baseStyles.td}>{item.producto?.descripcion || 'N/A'}</td>
              <td style={{ ...baseStyles.td, textAlign: 'right' }}>
                {formatCurrency(item.precio_unitario, orden.unidad)}
              </td>
              <td style={{ ...baseStyles.td, textAlign: 'right' }}>
                {formatCurrency(item.cantidad * item.precio_unitario, orden.unidad)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Totales */}
      <div style={{ marginTop: '20px', textAlign: 'right' }}>
        <p style={{ color: '#000' }}>
          <strong>Subtotal:</strong> {formatCurrency(orden.sub_total, orden.unidad)}
        </p>
        <p style={{ color: '#000' }}>
          <strong>IVA (16%):</strong> {formatCurrency(orden.iva, orden.unidad)}
        </p>
        <p style={{ color: '#000' }}>
          <strong>Ret. IVA (75%):</strong> {formatCurrency(orden.ret_iva, orden.unidad)}
        </p>
        <p style={{ color: '#000', fontSize: '16px', fontWeight: 'bold' }}>
          Neto a pagar: {formatCurrency(orden.neto_a_pagar, orden.unidad)}
        </p>
      </div>

      {/* Firmas */}
      <div style={{ 
        display: 'flex',
        justifyContent: 'space-between',
        marginTop: '50px',
        paddingTop: '20px',
        borderTop: '1px solid #000'
      }}>
        <div style={{ width: '45%', textAlign: 'center' }}>
          <div style={{ borderBottom: '1px solid #000', height: '50px', marginBottom: '10px' }}></div>
          <p style={{ color: '#000', fontWeight: 'bold' }}>{orden.empleado?.nombre} {orden.empleado?.apellido}</p>
          <p style={{ color: '#000' }}>Departamento de Compras</p>
        </div>
        
        <div style={{ width: '45%', textAlign: 'center' }}>
          <div style={{ borderBottom: '1px solid #000', height: '50px', marginBottom: '10px' }}></div>
          <p style={{ color: '#000', fontWeight: 'bold' }}>Coordinación Financiera</p>
          <p style={{ color: '#000' }}>Aprobado por</p>
        </div>
      </div>
    </div>
  );
};

export default PDFTemplate;

ProductManagement.jsx
import React, { useState, useEffect } from 'react';
import { Table, Button, Form, Modal } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const ProductManagement = () => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [formData, setFormData] = useState({ id: null, descripcion: '', categoria_id: '' });

  useEffect(() => {
    fetchProducts();
    fetchCategories();
  }, []);

  const fetchProducts = async () => {
    const { data } = await supabase.from('producto').select('*');
    setProducts(data || []);
  };

  const fetchCategories = async () => {
    const { data } = await supabase.from('categoria_producto').select('*');
    setCategories(data || []);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (formData.id) {
      await supabase.from('producto').update(formData).eq('id', formData.id);
    } else {
      await supabase.from('producto').insert([formData]);
    }
    fetchProducts();
    setShowModal(false);
    setFormData({ id: null, descripcion: '', categoria_id: '' });
  };

  const handleEdit = (product) => {
    setFormData(product);
    setShowModal(true);
  };

  const handleDelete = async (id) => {
    await supabase.from('producto').delete().eq('id', id);
    fetchProducts();
  };

  return (
    <div>
      <Button onClick={() => setShowModal(true)} className="mb-3">Añadir Producto</Button>
      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>Descripción</th>
            <th>Categoría</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {products.map(p => (
            <tr key={p.id}>
              <td>{p.descripcion}</td>
              <td>{categories.find(c => c.id === p.categoria_id)?.nombre || 'N/A'}</td>
              <td>
                <Button variant="info" onClick={() => handleEdit(p)} className="me-2">Editar</Button>
                <Button variant="danger" onClick={() => handleDelete(p.id)}>Eliminar</Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton className="bg-dark text-light">
          <Modal.Title>{formData.id ? 'Editar' : 'Añadir'} Producto</Modal.Title>
        </Modal.Header>
        <Modal.Body className="bg-dark text-light">
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3">
              <Form.Label>Descripción</Form.Label>
              <Form.Control 
                value={formData.descripcion} 
                onChange={(e) => setFormData({ ...formData, descripcion: e.target.value })} 
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Categoría</Form.Label>
              <Form.Select 
                value={formData.categoria_id} 
                onChange={(e) => setFormData({ ...formData, categoria_id: e.target.value })}
                required
              >
                <option value="">Seleccionar</option>
                {categories.map(c => (
                  <option key={c.id} value={c.id}>{c.nombre}</option>
                ))}
              </Form.Select>
            </Form.Group>
            <Button type="submit" variant="primary">Guardar</Button>
          </Form>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default ProductManagement;

ProviderManagement.jsx
import React, { useState, useEffect } from 'react';
import { Table, Button, Form, Modal } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const ProviderManagement = () => {
  const [providers, setProviders] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [formData, setFormData] = useState({ id: null, nombre: '', rif: '', direccion: '', telefono: '', correo: '' });

  useEffect(() => {
    fetchProviders();
  }, []);

  const fetchProviders = async () => {
    const { data } = await supabase.from('proveedor').select('*');
    setProviders(data || []);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (formData.id) {
      await supabase.from('proveedor').update(formData).eq('id', formData.id);
    } else {
      await supabase.from('proveedor').insert([formData]);
    }
    fetchProviders();
    setShowModal(false);
    setFormData({ id: null, nombre: '', rif: '', direccion: '', telefono: '', correo: '' });
  };

  const handleEdit = (provider) => {
    setFormData(provider);
    setShowModal(true);
  };

  const handleDelete = async (id) => {
    await supabase.from('proveedor').delete().eq('id', id);
    fetchProviders();
  };

  return (
    <div>
      <Button onClick={() => setShowModal(true)} className="mb-3">Añadir Proveedor</Button>
      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>Nombre</th>
            <th>RIF</th>
            <th>Dirección</th>
            <th>Teléfono</th>
            <th>Correo</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {providers.map(p => (
            <tr key={p.id}>
              <td>{p.nombre}</td>
              <td>{p.rif}</td>
              <td>{p.direccion}</td>
              <td>{p.telefono}</td>
              <td>{p.correo}</td>
              <td>
                <Button variant="info" onClick={() => handleEdit(p)} className="me-2">Editar</Button>
                <Button variant="danger" onClick={() => handleDelete(p.id)}>Eliminar</Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton className="bg-dark text-light">
          <Modal.Title>{formData.id ? 'Editar' : 'Añadir'} Proveedor</Modal.Title>
        </Modal.Header>
        <Modal.Body className="bg-dark text-light">
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3">
              <Form.Label>Nombre</Form.Label>
              <Form.Control 
                value={formData.nombre} 
                onChange={(e) => setFormData({ ...formData, nombre: e.target.value })} 
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>RIF</Form.Label>
              <Form.Control 
                value={formData.rif} 
                onChange={(e) => setFormData({ ...formData, rif: e.target.value })} 
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Dirección</Form.Label>
              <Form.Control 
                value={formData.direccion} 
                onChange={(e) => setFormData({ ...formData, direccion: e.target.value })} 
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Teléfono</Form.Label>
              <Form.Control 
                value={formData.telefono} 
                onChange={(e) => setFormData({ ...formData, telefono: e.target.value })} 
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Correo</Form.Label>
              <Form.Control 
                value={formData.correo} 
                onChange={(e) => setFormData({ ...formData, correo: e.target.value })} 
              />
            </Form.Group>
            <Button type="submit" variant="primary">Guardar</Button>
          </Form>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default ProviderManagement;

RequestDetailsModal.jsx
import React from 'react';
import { Modal, Table, Button } from 'react-bootstrap';

const RequestDetailsModal = ({ show, onHide, request }) => {
  if (!request) return null;

  return (
    <Modal show={show} onHide={onHide} size="lg" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Detalles de la Solicitud #{request.id}</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Table striped bordered hover variant="dark">
          <tbody>
            <tr>
              <td><strong>Descripción:</strong></td>
              <td>{request.descripcion || 'N/A'}</td>
            </tr>
            <tr>
              <td><strong>Estado:</strong></td>
              <td>{request.estado}</td>
            </tr>
            <tr>
              <td><strong>Fecha de Creación:</strong></td>
              <td>{new Date(request.created_at).toLocaleDateString()}</td>
            </tr>
          </tbody>
        </Table>
        <h5>Productos Solicitados</h5>
        <Table striped bordered hover variant="dark">
          <thead>
            <tr>
              <th>Producto</th>
              <th>Cantidad</th>
            </tr>
          </thead>
          <tbody>
            {request.detalles?.map((detalle, i) => (
              <tr key={i}>
                <td>{detalle.producto?.descripcion || 'Producto no especificado'}</td>
                <td>{detalle.cantidad}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>
      <Modal.Footer className="bg-dark">
        <Button variant="secondary" onClick={onHide}>
          Cerrar
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default RequestDetailsModal;

RequestForm.jsx
import React, { useState, useEffect } from 'react';
import { Modal, Form, Button, Table } from 'react-bootstrap';
import { supabase } from '../supabaseClient.js';
import { v4 as uuidv4 } from 'uuid';

const RequestForm = ({ show, onHide, onSubmit }) => {
  const [products, setProducts] = useState([{ id: uuidv4(), productId: '', quantity: 1 }]);
  const [customRequest, setCustomRequest] = useState(false);
  const [description, setDescription] = useState('');
  const [fetchedProducts, setFetchedProducts] = useState([]);

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const { data, error } = await supabase.from('producto').select('*');
    if (!error) setFetchedProducts(data);
  };

  const handleAddProduct = () => {
    setProducts([...products, { id: uuidv4(), productId: '', quantity: 1 }]);
  };

  const handleRemoveProduct = (id) => {
    if (products.length > 1) setProducts(products.filter(p => p.id !== id));
  };

  const handleProductChange = (id, field, value) => {
    setProducts(products.map(p => p.id === id ? { ...p, [field]: value } : p));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (customRequest && !description.trim()) {
      alert('Ingrese una descripción para la requisición especial');
      return;
    }
    if (!customRequest && products.some(p => !p.productId || p.quantity < 1)) {
      alert('Complete todos los campos de productos');
      return;
    }
    onSubmit({
      products: customRequest ? null : products,
      description: customRequest ? description : null
    });
    onHide();
  };

  return (
    <Modal show={show} onHide={onHide} centered contentClassName="bg-dark text-light" size="lg">
      <Modal.Header closeButton className="bg-dark border-secondary">
        <Modal.Title className="text-light">Nueva Solicitud</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark">
        <Form onSubmit={handleSubmit}>
          {!customRequest && (
            <Table striped bordered hover variant="dark">
              <thead>
                <tr>
                  <th>Producto</th>
                  <th>Cantidad</th>
                  <th>Acción</th>
                </tr>
              </thead>
              <tbody>
                {products.map((product) => (
                  <tr key={product.id}>
                    <td>
                      <Form.Select
                        value={product.productId}
                        onChange={(e) => handleProductChange(product.id, 'productId', e.target.value)}
                      >
                        <option value="">Seleccionar producto</option>
                        {fetchedProducts.map((prod) => (
                          <option key={prod.id} value={prod.id}>{prod.descripcion}</option>
                        ))}
                      </Form.Select>
                    </td>
                    <td>
                      <Form.Control
                        type="number"
                        value={product.quantity}
                        onChange={(e) => handleProductChange(product.id, 'quantity', e.target.value)}
                        min="1"
                      />
                    </td>
                    <td>
                      {products.length > 1 && (
                        <Button variant="danger" size="sm" onClick={() => handleRemoveProduct(product.id)}>
                          Eliminar
                        </Button>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          )}

          <Button variant="outline-primary" onClick={handleAddProduct} className="mb-3" disabled={customRequest}>
            Añadir Producto
          </Button>

          <Form.Group className="mb-3">
            <Form.Check
              type="checkbox"
              label="Requisición especial"
              checked={customRequest}
              onChange={(e) => setCustomRequest(e.target.checked)}
            />
          </Form.Group>

          {customRequest && (
            <Form.Group className="mb-3">
              <Form.Label>Descripción:</Form.Label>
              <Form.Control as="textarea" rows={3} value={description} onChange={(e) => setDescription(e.target.value)} />
            </Form.Group>
          )}

          <div className="d-flex justify-content-between">
            <Button variant="secondary" onClick={onHide}>Cancelar</Button>
            <Button variant="primary" type="submit">Enviar</Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default RequestForm;

RequestTable.jsx
import React from 'react';
import { Table, Button } from 'react-bootstrap';

const RequestTable = ({ requests, withActions, onApprove, onReject, showStatus = true, onRowClick }) => {
  const getStatusBadge = (estado) => {
    const variants = {
      Pendiente: 'warning',
      Aprobada: 'success',
      Rechazada: 'danger'
    };
    
    return (
      <span className={`badge bg-${variants[estado]}`}>
        {estado}
      </span>
    );
  };

  return (
    <div className="table-responsive">
      <Table striped hover className="align-middle" variant="dark">
        <thead className="table-dark">
          <tr>
            <th>ID</th>
            <th>Descripción</th>
            <th>Departamento</th>
            <th>Productos</th>
            {showStatus && <th>Estado</th>}
            {withActions && <th>Acciones</th>}
          </tr>
        </thead>
        <tbody>
          {requests?.map(request => (
            <tr 
              key={request.id} 
              className="text-light" 
              onClick={() => onRowClick && onRowClick(request)}
              style={{ cursor: onRowClick ? 'pointer' : 'default' }}
            >
              <td>{request.id}</td>
              <td>{request.descripcion || 'N/A'}</td>
              <td>{request.departamento?.nombre || 'N/A'}</td>
              <td>
                {request.detalles?.map((detalle, i) => (
                  <div key={i} className="mb-1 small">
                    {detalle.producto && detalle.producto.descripcion ? (
                      <>
                        <strong>{detalle.producto.descripcion}</strong>
                        <span className="ms-2">(Cantidad: {detalle.cantidad})</span>
                      </>
                    ) : (
                      'Producto no especificado'
                    )}
                  </div>
                )) || 'N/A'}
              </td>
              {showStatus && <td>{getStatusBadge(request.estado)}</td>}
              {withActions && (
                <td onClick={(e) => e.stopPropagation()}>
                  <Button 
                    variant="success" 
                    size="sm" 
                    className="me-2"
                    onClick={() => onApprove(request)}
                  >
                    Aprobar
                  </Button>
                  <Button 
                    variant="danger" 
                    size="sm"
                    onClick={() => onReject(request.id)}
                  >
                    Rechazar
                  </Button>
                </td>
              )}
            </tr>
          ))}
          {requests?.length === 0 && (
            <tr>
              <td colSpan={showStatus ? 6 : 5} className="text-center text-muted py-4">
                No hay registros para mostrar
              </td>
            </tr>
          )}
        </tbody>
      </Table>
    </div>
  );
};

export default RequestTable;


Sidebar.jsx
// src/components/Sidebar.jsx
import React from "react";
import { Link, useLocation } from "react-router-dom";
import { Button } from "react-bootstrap";
import "../styles/sidebar.css";

const Sidebar = ({
  isVisible,
  onNewRequest,
  onSelectTab,
  userProfile,
  pendingRequests = [],
}) => {
  const location = useLocation();

  return (
    <aside className={`sidebar ${isVisible ? "visible" : ""}`}>
      <h1>Cámara de Industriales</h1>
      <nav>
        <ul>
          <li>
            <Link
              to="/solicitudes"
              className="btn"
              onClick={() => onSelectTab("solicitudes")}
            >
              <i className="bi bi-list-task me-2"></i>
              <span>
                Solicitudes
                <span className="badge">{pendingRequests.length}</span>
              </span>
            </Link>
          </li>
          <li>
            <Link
              to="/solicitudes"
              className="btn"
              onClick={() => onSelectTab("historial-solicitudes")}
            >
              <i className="bi bi-clock-history me-2"></i>
              Historial Solicitudes
            </Link>
          </li>
          {userProfile?.rol === "admin" && (
            <>
              <li>
                <Link
                  to="/solicitudes"
                  className="btn"
                  onClick={() => onSelectTab("ordenes")}
                >
                  <i className="bi bi-file-earmark-text me-2"></i>
                  Historial de Órdenes
                </Link>
              </li>
              <li>
                <Link
                  to="/solicitudes"
                  className="btn"
                  onClick={() => onSelectTab("ordenes-consolidadas")}
                >
                  <i className="bi bi-archive me-2"></i>
                  Órdenes Consolidadas
                </Link>
              </li>
              <li>
                <Link
                  to="/solicitudes"
                  className="btn"
                  onClick={() => onSelectTab("usuarios")}
                >
                  <i className="bi bi-people me-2"></i>
                  Gestión de Usuarios
                </Link>
              </li>
              {/* Nuevo enlace para Gestión de Inventario */}
              <li>
                <Link to="/inventory" className="btn">
                  <i className="bi bi-box-seam me-2"></i>
                  Gestión de Inventario
                </Link>
              </li>
            </>
          )}
        </ul>
      </nav>
      {userProfile?.rol === "usuario" && (
        <Button
          variant="light"
          className="new-request-btn"
          onClick={onNewRequest}
        >
          <i className="bi bi-plus-circle me-2"></i>
          Nueva Solicitud
        </Button>
      )}
    </aside>
  );
};

export default Sidebar;

UserManagement.jsx
import React, { useState, useEffect } from 'react';
import { Table, Button, Form, Modal, Badge } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [showAddUserModal, setShowAddUserModal] = useState(false);
  const [showCargoHistorialModal, setShowCargoHistorialModal] = useState(false);
  const [showAddProfileModal, setShowAddProfileModal] = useState(false);
  const [selectedEmpleadoId, setSelectedEmpleadoId] = useState(null);
  const [cargoHistorial, setCargoHistorial] = useState([]);

  // Cargar usuarios al montar el componente
  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const { data, error } = await supabase
        .from('empleado')
        .select(`
          id,
          cedula,
          nombre,
          apellido,
          cargo_actual_id,
          departamento_id,
          estado,
          cargo:cargo_actual_id (nombre),
          departamento:departamento_id (nombre)
        `)
        .order('apellido', { ascending: true });
  
      if (error) {
        throw error;
      }
  
      // Consulta separada para obtener perfiles de usuario
      const { data: profiles, error: profileError } = await supabase
        .from('user_profile')
        .select('id, empleado_id, rol');
  
      if (profileError) {
        throw profileError;
      }
  
      // Combinar datos de empleado con perfiles
      const combinedData = data.map(empleado => {
        const userProfile = profiles.find(profile => profile.empleado_id === empleado.id);
        return {
          ...empleado,
          user_profile: userProfile || null
        };
      });
  
      console.log('Datos obtenidos:', combinedData);
      if (!combinedData || combinedData.length === 0) {
        console.log('No se encontraron empleados en la base de datos.');
      }
  
      setUsers(combinedData || []);
      setFilteredUsers(combinedData || []);
    } catch (error) {
      console.error('Error al cargar empleados:', error.message);
      alert('Error al cargar empleados: ' + error.message);
    }
  };
  // Manejar búsqueda
  const handleSearch = (e) => {
    const term = e.target.value.toLowerCase();
    setSearchTerm(term);
    if (term === '') {
      setFilteredUsers(users); // Restablecer a la lista completa si el término está vacío
    } else {
      const filtered = users.filter(user =>
        user.nombre.toLowerCase().includes(term) ||
        user.apellido.toLowerCase().includes(term) ||
        user.cedula.toLowerCase().includes(term)
      );
      setFilteredUsers(filtered);
    }
  };

  // Cambiar estado (activo/inactivo)
  const handleToggleEstado = async (empleadoId, currentEstado) => {
    const newEstado = currentEstado === 'activo' ? 'inactivo' : 'activo';
    try {
      const { error } = await supabase
        .from('empleado')
        .update({ estado: newEstado })
        .eq('id', empleadoId);

      if (error) throw error;
      fetchUsers(); // Refrescar la lista
    } catch (error) {
      console.error('Error al actualizar estado:', error);
      alert('Error al actualizar estado: ' + error.message);
    }
  };

  // Ver historial de cargos
  const handleViewCargoHistorial = async (empleadoId) => {
    setSelectedEmpleadoId(empleadoId);
    try {
      const { data, error } = await supabase
        .from('empleadocargohistorial')
        .select(`
          id,
          cargo_id,
          fecha_inicio,
          fecha_fin,
          cargo:cargo_id (nombre)
        `)
        .eq('empleado_id', empleadoId)
        .order('fecha_inicio', { ascending: false });

      if (error) throw error;
      setCargoHistorial(data || []);
      setShowCargoHistorialModal(true);
    } catch (error) {
      console.error('Error al cargar historial de cargos:', error);
      alert('Error al cargar historial: ' + error.message);
    }
  };

  // Abrir modal para añadir perfil
  const handleAddProfile = (empleadoId) => {
    setSelectedEmpleadoId(empleadoId);
    setShowAddProfileModal(true);
  };

  return (
    <div className="bg-dark rounded-3 p-4 border border-secondary">
      <h4 className="text-light mb-4">👥 Gestión de Usuarios</h4>
      
      <div className="d-flex justify-content-between mb-3">
        <Form.Control
          type="text"
          placeholder="Buscar por nombre, apellido o cédula"
          value={searchTerm}
          onChange={handleSearch}
          className="w-50"
        />
        <Button variant="primary" onClick={() => setShowAddUserModal(true)}>
          Añadir Empleado
        </Button>
      </div>

      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>ID</th>
            <th>Cédula</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Cargo</th>
            <th>Departamento</th>
            <th>Estado</th>
            <th>Usuario</th>
            <th>Rol</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {filteredUsers.length > 0 ? (
            filteredUsers.map(user => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.cedula}</td>
                <td>{user.nombre}</td>
                <td>{user.apellido}</td>
                <td>{user.cargo?.nombre || 'N/A'}</td>
                <td>{user.departamento?.nombre || 'N/A'}</td>
                <td>
                  <Badge bg={user.estado === 'activo' ? 'success' : 'danger'}>
                    {user.estado}
                  </Badge>
                </td>
                <td>
                  {user.user_profile ? (
                    <Badge bg="success">Sí</Badge>
                  ) : (
                    <Badge bg="warning">No</Badge>
                  )}
                </td>
                <td>{user.user_profile?.rol || 'N/A'}</td>
                <td>
                  <Button
                    variant={user.estado === 'activo' ? 'danger' : 'success'}
                    size="sm"
                    onClick={() => handleToggleEstado(user.id, user.estado)}
                    className="me-2"
                  >
                    {user.estado === 'activo' ? 'Inhabilitar' : 'Habilitar'}
                  </Button>
                  <Button
                    variant="info"
                    size="sm"
                    onClick={() => handleViewCargoHistorial(user.id)}
                    className="me-2"
                  >
                    Ver Historial
                  </Button>
                  {!user.user_profile && (
                    <Button
                      variant="primary"
                      size="sm"
                      onClick={() => handleAddProfile(user.id)}
                    >
                      Añadir Perfil
                    </Button>
                  )}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="10" className="text-center">
                No se encontraron empleados
              </td>
            </tr>
          )}
        </tbody>
      </Table>

      {/* Modal para añadir empleado */}
      <AddUserModal
        show={showAddUserModal}
        onHide={() => setShowAddUserModal(false)}
        onAddUser={fetchUsers}
      />

      {/* Modal para añadir perfil de usuario */}
      <AddProfileModal
        show={showAddProfileModal}
        onHide={() => setShowAddProfileModal(false)}
        empleadoId={selectedEmpleadoId}
        onAddProfile={fetchUsers}
      />

      {/* Modal para historial de cargos */}
      <CargoHistorialModal
        show={showCargoHistorialModal}
        onHide={() => setShowCargoHistorialModal(false)}
        cargoHistorial={cargoHistorial}
      />
    </div>
  );
};

// Componente para el modal de añadir empleado
const AddUserModal = ({ show, onHide, onAddUser }) => {
  const [formData, setFormData] = useState({
    cedula: '',
    nombre: '',
    apellido: '',
    email: '',
    cargo_id: '',
    departamento_id: '',
    rol: 'usuario'
  });

  const [cargos, setCargos] = useState([]);
  const [departamentos, setDepartamentos] = useState([]);

  useEffect(() => {
    const fetchCargos = async () => {
      const { data } = await supabase.from('cargo').select('id, nombre');
      setCargos(data || []);
    };
    const fetchDepartamentos = async () => {
      const { data } = await supabase.from('departamento').select('id, nombre');
      setDepartamentos(data || []);
    };
    fetchCargos();
    fetchDepartamentos();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Insertar empleado
      const { data: empleadoData, error: empleadoError } = await supabase
        .from('empleado')
        .insert([{
          cedula: formData.cedula,
          nombre: formData.nombre,
          apellido: formData.apellido,
          cargo_actual_id: formData.cargo_id,
          departamento_id: formData.departamento_id,
          estado: 'activo'
        }])
        .select('id')
        .single();

      if (empleadoError) throw empleadoError;

      // Crear usuario en Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: 'defaultPassword123', // Considera pedir una contraseña al usuario
      });

      if (authError) throw authError;

      // Insertar perfil de usuario vinculado al empleado y al usuario de autenticación
      const { error: userProfileError } = await supabase
        .from('user_profile')
        .insert([{
          empleado_id: empleadoData.id,
          departamento_id: formData.departamento_id,
          rol: formData.rol,
          id: authData.user.id // Vincular con el ID del usuario autenticado
        }]);

      if (userProfileError) throw userProfileError;

      // Insertar en historial de cargos
      await supabase
        .from('empleadocargohistorial')
        .insert([{
          empleado_id: empleadoData.id,
          cargo_id: formData.cargo_id,
          fecha_inicio: new Date().toISOString().split('T')[0],
          fecha_fin: null
        }]);

      onAddUser();
      onHide();
    } catch (error) {
      console.error('Error al añadir empleado:', error);
      alert('Error al añadir empleado: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Añadir Nuevo Empleado</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Cédula</Form.Label>
            <Form.Control
              type="text"
              value={formData.cedula}
              onChange={(e) => setFormData({ ...formData, cedula: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Nombre</Form.Label>
            <Form.Control
              type="text"
              value={formData.nombre}
              onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Apellido</Form.Label>
            <Form.Control
              type="text"
              value={formData.apellido}
              onChange={(e) => setFormData({ ...formData, apellido: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Correo Electrónico</Form.Label>
            <Form.Control
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Cargo</Form.Label>
            <Form.Select
              value={formData.cargo_id}
              onChange={(e) => setFormData({ ...formData, cargo_id: e.target.value })}
              required
            >
              <option value="">Seleccionar cargo</option>
              {cargos.map(cargo => (
                <option key={cargo.id} value={cargo.id}>{cargo.nombre}</option>
              ))}
            </Form.Select>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Departamento</Form.Label>
            <Form.Select
              value={formData.departamento_id}
              onChange={(e) => setFormData({ ...formData, departamento_id: e.target.value })}
              required
            >
              <option value="">Seleccionar departamento</option>
              {departamentos.map(depto => (
                <option key={depto.id} value={depto.id}>{depto.nombre}</option>
              ))}
            </Form.Select>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Rol</Form.Label>
            <Form.Select
              value={formData.rol}
              onChange={(e) => setFormData({ ...formData, rol: e.target.value })}
            >
              <option value="usuario">Usuario</option>
              <option value="admin">Administrador</option>
            </Form.Select>
          </Form.Group>
          <Button variant="primary" type="submit">
            Añadir Empleado
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

// Componente para el modal de añadir perfil de usuario
const AddProfileModal = ({ show, onHide, empleadoId, onAddProfile }) => {
  const [rol, setRol] = useState('usuario');
  const [departamentos, setDepartamentos] = useState([]);
  const [departamentoId, setDepartamentoId] = useState('');
  const [email, setEmail] = useState('');

  useEffect(() => {
    const fetchDepartamentos = async () => {
      const { data } = await supabase.from('departamento').select('id, nombre');
      setDepartamentos(data || []);
    };
    fetchDepartamentos();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Crear usuario en Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password: 'defaultPassword123', // Considera pedir una contraseña al usuario
      });

      if (authError) throw authError;

      // Insertar perfil de usuario
      const { error } = await supabase
        .from('user_profile')
        .insert([{
          empleado_id: empleadoId,
          departamento_id: departamentoId,
          rol: rol,
          id: authData.user.id // Vincular con el ID del usuario autenticado
        }]);

      if (error) throw error;

      onAddProfile();
      onHide();
    } catch (error) {
      console.error('Error al añadir perfil:', error);
      alert('Error al añadir perfil: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Añadir Perfil de Usuario</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Correo Electrónico</Form.Label>
            <Form.Control
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Departamento</Form.Label>
            <Form.Select
              value={departamentoId}
              onChange={(e) => setDepartamentoId(e.target.value)}
              required
            >
              <option value="">Seleccionar departamento</option>
              {departamentos.map(depto => (
                <option key={depto.id} value={depto.id}>{depto.nombre}</option>
              ))}
            </Form.Select>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Rol</Form.Label>
            <Form.Select
              value={rol}
              onChange={(e) => setRol(e.target.value)}
            >
              <option value="usuario">Usuario</option>
              <option value="admin">Administrador</option>
            </Form.Select>
          </Form.Group>
          <Button variant="primary" type="submit">
            Añadir Perfil
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

// Componente para el modal de historial de cargos
const CargoHistorialModal = ({ show, onHide, cargoHistorial }) => {
  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Historial de Cargos</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Table striped bordered hover variant="dark">
          <thead>
            <tr>
              <th>Cargo</th>
              <th>Fecha Inicio</th>
              <th>Fecha Fin</th>
            </tr>
          </thead>
          <tbody>
            {cargoHistorial.map(hist => (
              <tr key={hist.id}>
                <td>{hist.cargo?.nombre || 'N/A'}</td>
                <td>{new Date(hist.fecha_inicio).toLocaleDateString()}</td>
                <td>{hist.fecha_fin ? new Date(hist.fecha_fin).toLocaleDateString() : 'Actual'}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>
    </Modal>
  );
};

export default UserManagement;

ViewInventory.jsx
import React, { useState, useEffect } from "react";
import { Table } from "react-bootstrap";
import { supabase } from "../supabaseClient";

const ViewInventory = () => {
  const [inventory, setInventory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchInventory = async () => {
      try {
        const { data, error } = await supabase
          .from("inventario")
          .select("*, producto!producto_id(descripcion)");
        if (error) throw error;
        setInventory(data || []);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };
    fetchInventory();
  }, []);

  if (loading) return <p className="text-light">Cargando inventario...</p>;
  if (error) return <p className="text-light">Error: {error}</p>;

  return (
    <div className="mt-3">
      <h4 className="text-light">Inventario Actual</h4>
      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>Producto</th>
            <th>Ubicación</th>
            <th>Existencias</th>
            <th>Fecha de Actualización</th>
          </tr>
        </thead>
        <tbody>
          {inventory.map((item) => (
            <tr key={item.id}>
              <td>{item.producto?.descripcion || "N/A"}</td>
              <td>{item.ubicacion || "N/A"}</td>
              <td>{item.existencias}</td>
              <td>{new Date(item.fecha_actualizacion).toLocaleDateString()}</td>
            </tr>
          ))}
        </tbody>
      </Table>
    </div>
  );
};

export default ViewInventory;

Necesito que me ayudes con los errores que se me presentaron anteriormente luego de implementar el apartado de inventario y lo de la IA etc, ayudame a corregir todas las fallas 
Ahora que tienes una vision completa del codigo y de exactamente como es mi base de datos de supabase 
Quiero que analises que es lo que sucede y lo corrijas, recuerda darme el codigo completo de los archivos que modifiques 
Quiero que soluciones todas las fallas que observes en el codigo y tambien todas las fallas que ya son visibles desde la consola del navegador 

Uncaught (in promise) Error: Cannot determine language
    at y (VM1718 content-all.js:1:49083)
y @ VM1718 content-all.js:1
@supabase_supabase-js.js?v=de583e3f:3907 
        
        
       GET https://pckbdperupovxrniubrl.supabase.co/rest/v1/notificaciones?select=*&user_id=eq.210c04f0-6b06-4d92-a2c1-101d578dac22&read=eq.false&order=created_at.desc 404 (Not Found)
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3907
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3928
fulfilled @ @supabase_supabase-js.js?v=de583e3f:3880
Promise.then
step @ @supabase_supabase-js.js?v=de583e3f:3893
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3895
__awaiter6 @ @supabase_supabase-js.js?v=de583e3f:3877
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3918
then @ @supabase_supabase-js.js?v=de583e3f:89
Navbar.jsx:54 Error fetching notifications: relation "public.notificaciones" does not exist
fetchUserNotifications @ Navbar.jsx:54
await in fetchUserNotifications
(anonymous) @ Navbar.jsx:58
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17478
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
commitHookEffectListMount @ react-dom_client.js?v=de583e3f:8460
commitHookPassiveMountEffects @ react-dom_client.js?v=de583e3f:8518
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9887
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9899
flushPassiveEffects @ react-dom_client.js?v=de583e3f:11302
flushPendingEffects @ react-dom_client.js?v=de583e3f:11276
performSyncWorkOnRoot @ react-dom_client.js?v=de583e3f:11632
flushSyncWorkAcrossRoots_impl @ react-dom_client.js?v=de583e3f:11536
flushSpawnedWork @ react-dom_client.js?v=de583e3f:11254
commitRoot @ react-dom_client.js?v=de583e3f:11081
commitRootWhenReady @ react-dom_client.js?v=de583e3f:10512
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10457
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<CustomNavbar>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
AuthenticatedLayout @ App.jsx:60
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<AuthenticatedLayout>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
App @ App.jsx:439
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopSync @ react-dom_client.js?v=de583e3f:10728
renderRootSync @ react-dom_client.js?v=de583e3f:10711
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<App>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
(anonymous) @ main.jsx:10
@supabase_supabase-js.js?v=de583e3f:3907 
        
        
       GET https://pckbdperupovxrniubrl.supabase.co/rest/v1/notificaciones?select=*&user_id=eq.210c04f0-6b06-4d92-a2c1-101d578dac22&read=eq.false&order=created_at.desc 404 (Not Found)
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3907
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3928
fulfilled @ @supabase_supabase-js.js?v=de583e3f:3880
Promise.then
step @ @supabase_supabase-js.js?v=de583e3f:3893
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3895
__awaiter6 @ @supabase_supabase-js.js?v=de583e3f:3877
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3918
then @ @supabase_supabase-js.js?v=de583e3f:89
Navbar.jsx:54 Error fetching notifications: relation "public.notificaciones" does not exist
fetchUserNotifications @ Navbar.jsx:54
await in fetchUserNotifications
(anonymous) @ Navbar.jsx:58
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17478
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
commitHookEffectListMount @ react-dom_client.js?v=de583e3f:8460
commitHookPassiveMountEffects @ react-dom_client.js?v=de583e3f:8518
reconnectPassiveEffects @ react-dom_client.js?v=de583e3f:10016
recursivelyTraverseReconnectPassiveEffects @ react-dom_client.js?v=de583e3f:9995
reconnectPassiveEffects @ react-dom_client.js?v=de583e3f:10009
doubleInvokeEffectsOnFiber @ react-dom_client.js?v=de583e3f:11461
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11432
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
commitDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11469
flushPassiveEffects @ react-dom_client.js?v=de583e3f:11309
flushPendingEffects @ react-dom_client.js?v=de583e3f:11276
performSyncWorkOnRoot @ react-dom_client.js?v=de583e3f:11632
flushSyncWorkAcrossRoots_impl @ react-dom_client.js?v=de583e3f:11536
flushSpawnedWork @ react-dom_client.js?v=de583e3f:11254
commitRoot @ react-dom_client.js?v=de583e3f:11081
commitRootWhenReady @ react-dom_client.js?v=de583e3f:10512
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10457
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<CustomNavbar>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
AuthenticatedLayout @ App.jsx:60
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<AuthenticatedLayout>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
App @ App.jsx:439
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopSync @ react-dom_client.js?v=de583e3f:10728
renderRootSync @ react-dom_client.js?v=de583e3f:10711
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<App>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
(anonymous) @ main.jsx:10
@supabase_supabase-js.js?v=de583e3f:3907 
        
        
       GET https://pckbdperupovxrniubrl.supabase.co/rest/v1/ordencompra?select=neto_a_pagar%2Cdepartamento%21departamento_id%28nombre%29 400 (Bad Request)
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3907
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3928
fulfilled @ @supabase_supabase-js.js?v=de583e3f:3880
Promise.then
step @ @supabase_supabase-js.js?v=de583e3f:3893
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3895
__awaiter6 @ @supabase_supabase-js.js?v=de583e3f:3877
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3918
then @ @supabase_supabase-js.js?v=de583e3f:89
DetailedStats.jsx:70 Error fetching detailed stats: {code: 'PGRST200', details: "Searched for a foreign key relationship between 'o…n the schema 'public', but no matches were found.", hint: null, message: "Could not find a relationship between 'ordencompra' and 'departamento' in the schema cache"}
fetchData @ DetailedStats.jsx:70
await in fetchData
(anonymous) @ DetailedStats.jsx:74
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17478
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
commitHookEffectListMount @ react-dom_client.js?v=de583e3f:8460
commitHookPassiveMountEffects @ react-dom_client.js?v=de583e3f:8518
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9887
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9881
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9984
recursivelyTraversePassiveMountEffects @ react-dom_client.js?v=de583e3f:9868
commitPassiveMountOnFiber @ react-dom_client.js?v=de583e3f:9899
flushPassiveEffects @ react-dom_client.js?v=de583e3f:11302
(anonymous) @ react-dom_client.js?v=de583e3f:11060
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<DetailedStats>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
InventoryManagement @ InventoryManagement.jsx:12
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<InventoryManagement>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
AuthenticatedLayout @ App.jsx:135
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<AuthenticatedLayout>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
App @ App.jsx:439
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopSync @ react-dom_client.js?v=de583e3f:10728
renderRootSync @ react-dom_client.js?v=de583e3f:10711
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<App>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
(anonymous) @ main.jsx:10
@supabase_supabase-js.js?v=de583e3f:3907 
        
        
       GET https://pckbdperupovxrniubrl.supabase.co/rest/v1/ordencompra?select=neto_a_pagar%2Cdepartamento%21departamento_id%28nombre%29 400 (Bad Request)
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3907
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3928
fulfilled @ @supabase_supabase-js.js?v=de583e3f:3880
Promise.then
step @ @supabase_supabase-js.js?v=de583e3f:3893
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3895
__awaiter6 @ @supabase_supabase-js.js?v=de583e3f:3877
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3918
then @ @supabase_supabase-js.js?v=de583e3f:89
DetailedStats.jsx:70 Error fetching detailed stats: {code: 'PGRST200', details: "Searched for a foreign key relationship between 'o…n the schema 'public', but no matches were found.", hint: null, message: "Could not find a relationship between 'ordencompra' and 'departamento' in the schema cache"}code: "PGRST200"details: "Searched for a foreign key relationship between 'ordencompra' and 'departamento' using the hint 'departamento_id' in the schema 'public', but no matches were found."hint: nullmessage: "Could not find a relationship between 'ordencompra' and 'departamento' in the schema cache"[[Prototype]]: Object
fetchData @ DetailedStats.jsx:70
await in fetchData
(anonymous) @ DetailedStats.jsx:74
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17478
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
commitHookEffectListMount @ react-dom_client.js?v=de583e3f:8460
commitHookPassiveMountEffects @ react-dom_client.js?v=de583e3f:8518
reconnectPassiveEffects @ react-dom_client.js?v=de583e3f:10016
recursivelyTraverseReconnectPassiveEffects @ react-dom_client.js?v=de583e3f:9995
reconnectPassiveEffects @ react-dom_client.js?v=de583e3f:10054
recursivelyTraverseReconnectPassiveEffects @ react-dom_client.js?v=de583e3f:9995
reconnectPassiveEffects @ react-dom_client.js?v=de583e3f:10009
recursivelyTraverseReconnectPassiveEffects @ react-dom_client.js?v=de583e3f:9995
reconnectPassiveEffects @ react-dom_client.js?v=de583e3f:10009
doubleInvokeEffectsOnFiber @ react-dom_client.js?v=de583e3f:11461
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11432
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
recursivelyTraverseAndDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11438
commitDoubleInvokeEffectsInDEV @ react-dom_client.js?v=de583e3f:11469
flushPassiveEffects @ react-dom_client.js?v=de583e3f:11309
(anonymous) @ react-dom_client.js?v=de583e3f:11060
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<DetailedStats>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
InventoryManagement @ InventoryManagement.jsx:12
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<InventoryManagement>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
AuthenticatedLayout @ App.jsx:135
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<AuthenticatedLayout>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
App @ App.jsx:439
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopSync @ react-dom_client.js?v=de583e3f:10728
renderRootSync @ react-dom_client.js?v=de583e3f:10711
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<App>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
(anonymous) @ main.jsx:10
@supabase_supabase-js.js?v=de583e3f:3907 
        
        
       GET https://pckbdperupovxrniubrl.supabase.co/rest/v1/ordencompra?select=neto_a_pagar%2Cdepartamento%21departamento_id%28nombre%29 400 (Bad Request)
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3907
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3928
fulfilled @ @supabase_supabase-js.js?v=de583e3f:3880
Promise.then
step @ @supabase_supabase-js.js?v=de583e3f:3893
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3895
__awaiter6 @ @supabase_supabase-js.js?v=de583e3f:3877
(anonymous) @ @supabase_supabase-js.js?v=de583e3f:3918
then @ @supabase_supabase-js.js?v=de583e3f:89
AIInsights.jsx:39 Error fetching AI response: Error: Faltan las credenciales de OpenRouter en el archivo .env
    at fetchAIResponse (AIInsights.jsx:16:15)
    at handleGenerateInsight (AIInsights.jsx:100:30)
fetchAIResponse @ AIInsights.jsx:39
handleGenerateInsight @ AIInsights.jsx:100
await in handleGenerateInsight
onClick @ AIInsights.jsx:120
executeDispatch @ react-dom_client.js?v=de583e3f:11736
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
processDispatchQueue @ react-dom_client.js?v=de583e3f:11772
(anonymous) @ react-dom_client.js?v=de583e3f:12182
batchedUpdates$1 @ react-dom_client.js?v=de583e3f:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=de583e3f:11877
dispatchEvent @ react-dom_client.js?v=de583e3f:14792
dispatchDiscreteEvent @ react-dom_client.js?v=de583e3f:14773
<button>
exports.jsx @ chunk-NJLIVH7H.js?v=de583e3f:250
Button @ react-bootstrap.js?v=de583e3f:2001
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateForwardRef @ react-dom_client.js?v=de583e3f:6461
beginWork @ react-dom_client.js?v=de583e3f:7864
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<Button>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
AIInsights @ AIInsights.jsx:119
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<AIInsights>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
InventoryManagement @ InventoryManagement.jsx:13
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<InventoryManagement>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
AuthenticatedLayout @ App.jsx:135
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopConcurrentByScheduler @ react-dom_client.js?v=de583e3f:10864
renderRootConcurrent @ react-dom_client.js?v=de583e3f:10844
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<AuthenticatedLayout>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
App @ App.jsx:439
react-stack-bottom-frame @ react-dom_client.js?v=de583e3f:17424
renderWithHooksAgain @ react-dom_client.js?v=de583e3f:4281
renderWithHooks @ react-dom_client.js?v=de583e3f:4217
updateFunctionComponent @ react-dom_client.js?v=de583e3f:6619
beginWork @ react-dom_client.js?v=de583e3f:7654
runWithFiberInDEV @ react-dom_client.js?v=de583e3f:1485
performUnitOfWork @ react-dom_client.js?v=de583e3f:10868
workLoopSync @ react-dom_client.js?v=de583e3f:10728
renderRootSync @ react-dom_client.js?v=de583e3f:10711
performWorkOnRoot @ react-dom_client.js?v=de583e3f:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=de583e3f:11623
performWorkUntilDeadline @ react-dom_client.js?v=de583e3f:36
<App>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=de583e3f:250
(anonymous) @ main.jsx:10

Quiero que hagas un apartado para la gestion de inventario, solo podra acceder el usuario administrador, que por ahora no es visible en el proyecto
necesito que este apartado de gestion de inventario sea otra vista aparte con su propia sidebar
en la que se vera el nombre del usuario que se inicio sesion
Se vera en el sidebar "Home" "Administracion" Donde se desplegaran opciones para visualizar el inventario y añadir productos o proveedores a el 
Similar a como se ve en la Home del administrador en la parte de las ordenes de compra, que hay unas opciones donde se ve ordenadamente cada departamento señalando la cantidad de solicitudes de compra 
Quiero que tambien haya algo asi para la parte de gestion de inventario, pues en su home quiero que haya 
Cuadros asi para visualizar estadisticas de las ordenes de compra 
Necesito que se calculen cuantas estadisticas sean posibles 

Hay varias cosas que se pueden añadir para ver varios tipos de estadisticas dentro de este apartado 
Cabe destacar que seria increible tener en cuenta el uso de la IA ya que la implemente en este proyecto para 
generar descripciones, quiero que la IA se use mucho mas que solo para generar descripciones asi que quiero que se explote mucho en este apartado de inventario 

Entre las cosas que podrias añadir podria ser 

- Auditor Automático de Gastos por Departamento
-Optimizador de Proveedores Éticos Locales: Contexto: Priorizan compras a industriales locales asociados a la cámara.
Solución:

IA que sugiere proveedores 

Genera ranking con explicaciones: 
{
  "ranking": [
    {
      "proveedor": "Papeles Carabobo C.A.",
      "score": 92/100,
      "razones": "Entrega en 24h | Precio 15% bajo promedio | "
    }
  ]
}

- Predictor de Consumo con Contexto Operativo: Problema: Compra reactiva de insumos (ej: se acaban las resmas durante eventos importantes).
Solución:
Modelo que cruza:

Histórico de consumo

Calendario de eventos (ferias, talleres) (para eso habria que desarrollar una conexion a al software que ya existe para el calendario y por ahora no haremos eso)

Datos externos (ej: inflación en precios de papel)

Por ahora podria ser algo asi 

prompt = f"""
Según estos datos:
- Eventos programados: 3 ferias en octubre
- Consumo promedio mensual: 15 resmas
- Tasa inflación papel: 8% mensual
Recomienda cantidad a comprar para Q4 con justificación técnica.
"""

Sin embargo debe ser un prompt hecho automaticamente, el usuario no tiene que calcular esas cosas ni escribirlo para recibir el aviso de la IA o ver lo que dice 
Output: "Comprar 60 resmas en septiembre (40% sobre promedio): cubrirá ferias + evitar aumento de precios."

-Asistente Inteligente para Solicitudes Recurrentes (MVP Recomendado)
Problema: Solicitudes repetitivas de insumos básicos (papelería, toners, materiales de mantenimiento).
Solución:

Chatbot que pregunta al usuario si quiere realizar una orden de compra recurrente 
Clasificar ordenes de compra recurrentes para que el usuario pueda seleccionar la que desee dar click para crear la orden de compra o editar antes de crearla 


-A lineas generales necesito estadisticas de gastos, compras, productos mas frecuentes en las ordenes y productos mas frecuentes en las solicitudes de compra
Sugerencias en base a las estadisticas 


1. Pronóstico de Demanda con Series Temporales + IA
Objetivo: Predecir cantidades óptimas a comprar.

Metodología:

Modelos híbridos: Combina ARIMA/SARIMA (para estacionalidad) con redes neuronales (LSTM/Transformer) para capturar patrones no lineales.

Variables externas: Incluye datos económicos (inflación, tipo de cambio) y eventos (festivos, promociones).
# Ejemplo simplificado con Prophet (Facebook)
from prophet import Prophet
model = Prophet(seasonality_mode='multiplicative')
model.add_regressor('tipo_cambio')  # Variable externa
model.fit(df_historico)
forecast = model.predict(future_df)
Impacto: Reduce un 30-50% el exceso de inventario (según estudios de McKinsey).

2. Detección de Anomalías en Compras
Objetivo: Identificar solicitudes atípicas (fraude, errores).

Técnicas:

Clustering: Agrupa órdenes por monto, proveedor y frecuencia (K-Means/DBSCAN).

Autoencoders: Detecta patrones inusuales en datos no estructurados (descripciones de productos).

Métrica clave:
\text{Anomaly Score} = \frac{|x_i - \mu_{\text{cluster}}|}{\sigma_{\text{cluster}}}

Caso de uso: Alertar si un usuario sin historial solicita 10x más unidades que el promedio de su departamento.


 Optimización Estocástica de Costos
Objetivo: Minimizar costos considerando incertidumbre.

Modelo:
\text{Minimizar } \mathbb{E}[C] = \sum_{i=1}^n (p_i q_i + h_i \cdot \max(0, q_i - d_i))

Donde:

p
i
p 
i
​
 : Precio unitario del proveedor 
i
i

q
i
q 
i
​
 : Cantidad a comprar

d
i
d 
i
​
 : Demanda aleatoria (distribución Poisson/Weibull)

h
i
h 
i
​
 : Costo de almacenamiento

Solución: Algoritmos genéticos o Q-Learning para explorar escenarios.

Segmentación de Proveedores con PCA + K-Means
Objetivo: Clasificar proveedores para estrategias de compra.

Variables:

Tiempo de entrega

Tasa de rechazo

Volatilidad de precios

Resiliencia (ej: número de alternativas)

Implementación:
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

# Reducción dimensional
pca = PCA(n_components=2)
reduced_data = pca.fit_transform(df_proveedores)

# Clustering
kmeans = KMeans(n_clusters=3)
df_proveedores['segmento'] = kmeans.fit_predict(reduced_data)


Resultado: Grupos como "Estratégicos", "Transaccionales" y "De Riesgo".


Análisis de Supervivencia para Contratos
Objetivo: Predecir cuándo un proveedor dejará de cumplir condiciones.

Modelo: Cox Proportional Hazards con variables:

Historial de incumplimientos

Cambios en condiciones de pago

Entorno macroeconómico

h(t|X) = h_0(t) \cdot \exp(\beta_1 X_1 + \beta_2 X_2)

h(t): Riesgo instantáneo de incumplimiento

X
i
X 
i
​
 : Factores de riesgo

 Simulación Montecarlo para Gestión de Inventario
 Objetivo: Calcular probabilidad de stockouts.

Pasos:

Modelar demanda como distribución probabilística (Normal, Poisson).

Simular 10,000 escenarios de consumo.

Calcular:
P(\text{Stockout}) = \frac{\text{N° simulaciones con demanda > inventario}}{10,000}

Herramientas: Python (NumPy, SciPy) o @RISK.


-Son solo algunas cosas que puedes añadir en cuanto a estadisticas pero necesito muchas estadisticas y analisis en mi proyecto
seria increible aprovechar la IA en el proyecto y la api de openrouter que tengo en el proyecto 

Necesito que tenga apariencia estetica y moderna 
Recuerda darme el codigo completo de cada archivo 