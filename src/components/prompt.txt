Te voy a explicar mi proyecto por completo para que puedas entenderlo y puedas ayudarme con lo que necesito 

primero que nada veras la estructura de mi proyecto 

[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir
Captura.jpg                  index.html    package.json       plantillas\ y\ esas\ cosas  prueba2.html  README.md  testConexion.js
Codigo\ aun\ mas\ viejo.rar  node_modules  package-lock.json  pnpm-lock.yaml              prueba.html   src        vite.config.js
[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir src
App.jsx  assets  components  Login.jsx  main.jsx  styles  supabaseClient.js  supabaseClientTest.js
[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir src/components
AdminDashboard.jsx      Home.jsx        Navbar.jsx        OrderCompletionForm.jsx  OrderPDF.jsx     RequestForm.jsx   Sidebar.jsx
ConsolidationModal.jsx  ModoOscuro.jsx  OrderActions.jsx  OrderForm.jsx            PDFTemplate.jsx  RequestTable.jsx
[fermin@fermin-systemproductname proyecto-inventario-ciec]$ dir src/styles
App.css  index.css



Ahora veras todo el codigo de los archivos importantes 

package.json
{
  "name": "proyecto-inventario-ciec",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "main": "/src/main.jsx",
  "homepage": "",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "preview": "vite preview",
    "update": "npm-check-updates -u",
    "deploy": "vite build && gh-pages -d dist",
    "test-conexion": "node testConexion.js"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.1",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "gh-pages": "^6.3.0",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.0",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-bootstrap-icons": "^1.11.5",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.3.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "npm-check-updates": "^17.1.15",
    "vite": "^6.2.0"
  }
}



.env 

VITE_SUPABASE_KEY = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBja2JkcGVydXBvdnhybml1YnJsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNDM1MTIsImV4cCI6MjA1NTcxOTUxMn0.p1qIe03QXpwmMKGeiobK-i5Sv_2ANYkSUQ-eUfydOis
VITE_SUPABASE_URL = https://pckbdperupovxrniubrl.supabase.co


supabaseClient.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY;

export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    storage: localStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  }
});

// Funciones helper para agrupación
export const agruparSolicitudes = async (solicitudId) => {
  // Obtener la solicitud actual
  const { data: currentSolicitud } = await supabase
    .from('solicitudcompra')
    .select('*, detalles:solicitudcompra_detalle(*)')
    .eq('id', solicitudId)
    .single();

  // Obtener posibles agrupaciones por producto o categoría
  const { data: agrupables } = await supabase
    .from('solicitudcompra')
    .select(`
      *,
      detalles:solicitudcompra_detalle(*),
      producto:producto(id, categoria_id)
    `)
    .or(`and(estado.eq.Pendiente,detalles.producto_id.in.(${currentSolicitud.detalles.map(d => d.producto_id).join(',')})),
          and(estado.eq.Pendiente,producto.categoria_id.in.(${currentSolicitud.detalles.map(d => d.producto?.categoria_id).join(',')}))`)
    .neq('id', solicitudId);

  return agrupables || [];
};

export const crearOrdenConsolidada = async (solicitudes, proveedorId, productosSeleccionados) => {
  // Crear la orden
  const { data: orden, error } = await supabase
    .from('ordencompra')
    .insert({
      proveedor_id: proveedorId,
      estado: 'Borrador',
      fecha_orden: new Date().toISOString()
    })
    .select('*')
    .single();

  // Insertar detalles de la orden
  const detalles = productosSeleccionados.map(p => ({
    orden_compra_id: orden.id,
    producto_id: p.producto_id,
    cantidad: p.cantidad,
    precio_unitario: 0
  }));

  await supabase.from('ordencompra_detalle').insert(detalles);

  // Vincular solicitudes con la orden
  const relaciones = solicitudes.map(s => ({
    orden_id: orden.id,
    solicitud_id: s.id
  }));
  
  await supabase.from('orden_solicitud').insert(relaciones);

  // Actualizar estado de las solicitudes
  await supabase
    .from('solicitudcompra')
    .update({ estado: 'En Proceso' })
    .in('id', solicitudes.map(s => s.id));

  return orden;
};

export const obtenerProductosPendientes = async () => {
  return await supabase
    .from('solicitudcompra_detalle')
    .select(`
      producto_id,
      cantidad,
      producto:producto_id(descripcion, categoria_id),
      solicitud:solicitud_compra_id(estado)
    `)
    .eq('solicitud.estado', 'Pendiente');
};


main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/index.css';
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap-icons/font/bootstrap-icons.css";

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

Login.jsx

import React, { useState } from 'react'; 
import { Button, Form, Modal } from 'react-bootstrap';
import { supabase } from './supabaseClient.js';

function Login({ onLogin }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [show, setShow] = useState(true);

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) throw error;

      const { data: profile } = await supabase
        .from('user_profile')
        .select('*')
        .eq('id', data.user.id)
        .single();

      if (profile) {
        onLogin(profile);
        setShow(false);
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={() => setShow(false)}>
      <Modal.Header closeButton>
        <Modal.Title>Iniciar Sesión</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form onSubmit={handleLogin}>
          <Form.Group controlId="formEmail">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              placeholder="Ingrese su email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </Form.Group>
          <Form.Group controlId="formPassword">
            <Form.Label>Contraseña</Form.Label>
            <Form.Control
              type="password"
              placeholder="Ingrese su contraseña"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </Form.Group>
          <Button variant="primary" type="submit" className="mt-3">
            Iniciar Sesión
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
}

export default Login;

App.jsx

import React, { useState, useEffect } from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { Container } from 'react-bootstrap';
import Sidebar from './components/Sidebar';
import CustomNavbar from './components/Navbar';
import RequestForm from './components/RequestForm';
import RequestTable from './components/RequestTable';
import AdminDashboard from './components/AdminDashboard';
import Home from './components/Home';
import Login from './Login';
import { supabase } from './supabaseClient';
import ModoOscuro from './components/ModoOscuro'; 

const checkStoredSession = () => {
  const storedUser = localStorage.getItem('userProfile');
  const storedTime = localStorage.getItem('sessionTime');
  
  if (storedUser && storedTime) {
    const timeElapsed = Date.now() - parseInt(storedTime);
    return timeElapsed < 900000 ? JSON.parse(storedUser) : null;
  }
  return null;
};

function AuthenticatedLayout({
  userProfile,
  showForm,
  setShowForm,
  requests,
  orders,
  isSidebarVisible,
  toggleSidebar,
  activeTab,
  setActiveTab,
  handleSubmitRequest,
  getFilteredRequests
}) {
  return (
    <>
    <CustomNavbar
      onToggleSidebar={toggleSidebar}
      userRole={userProfile.rol}
      userId={userProfile.id}
    />
    <Sidebar
      isVisible={isSidebarVisible}
      onNewRequest={() => setShowForm(true)}
      onSelectTab={setActiveTab}
      userProfile={userProfile}
      pendingRequests={getFilteredRequests(['Pendiente'])}
    />
    <div
      style={{
        marginLeft: isSidebarVisible ? '250px' : '0',
        marginTop: '56px',
        padding: '20px',
        transition: 'margin-left 0.3s',
        minHeight: 'calc(100vh - 56px)',
        backgroundColor: '#212529' // Modificado: Color oscuro
      }}
    >
      <Container fluid>
        <Routes>
          <Route path="/home" element={<Home />} />
          <Route
            path="/solicitudes"
            element={
              userProfile.rol === 'admin' ? (
                <AdminDashboard
                  activeTab={activeTab}
                  solicitudesPendientes={getFilteredRequests(['Pendiente'])}
                  solicitudesHistorial={getFilteredRequests(['Aprobada', 'Rechazada'])}
                  ordenesHistorial={orders}
                />
              ) : (
                <>
                  {activeTab === 'solicitudes' && (
                    <RequestTable requests={getFilteredRequests(['Pendiente'])} />
                  )}
                  {activeTab === 'historial' && (
                    <RequestTable
                      requests={getFilteredRequests(['Aprobada', 'Rechazada'])}
                    />
                  )}
                </>
              )
            }
          />
          <Route path="/" element={<Navigate to="/home" replace />} />
          <Route path="*" element={<Navigate to="/home" replace />} />
        </Routes>
      </Container>
    </div>
    {userProfile.rol === 'usuario' && (
      <RequestForm
        show={showForm}
        onHide={() => setShowForm(false)}
        onSubmit={handleSubmitRequest}
      />
    )}
  </>
);
}

function App() {
  const [showForm, setShowForm] = useState(false);
  const [requests, setRequests] = useState([]);
  const [orders, setOrders] = useState([]);
  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
  const [activeTab, setActiveTab] = useState('solicitudes');
  const [userProfile, setUserProfile] = useState(checkStoredSession());
  const [inactivityTimer, setInactivityTimer] = useState(null);

  // Nueva función para cargar solicitudes
  const fetchRequests = async () => {
    try {
      const baseQuery = supabase
        .from('solicitudcompra')
        .select(`
          *,
          detalles:solicitudcompra_detalle(producto_id, cantidad),
          empleado:empleado_id(nombre, apellido)
        `)
        .order('fecha_solicitud', { ascending: false });

      let queryResult;
      
      if (userProfile?.rol === 'admin') {
        queryResult = await baseQuery;
      } else {
        queryResult = await baseQuery.eq('empleado_id', userProfile?.empleado_id);
      }

      if (queryResult.error) throw queryResult.error;
      setRequests(queryResult.data || []);
    } catch (error) {
      console.error('Error cargando solicitudes:', error);
      alert('Error al cargar las solicitudes');
    }
  };

  // Cargar solicitudes al autenticarse
  useEffect(() => {
    if (userProfile) {
      fetchRequests();
    }
  }, [userProfile]);

  const resetInactivityTimer = () => {
    if (inactivityTimer) clearTimeout(inactivityTimer);
    
    const newTimer = setTimeout(() => {
      localStorage.removeItem('userProfile');
      localStorage.removeItem('sessionTime');
      setUserProfile(null);
    }, 300000);
    
    setInactivityTimer(newTimer);
  };

  const toggleSidebar = () => {
    setIsSidebarVisible((prev) => !prev);
  };

  useEffect(() => {
    if (userProfile) {
      const activityListeners = ['mousemove', 'keydown', 'click'];
      activityListeners.forEach(event => {
        window.addEventListener(event, resetInactivityTimer);
      });

      return () => {
        activityListeners.forEach(event => {
          window.removeEventListener(event, resetInactivityTimer);
        });
      };
    }
  }, [userProfile]);

  useEffect(() => {
    if (userProfile) {
      localStorage.setItem('userProfile', JSON.stringify(userProfile));
      localStorage.setItem('sessionTime', Date.now().toString());
      fetchRequests();
      fetchOrders(); // Llamada añadida
    }
  }, [userProfile]);

  const getFilteredRequests = (estados) => {
    return requests.filter(
      (request) =>
        estados.includes(request.estado) &&
        (userProfile?.rol === 'admin' || request.empleado_id === userProfile?.empleado_id)
    );
  };

  const handleSubmitRequest = async (requestData) => {
    try {
      const { data: solicitud, error } = await supabase
        .from('solicitudcompra')
        .insert([
          {
            descripcion: requestData.description || 'Solicitud múltiple',
            estado: 'Pendiente',
            empleado_id: userProfile.empleado_id,
            departamento_id: userProfile.departamento_id
          }
        ])
        .select('id');
      if (error) throw error;

      if (!requestData.customRequest && requestData.products) {
        const inserts = requestData.products.map((product) => ({
          solicitud_compra_id: solicitud[0].id,
          producto_id: product.productId,
          cantidad: product.quantity
        }));
        const { error: detalleError } = await supabase
          .from('solicitudcompra_detalle')
          .insert(inserts);
        if (detalleError) throw detalleError;
      }
      
      await fetchRequests();
      setShowForm(false);
    } catch (error) {
      alert('Error: ' + error.message);
    }
  };

  const fetchOrders = async () => {
    try {
      const { data, error } = await supabase
        .from('ordencompra')
        .select(`
          *,
          proveedor:proveedor_id(*),
          productos:ordencompra_detalle(
            *,
            producto:producto_id(*)
          ),
          empleado:empleado_id(*),
          solicitud_compra:solicitud_compra_id(*)
        `)
        .order('fecha_orden', { ascending: false });
  
      if (error) throw error;
      setOrders(data || []);
    } catch (error) {
      console.error('Error cargando órdenes:', error);
    }
  };  

  const isAuthenticated = !!userProfile;

  return (
    <BrowserRouter>
      <ModoOscuro /> 
      <Routes>
        <Route
          path="/login"
          element={
            !userProfile ? (
              <Login 
                onLogin={(profile) => {
                  setUserProfile(profile);
                  resetInactivityTimer();
                }}
              />
            ) : (
              <Navigate to="/home" replace />
            )
          }
        />
        <Route
          path="/*"
          element={
            isAuthenticated ? (
              <AuthenticatedLayout
                userProfile={userProfile}
                showForm={showForm}
                setShowForm={setShowForm}
                requests={requests}
                orders={orders}
                isSidebarVisible={isSidebarVisible}
                toggleSidebar={toggleSidebar}
                activeTab={activeTab}
                setActiveTab={setActiveTab}
                handleSubmitRequest={handleSubmitRequest}
                getFilteredRequests={getFilteredRequests}
              />
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route path="/" element={<Navigate to="/login" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;

App.css

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.table-responsive {
  overflow-x: auto;
}

.table-dark {
  background-color: #343a40;
  color: #fff;
  width: 100%;
}

.table-dark th,
.table-dark td {
  border-color: #454d55;
  padding: 12px;
  text-align: center;
}

.table-dark th {
  background-color: #454d55;
  font-size: 1.1rem;
}

.table-dark tbody tr:hover {
  background-color: rgba(255, 255, 255, 0.075);
}

.d-flex {
  display: flex;
}

.justify-content-center {
  justify-content: center;
}

.align-items-center {
  align-items: center;
}

.h-100 {
  height: 100%;
}

.w-100 {
  width: 100%;
}

index.css

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #212529 !important; /* Fondo oscuro permanente */
  color: #f8f9fa !important; /* Texto claro */
  transition: background-color 0.3s ease;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.card {
  margin-bottom: 20px;
  border: 1px solid #e3e6f0;
  border-radius: 0.35rem;
  background-color: #343a40 !important;
  color: #f8f9fa !important;
}

.card-header {
  padding: 0.75rem 1.25rem;
  margin-bottom: 0;
  border-bottom: 1px solid #e3e6f0;
  background-color: #2d3338 !important;
  border-bottom: 1px solid #495057 !important;
  color: #f8f9fa !important;
}
.table-dark {
  --bs-table-bg: #343a40;
  --bs-table-striped-bg: #2d3338;
  --bs-table-striped-color: #fff;
  --bs-table-active-bg: #373b3e;
  --bs-table-active-color: #fff;
  --bs-table-hover-bg: #323539;
  --bs-table-hover-color: #fff;
  color: #fff;
  border-color: #495057;
}

.card-body {
  padding: 1.25rem;
}

.table-responsive {
  overflow-x: auto;
}

.hidden {
  left: -250px !important; 
}

.visible {
  left: 0 !important; 
}
.badge {
  padding: 0.5em 0.75em;
  border-radius: 0.25rem;
  font-size: 0.875em;
}

.bg-warning {
  background-color: #ffc107 !important;
  color: #000;
}

.bg-success {
  background-color: #198754 !important;
}

.bg-danger {
  background-color: #dc3545 !important;
}

Sidebar.jsx

import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Button } from 'react-bootstrap';
const Sidebar = ({ isVisible, onNewRequest, onSelectTab, userProfile, pendingRequests = [] }) => {
  const location = useLocation();
  return (
    <aside
      className={`bg-primary text-white min-vh-100 p-4 ${isVisible ? 'visible' : 'hidden'}`}
      style={{
        width: '250px',
        position: 'fixed',
        top: '56px',
        left: isVisible ? '0' : '-250px',
        transition: 'left 0.3s',
        zIndex: 1000,
      }}
    >
      <h1 className="h4 mb-4">Cámara de Industriales</h1>
      <nav>
        <ul className="list-unstyled">
          <li className="mb-2">
            {/* Se reemplaza el botón por un Link para navegar a la ruta /solicitudes */}
            <Link
              to="/solicitudes"
              className="btn btn-link text-white w-100 text-start p-2 hover-bg-blue"
              style={{ whiteSpace: 'nowrap' }}
              onClick={() => onSelectTab('solicitudes')}
            >
              <i className="bi bi-list-task me-2"></i>
              <span style={{ display: 'inline-flex', alignItems: 'center' }}>
                Solicitudes
                <span
                  className="bg-danger d-flex justify-content-center align-items-center"
                  style={{
                    display: 'inline-flex',
                    width: '20px',
                    height: '20px',
                    borderRadius: '50%',
                    marginLeft: '8px',
                    fontSize: '12px',
                    color: 'white',
                    verticalAlign: 'middle',
                    marginTop: '-10%',
                  }}
                >
                  {pendingRequests.length}
                </span>
              </span>
            </Link>
          </li>
          <li className="mb-2">
            <Link
              to="/solicitudes"
              className="btn btn-link text-white w-100 text-start p-2 hover-bg-blue"
              onClick={() => onSelectTab('historial')}
            >
              <i className="bi bi-clock-history me-2"></i>
              Historial
            </Link>
          </li>
          {userProfile?.rol === 'admin' && (
            <li className="mb-2">
              <Link
                to="/solicitudes"
                className="btn btn-link text-white w-100 text-start p-2 hover-bg-blue"
                onClick={() => onSelectTab('ordenes')}
              >
                <i className="bi bi-file-earmark-text me-2"></i>
                Órdenes
              </Link>
            </li>
          )}
        </ul>
      </nav>
      {userProfile?.rol === 'usuario' && (
        <Button variant="light" className="w-100 mt-4" onClick={onNewRequest}>
          <i className="bi bi-plus-circle me-2"></i>
          Nueva Solicitud
        </Button>
      )}
    </aside>
  );
};
export default Sidebar;

RequestTable.jsx

import React from 'react';
import { Table, Button } from 'react-bootstrap';

const RequestTable = ({ requests, withActions, onApprove, onReject, showStatus = true }) => {
  const getStatusBadge = (estado) => {
    const variants = {
      Pendiente: 'warning',
      Aprobada: 'success',
      Rechazada: 'danger'
    };
    
    return (
      <span className={`badge bg-${variants[estado]}`}>
        {estado}
      </span>
    );
  };

  return (
    <div className="table-responsive">
    {/* Implementación: Variante dark y texto claro */}
    <Table striped hover className="align-middle" variant="dark">
      <thead className="table-dark">
        <tr>
          <th>ID</th>
          <th>Descripción</th>
          <th>Productos</th>
          {showStatus && <th>Estado</th>}
          {withActions && <th>Acciones</th>}
        </tr>
      </thead>
      <tbody>
          {requests?.map(request => (
            <tr key={request.id} className="text-light">
              <td>{request.id}</td>
              <td>{request.descripcion || 'N/A'}</td>
              <td>
                {request.detalles?.map((detalle, i) => (
                  <div key={i} className="mb-1 small">
                    {detalle.producto_id ? (
                      <>
                        <strong>Producto {i + 1}:</strong> ID {detalle.producto_id}
                        <span className="ms-2">(Cantidad: {detalle.cantidad})</span>
                      </>
                    ) : 'Producto no especificado'}
                  </div>
                )) || 'N/A'}
              </td>
              {showStatus && <td>{getStatusBadge(request.estado)}</td>}
              
              {withActions && (
                <td>
                  <Button 
                    variant="success" 
                    size="sm" 
                    className="me-2"
                    onClick={() => onApprove(request)}
                  >
                    Aprobar
                  </Button>
                  <Button 
                    variant="danger" 
                    size="sm"
                    onClick={() => onReject(request.id)}
                  >
                    Rechazar
                  </Button>
                </td>
              )}
            </tr>
          ))}
          {requests?.length === 0 && (
            <tr>
              <td colSpan={showStatus ? 5 : 4} className="text-center text-muted py-4">
                No hay registros para mostrar
              </td>
            </tr>
          )}
        </tbody>
      </Table>
    </div>
  );
};

export default RequestTable;

RequestForm.jsx

import React, { useState, useEffect } from 'react';
import { Modal, Form, Button } from 'react-bootstrap';
import { supabase } from '../supabaseClient.js';
import { v4 as uuidv4 } from 'uuid'; // Añadir esta importación

const RequestForm = ({ show, onHide, onSubmit }) => {
  const [products, setProducts] = useState([{ id: uuidv4(), productId: '', quantity: 1 }]);
  const [customRequest, setCustomRequest] = useState(false);
  const [description, setDescription] = useState('');
  const [fetchedProducts, setFetchedProducts] = useState([]); // Renombrado para evitar conflicto

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const { data, error } = await supabase.from('producto').select('*');
    if (!error) setFetchedProducts(data);
  };

  const handleAddProduct = () => {
    setProducts([...products, { id: uuidv4(), productId: '', quantity: 1 }]);
  };

  const handleRemoveProduct = (id) => {
    if (products.length > 1) {
      setProducts(products.filter(product => product.id !== id));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Validaciones
    if (customRequest && !description.trim()) {
      alert('Ingrese una descripción para la requisición especial');
      return;
    }
    
    if (!customRequest) {
      const hasEmptyFields = products.some(p => !p.productId || p.quantity < 1);
      if (hasEmptyFields) {
        alert('Complete todos los campos de productos');
        return;
      }
    }

    onSubmit({
      products: customRequest ? null : products,
      description: customRequest ? description : null
    });
    onHide();
  };

  return (
    <Modal show={show} onHide={onHide} centered contentClassName="bg-dark text-light">
    <Modal.Header closeButton className="bg-dark border-secondary">
      <Modal.Title className="text-light">Nueva Solicitud</Modal.Title>
    </Modal.Header>
    <Modal.Body className="bg-dark">
      <Form onSubmit={handleSubmit}>
          {!customRequest && products.map((product, index) => (
             <div key={product.id} className="mb-3 border border-secondary p-2 rounded">
              <Form.Group className="mb-3">
                <Form.Label>Producto:</Form.Label>
                <Form.Select
                  value={product.productId}
                  onChange={(e) => {
                    const newProducts = [...products];
                    newProducts[index].productId = e.target.value;
                    setProducts(newProducts);
                  }}
                >
                  <option value="">Seleccionar producto</option>
                  {fetchedProducts.map((prod) => (
                    <option key={prod.id} value={prod.id}>
                      {prod.descripcion}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>Cantidad:</Form.Label>
                <Form.Control
                  type="number"
                  value={product.quantity}
                  onChange={(e) => {
                    const newProducts = [...products];
                    newProducts[index].quantity = e.target.value;
                    setProducts(newProducts);
                  }}
                  min="1"
                />
              </Form.Group>
              {products.length > 1 && (
                <Button 
                  variant="danger" 
                  size="sm" 
                  onClick={() => handleRemoveProduct(product.id)}
                  className="mb-2"
                >
                  Eliminar producto
                </Button>
              )}
            </div>
          ))}

          <Button 
            variant="outline-primary" 
            onClick={handleAddProduct} 
            className="mb-3"
            disabled={customRequest}
          >
            Añadir otro producto
          </Button>

          <Form.Group className="mb-3">
            <Form.Check
              type="checkbox"
              label="Requisición especial"
              checked={customRequest}
              onChange={(e) => setCustomRequest(e.target.checked)}
            />
          </Form.Group>

          {customRequest && (
            <Form.Group className="mb-3">
              <Form.Label>Descripción:</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </Form.Group>
          )}

          <div className="d-flex justify-content-between">
            <Button variant="secondary" onClick={onHide}>
              Cancelar
            </Button>
            <Button variant="primary" type="submit">
              Enviar
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default RequestForm;

PDFTemplate.jsx

import React from 'react';
import { format } from 'date-fns';

const PDFTemplate = ({ orden, camara }) => {
  // Función de formato monetario
  const formatCurrency = (value, unidad) => {
    return new Intl.NumberFormat('es-VE', {
      style: 'currency',
      currency: unidad === 'USD' ? 'USD' : 'VES',
      minimumFractionDigits: 2
    }).format(value || 0);
  };

  // Estilos base para compatibilidad con html2canvas
  const baseStyles = {
    page: {
      width: '210mm',
      minHeight: '297mm',
      padding: '20px',
      fontFamily: 'Arial, sans-serif',
      fontSize: '14px',
      color: '#000000',
      backgroundColor: '#FFFFFF'
    },
    header: {
      textAlign: 'center',
      marginBottom: '20px',
      borderBottom: '2px solid #000'
    },
    table: {
      width: '100%',
      borderCollapse: 'collapse',
      margin: '10px 0',
      backgroundColor: '#FFFFFF'
    },
    th: {
      backgroundColor: '#f8f9fa',
      border: '1px solid #000',
      padding: '8px',
      textAlign: 'left'
    },
    td: {
      border: '1px solid #000',
      padding: '8px',
      backgroundColor: '#FFFFFF'
    }
  };

  return (
    <div style={baseStyles.page}>
      {/* Cabecera Institucional */}
      <div style={baseStyles.header}>
        <h2 style={{ fontSize: '24px', margin: '5px 0', color: '#000' }}>
          {camara.nombre}
        </h2>
        <h3 style={{ fontSize: '18px', margin: '5px 0', color: '#000' }}>
          Orden de Compra N°: {orden.id}
        </h3>
        <p style={{ margin: '3px 0', color: '#000' }}>
          {format(new Date(orden.fecha_orden), 'dd/MM/yyyy')}
        </p>
      </div>

      {/* Información de Contacto */}
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <p style={{ color: '#000' }}>{camara.direccion}</p>
        <p style={{ color: '#000' }}>
          Teléfonos: {camara.telefonos} | RIF: {camara.rif}
        </p>
        <p style={{ color: '#000' }}>
          Web: {camara.web} | Email: {camara.correo}
        </p>
      </div>

      {/* Tabla de Proveedor */}
      <table style={baseStyles.table}>
        <tbody>
          <tr>
            <td style={{ ...baseStyles.td, fontWeight: 'bold', width: '15%' }}>Proveedor:</td>
            <td style={{ ...baseStyles.td, width: '35%' }}>{orden.proveedor?.nombre || 'N/A'}</td>
            <td style={{ ...baseStyles.td, fontWeight: 'bold', width: '15%' }}>RIF:</td>
            <td style={{ ...baseStyles.td, width: '35%' }}>{orden.proveedor?.rif || 'N/A'}</td>
          </tr>
          <tr>
            <td style={{ ...baseStyles.td, fontWeight: 'bold' }}>Dirección:</td>
            <td colSpan="3" style={baseStyles.td}>{orden.proveedor?.direccion || 'N/A'}</td>
          </tr>
        </tbody>
      </table>

      {/* Instrucciones */}
      <div style={{ margin: '20px 0', padding: '10px', border: '1px solid #000' }}>
        <p style={{ fontWeight: 'bold', color: '#000' }}>
          ESTIMADO PROVEEDOR, DE ACUERDO A SU COTIZACIÓN ENVIADA POR WS, FAVOR SUMINISTRAR LO ABAJO INDICADO
        </p>
      </div>

      {/* Tabla de Productos */}
      <table style={baseStyles.table}>
        <thead>
          <tr>
            <th style={baseStyles.th}>REF</th>
            <th style={baseStyles.th}>CANTIDAD</th>
            <th style={baseStyles.th}>DESCRIPCIÓN</th>
            <th style={baseStyles.th}>PRECIO UNITARIO</th>
            <th style={baseStyles.th}>TOTAL</th>
          </tr>
        </thead>
        <tbody>
          {orden.productos?.map((item, index) => (
            <tr key={index}>
              <td style={baseStyles.td}>{item.producto_id}</td>
              <td style={{ ...baseStyles.td, textAlign: 'center' }}>{item.cantidad}</td>
              <td style={baseStyles.td}>{item.producto?.descripcion || 'N/A'}</td>
              <td style={{ ...baseStyles.td, textAlign: 'right' }}>
                {formatCurrency(item.precio_unitario, orden.unidad)}
              </td>
              <td style={{ ...baseStyles.td, textAlign: 'right' }}>
                {formatCurrency(item.cantidad * item.precio_unitario, orden.unidad)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Totales */}
      <div style={{ marginTop: '20px', textAlign: 'right' }}>
        <p style={{ color: '#000' }}>
          <strong>Subtotal:</strong> {formatCurrency(orden.sub_total, orden.unidad)}
        </p>
        <p style={{ color: '#000' }}>
          <strong>IVA (16%):</strong> {formatCurrency(orden.iva, orden.unidad)}
        </p>
        <p style={{ color: '#000' }}>
          <strong>Ret. IVA (75%):</strong> {formatCurrency(orden.ret_iva, orden.unidad)}
        </p>
        <p style={{ color: '#000', fontSize: '16px', fontWeight: 'bold' }}>
          Neto a pagar: {formatCurrency(orden.neto_a_pagar, orden.unidad)}
        </p>
      </div>

      {/* Firmas */}
      <div style={{ 
        display: 'flex',
        justifyContent: 'space-between',
        marginTop: '50px',
        paddingTop: '20px',
        borderTop: '1px solid #000'
      }}>
        <div style={{ width: '45%', textAlign: 'center' }}>
          <div style={{ borderBottom: '1px solid #000', height: '50px', marginBottom: '10px' }}></div>
          <p style={{ color: '#000', fontWeight: 'bold' }}>{orden.empleado?.nombre} {orden.empleado?.apellido}</p>
          <p style={{ color: '#000' }}>Departamento de Compras</p>
        </div>
        
        <div style={{ width: '45%', textAlign: 'center' }}>
          <div style={{ borderBottom: '1px solid #000', height: '50px', marginBottom: '10px' }}></div>
          <p style={{ color: '#000', fontWeight: 'bold' }}>Coordinación Financiera</p>
          <p style={{ color: '#000' }}>Aprobado por</p>
        </div>
      </div>
    </div>
  );
};

export default PDFTemplate;

OrderPDF.jsx

import React, { useRef, useState } from 'react';
import { Button } from 'react-bootstrap';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { supabase } from '../supabaseClient';
import PDFTemplate from './PDFTemplate';

const OrderPDF = ({ order }) => {
  const contentRef = useRef(null);
  const [loading, setLoading] = useState(false);
  const [pdfData, setPdfData] = useState(null);

  const handleGeneratePDF = async () => {
    setLoading(true);
    try {
      // 1. Cargar datos necesarios
      const [
        { data: camara }, 
        { data: ordenCompleta }
      ] = await Promise.all([
        supabase.from('camaraindustriales').select('*').single(),
        supabase.from('ordencompra')
          .select(`
            *,
            proveedor:proveedor_id(*),
            productos:ordencompra_detalle(
              *,
              producto:producto_id(*)
            ),
            empleado:empleado_id(*)
          `)
          .eq('id', order.id)
          .single()
      ]);

      // 2. Validar datos críticos
      if (!ordenCompleta || !camara) {
        throw new Error(`
          Datos faltantes:
          ${!ordenCompleta ? '- Orden no encontrada\n' : ''}
          ${!camara ? '- Datos de la cámara no configurados' : ''}
        `);
      }

      // 3. Actualizar estado con nuevos datos
      setPdfData({ orden: ordenCompleta, camara });

      // 4. Esperar ciclo de renderizado completo
      await new Promise(resolve => setTimeout(resolve, 100));

      // 5. Configurar elemento temporal visible
      const originalStyle = contentRef.current.style.cssText;
      contentRef.current.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
        visibility: visible;
      `;

      // 6. Generar PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const canvas = await html2canvas(contentRef.current, {
        scale: 2,
        useCORS: true,
        logging: true,
        backgroundColor: '#FFFFFF'
      });

      // 7. Restaurar estilos originales
      contentRef.current.style.cssText = originalStyle;

      // 8. Validar canvas
      if (canvas.width === 0 || canvas.height === 0) {
        throw new Error('El canvas generado no tiene dimensiones válidas');
      }

      // 9. Guardar PDF
      const imgProps = pdf.getImageProperties(canvas);
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
      
      pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);
      pdf.save(`orden_${order.id}.pdf`);

    } catch (error) {
      console.error("Error generando PDF:", error);
      alert(`Error al generar PDF: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Button 
        variant="primary" 
        onClick={handleGeneratePDF}
        size="sm"
        disabled={loading}
      >
        {loading ? 'Generando...' : 'Generar PDF'}
      </Button>

      {/* Contenedor PDF - Siempre presente en el DOM */}
      <div ref={contentRef} style={{
        width: '210mm',
        minHeight: '297mm',
        visibility: 'hidden',
        position: 'absolute',
        left: '-9999px',
        backgroundColor: 'white'
      }}>
        {pdfData && <PDFTemplate orden={pdfData.orden} camara={pdfData.camara} />}
      </div>
    </>
  );
};

export default OrderPDF;

OrderForm.jsx
import React, { useState, useEffect } from 'react';
import { Modal, Form, Button, Table } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const OrderForm = ({ show, onHide, ordenConsolidada, onSuccess }) => {
  const [proveedor, setProveedor] = useState(null);
  const [productos, setProductos] = useState([]);
  const [formData, setFormData] = useState({
    unidad: 'Bs',
    observaciones: ''
  });

  useEffect(() => {
    const cargarDatos = async () => {
      if (!ordenConsolidada) return;
      
      const { data } = await supabase
        .from('proveedor')
        .select('*')
        .eq('id', ordenConsolidada.proveedor_id)
        .single();

      setProveedor(data);
      setProductos(ordenConsolidada.productos);
    };

    cargarDatos();
  }, [ordenConsolidada]);

  const calcularTotales = () => {
    return productos.reduce((acc, p) => {
      const subtotal = p.cantidad * (p.precio_unitario || 0);
      const iva = subtotal * 0.16;
      return {
        subtotal: acc.subtotal + subtotal,
        iva: acc.iva + iva,
        ret_iva: acc.ret_iva + (iva * 0.75)
      };
    }, { subtotal: 0, iva: 0, ret_iva: 0 });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const totales = calcularTotales();

    try {
      // Crear orden principal
      const { data: orden, error } = await supabase
        .from('ordencompra')
        .insert([{
          proveedor_id: ordenConsolidada.proveedor_id,
          sub_total: totales.subtotal,
          iva: totales.iva,
          ret_iva: totales.ret_iva,
          neto_a_pagar: totales.subtotal + totales.iva - totales.ret_iva,
          unidad: formData.unidad,
          observaciones: formData.observaciones,
          estado: 'Borrador'
        }])
        .select('id')
        .single();

      // Crear detalles de la orden
      await supabase
        .from('ordencompra_detalle')
        .insert(productos.map(p => ({
          orden_compra_id: orden.id,
          producto_id: p.producto_id,
          cantidad: p.cantidad,
          precio_unitario: p.precio_unitario || 0
        })));

      // Vincular solicitudes
      await supabase
        .from('orden_solicitud')
        .insert(ordenConsolidada.solicitudes_ids.map(solicitudId => ({
          orden_id: orden.id,
          solicitud_id: solicitudId
        })));

      // Actualizar estado de las solicitudes
      await supabase
        .from('solicitudcompra')
        .update({ estado: 'En Proceso' })
        .in('id', ordenConsolidada.solicitudes_ids);

      onSuccess();
      onHide();
    } catch (error) {
      alert('Error al crear orden: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Orden Consolidada</Modal.Title>
      </Modal.Header>
      
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <div className="mb-4">
            <h4>Proveedor: {proveedor?.nombre}</h4>
            <p>RIF: {proveedor?.rif} | Teléfono: {proveedor?.telefono}</p>
          </div>

          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              {productos.map((p, i) => (
                <tr key={i}>
                  <td>{p.producto?.descripcion}</td>
                  <td>{p.cantidad}</td>
                  <td>
                    <Form.Control
                      type="number"
                      step="0.01"
                      value={p.precio_unitario || 0}
                      onChange={(e) => {
                        const nuevosProductos = [...productos];
                        nuevosProductos[i].precio_unitario = parseFloat(e.target.value);
                        setProductos(nuevosProductos);
                      }}
                      required
                    />
                  </td>
                  <td>{(p.cantidad * (p.precio_unitario || 0)).toFixed(2)}</td>
                </tr>
              ))}
            </tbody>
          </Table>

          <div className="mt-4 p-3 bg-secondary rounded">
            <h5>Totales ({formData.unidad})</h5>
            <div className="d-flex justify-content-between">
              <span>Subtotal:</span>
              <span>{calcularTotales().subtotal.toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>IVA (16%):</span>
              <span>{calcularTotales().iva.toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>Retención IVA:</span>
              <span>{calcularTotales().ret_iva.toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between fw-bold">
              <span>Neto a Pagar:</span>
              <span>
                {(calcularTotales().subtotal + 
                  calcularTotales().iva - 
                  calcularTotales().ret_iva).toFixed(2)}
              </span>
            </div>
          </div>

          <div className="mt-4">
            <Button variant="primary" type="submit" className="me-2">
              Guardar Orden
            </Button>
            <Button variant="secondary" onClick={onHide}>
              Cancelar
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default OrderForm;

OrderCompletionForm.jsx

import React, { useState } from 'react';
import { Modal, Form, Button, Table } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const OrderCompletionForm = ({ show, onHide, order }) => {
  const [productosRecibidos, setProductosRecibidos] = useState({});
  const [factura, setFactura] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Registrar productos faltantes
    const faltantes = order.productos
      .filter(p => productosRecibidos[p.producto_id] < p.cantidad)
      .map(p => ({
        orden_compra_id: order.id,
        producto_id: p.producto_id,
        cantidad_faltante: p.cantidad - (productosRecibidos[p.producto_id] || 0),
        motivo: 'No entregado'
      }));
    
    if (faltantes.length > 0) {
      await supabase.from('productos_no_recibidos').insert(faltantes);
    }

    // Subir factura si existe
    let facturaUrl = null;
    if (factura) {
      const { data, error } = await supabase.storage
        .from('facturas')
        .upload(`orden_${order.id}/${factura.name}`, factura);
      
      if (data) facturaUrl = data.path;
    }

    // Actualizar estado de la orden
    await supabase
      .from('ordencompra')
      .update({ 
        estado: 'Completada',
        documento_factura: facturaUrl 
      })
      .eq('id', order.id);

    onHide();
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Completar Orden #{order.id}</Modal.Title>
      </Modal.Header>
      
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Producto</th>
                <th>Cantidad Solicitada</th>
                <th>Cantidad Recibida</th>
              </tr>
            </thead>
            <tbody>
              {order.productos.map((p, i) => (
                <tr key={i}>
                  <td>{p.producto.descripcion}</td>
                  <td>{p.cantidad}</td>
                  <td>
                    <Form.Control
                      type="number"
                      min="0"
                      max={p.cantidad}
                      value={productosRecibidos[p.producto_id] || 0}
                      onChange={(e) => setProductosRecibidos(prev => ({
                        ...prev,
                        [p.producto_id]: parseInt(e.target.value)
                      }))}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>

          <Form.Group className="mt-3">
            <Form.Label>Documento de Factura</Form.Label>
            <Form.Control
              type="file"
              accept=".pdf,.jpg,.png"
              onChange={(e) => setFactura(e.target.files[0])}
            />
          </Form.Group>

          <div className="mt-4 d-flex justify-content-end">
            <Button variant="primary" type="submit">
              Finalizar Recepción
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default OrderCompletionForm;

OrderActions.jsx

import React from 'react';
import { Button } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const OrderActions = ({ order, onUpdate }) => {
  const handleStatusChange = async (newStatus) => {
    const { error } = await supabase
      .from('ordencompra')
      .update({ estado: newStatus })
      .eq('id', order.id);

    if (!error) onUpdate();
  };

  return (
    <div className="d-flex gap-2">
      {order.estado === 'Pendiente' && (
        <>
          <Button 
            variant="success" 
            size="sm"
            onClick={() => handleStatusChange('Completada')}
          >
            Marcar como Completada
          </Button>
          <Button 
            variant="danger" 
            size="sm"
            onClick={() => handleStatusChange('Anulada')}
          >
            Anular Orden
          </Button>
        </>
      )}
      
      {order.estado === 'Completada' && (
        <Button 
          variant="secondary" 
          size="sm"
          onClick={() => handleStatusChange('Anulada')}
        >
          Revertir a Anulada
        </Button>
      )}
    </div>
  );
};

export default OrderActions;

Navbar.jsx

import React, { useState, useRef, useEffect } from 'react';
import { Navbar, Nav, Container, Button, Overlay, Popover } from 'react-bootstrap';
import { Bell, PersonCircle, Cart, List } from 'react-bootstrap-icons';
import { NavLink } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import { useNavigate } from 'react-router-dom';
const CustomNavbar = ({ onToggleSidebar, userRole, userId }) => {
  const navigate = useNavigate();
  const [showNotifications, setShowNotifications] = useState(false);
  const notificationRef = useRef(null);
  const [notifications, setNotifications] = useState([]);
  const [showProfileMenu, setShowProfileMenu] = useState(false);
  const profileRef = useRef(null);
  const handleNotificationClick = () => {
    setShowNotifications(!showNotifications);
  };
  const handleProfileClick = () => {
    setShowProfileMenu(!showProfileMenu);
  };
  const handleLogout = async () => {
    await supabase.auth.signOut();
    localStorage.removeItem('userProfile');
    localStorage.removeItem('sessionTime');
    navigate('/login');
  };
  useEffect(() => {
    if (userRole !== 'admin') {
      const fetchUserNotifications = async () => {
        const { data, error } = await supabase
          .from('notificaciones')
          .select('*')
          .eq('user_id', userId)
          .order('created_at', { ascending: false });
        if (!error && data) {
          setNotifications(data);
        }
      };
      fetchUserNotifications();
    } else {
      setNotifications([
        {
          id: 1,
          title: 'Nueva solicitud de compra',
          description: 'Departamento de IT requiere materiales',
          date: '2024-01-20'
        },
        {
          id: 2,
          title: 'Solicitud pendiente',
          description: 'Orden #123 requiere aprobación',
          date: '2024-01-19'
        }
      ]);
    }
  }, [userRole, userId]);
  return (
    <Navbar bg="dark" variant="dark" expand="lg" className="shadow-sm fixed-top">
      <Container fluid>
        <Button variant="dark" onClick={onToggleSidebar} className="me-2">
          <List size={20} />
        </Button>
        <Navbar.Brand href="#" className="ms-2">
          Cámara de Industriales
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="navbarSupportedContent" />
        <Navbar.Collapse id="navbarSupportedContent">
          {/* Uso de NavLink para navegación interna */}
          <Nav className="me-auto mb-2 mb-lg-0">
            <Nav.Link as={NavLink} to="/" end>
              Home
            </Nav.Link>
            <Nav.Link as={NavLink} to="/solicitudes">
              Solicitudes
            </Nav.Link>
          </Nav>
          <Nav className="d-flex align-items-center">
            <Nav.Link href="#" className="me-3">
              <Cart size={20} />
            </Nav.Link>
            <Nav.Link
              href="#"
              className="me-3 position-relative"
              onClick={handleNotificationClick}
              ref={notificationRef}
            >
              <Bell size={20} />
              <span
                className="badge bg-danger rounded-pill position-absolute"
                style={{ top: '-5px', right: '-5px' }}
              >
                {notifications.length}
              </span>
            </Nav.Link>
            <Overlay
              show={showNotifications}
              target={notificationRef.current}
              placement="bottom"
              container={document.body}
              rootClose
              onHide={() => setShowNotifications(false)}
            >
              <Popover id="notifications-popover">
                <Popover.Header as="h3">Notificaciones</Popover.Header>
                <Popover.Body>
                  {notifications.length > 0 ? (
                    notifications.map((notification) => (
                      <div key={notification.id} className="notification-item border-bottom p-2">
                        <h6 className="mb-1">{notification.title}</h6>
                        <p className="mb-1 text-muted small">{notification.description}</p>
                        <small className="text-muted">
                          {new Date(notification.created_at || notification.date).toLocaleDateString()}
                        </small>
                      </div>
                    ))
                  ) : (
                    <p className="m-0">No hay notificaciones</p>
                  )}
                </Popover.Body>
              </Popover>
            </Overlay>
            <Nav.Link
              href="#"
              className="position-relative"
              onClick={handleProfileClick}
              ref={profileRef}
            >
              <PersonCircle size={20} />
            </Nav.Link>
            <Overlay
              show={showProfileMenu}
              target={profileRef.current}
              placement="bottom"
              container={document.body}
              rootClose
              onHide={() => setShowProfileMenu(false)}
            >
              <Popover id="profile-popover">
                <Popover.Body>
                  <Button variant="outline-danger" onClick={handleLogout} size="sm">
                    Cerrar sesión
                  </Button>
                </Popover.Body>
              </Popover>
            </Overlay>
          </Nav>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
};
export default CustomNavbar;

ModoOscuro.jsx

import React, { useEffect, useState } from 'react';

const ModoOscuro = () => {
    const [modo, setModo] = useState("dark");

    useEffect(() => {
        const htmlElement = document.documentElement;
        htmlElement.setAttribute("data-bs-theme", modo);
        
        // Aplicar el fondo según el tema
        document.body.style.backgroundColor = modo === "dark" 
            ? "#212529" 
            : "#f8f9fa";
            
    }, [modo]); 

    return (
        <div className="btn-group" role="group">
            <button 
                className='btn btn-primary'
                onClick={() => setModo("dark")}
                title="Modo oscuro"
            >
                <i className="bi bi-moon-fill"></i>
            </button>
            <button 
                className='btn btn-primary'
                onClick={() => setModo("light")}
                title="Modo claro"
            >
                <i className="bi bi-sun-fill"></i>
            </button>
        </div>
    );
};

export default ModoOscuro;

Home.jsx

import React, { useState, useEffect } from 'react';
import { Container, Table } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const Home = () => {
  const [inventory, setInventory] = useState([]);

  useEffect(() => {
    const fetchInventory = async () => {
      const { data, error } = await supabase
        .from('inventario')
        .select('*, producto:producto_id (descripcion)')
        .order('fecha_actualizacion', { ascending: false });
      
      if (!error) {
        setInventory(data);
      } else {
        console.error('Error al cargar el inventario:', error);
      }
    };
    fetchInventory();
  }, []);

  return (
    // Implementación: Cambiado text-black a text-light
    <Container fluid className="mt-3">
      <h3 className="text-light">📝Inventario</h3>
      {/* Implementación: Añadida variante dark */}
      <Table striped bordered hover responsive variant="dark">
        <thead>
          <tr>
            <th>Nombre del Producto</th>
            <th>Ubicación</th>
            <th>Fecha de Actualización</th>
          </tr>
        </thead>
        <tbody>
          {inventory.length > 0 ? (
            inventory.map((item) => (
              <tr key={item.id}>
                <td>{item.producto ? item.producto.descripcion : 'Sin nombre'}</td>
                <td>{item.ubicacion}</td>
                <td>{new Date(item.fecha_actualizacion).toLocaleDateString()}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="3" className="text-center text-light">
                No hay registros en el inventario
              </td>
            </tr>
          )}
        </tbody>
      </Table>
    </Container>
  );
};

export default Home;

ConsolidationModal.jsx

import React, { useState, useEffect } from 'react';
import { Modal, Form, Button, Table, Row, Col, InputGroup, Alert } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const ConsolidationModal = ({ show, onHide, solicitud, onConsolidate }) => {
  const [todasSolicitudes, setTodasSolicitudes] = useState([]);
  const [proveedores, setProveedores] = useState([]);
  const [selectedSolicitudes, setSelectedSolicitudes] = useState(new Set());
  const [selectedProductos, setSelectedProductos] = useState(new Map());
  const [proveedorId, setProveedorId] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    const cargarDatos = async () => {
      try {
        const { data: solicitudesData, error: errSolicitudes } = await supabase
          .from('solicitudcompra')
          .select(`
            id,
            detalles:solicitudcompra_detalle(
              producto_id,
              cantidad,
              producto:producto_id(
                id,
                descripcion,
                categoria_id
              )
            )
          `)
          .eq('estado', 'Pendiente');

        const { data: proveedoresData, error: errProveedores } = await supabase
          .from('proveedor')
          .select(`
            id,
            nombre,
            categorias:proveedor_categoria(
              categoria:categoria_id(nombre)
          `);

        if (errSolicitudes || errProveedores) throw new Error('Error cargando datos');

        setTodasSolicitudes(solicitudesData || []);
        setProveedores(proveedoresData || []);
      } catch (err) {
        setError(err.message);
      }
    };

    if (show) cargarDatos();
  }, [show]);

  const productosConsolidados = Array.from(selectedSolicitudes)
    .flatMap(solicitudId => {
      const solicitud = todasSolicitudes.find(s => s.id === solicitudId);
      return solicitud?.detalles || [];
    })
    .reduce((acc, detalle) => {
      const existente = acc.find(p => p.producto.id === detalle.producto.id);
      if (existente) {
        existente.cantidad += detalle.cantidad;
      } else {
        acc.push({
          producto: detalle.producto,
          cantidad: detalle.cantidad,
          cantidadOrdenar: detalle.cantidad
        });
      }
      return acc;
    }, []);

  const handleCrearOrden = async () => {
    try {
      const productosOrden = productosConsolidados.map(p => ({
        producto_id: p.producto.id,
        cantidad: selectedProductos.get(p.producto.id) || p.cantidad
      }));

      const ordenData = {
        proveedor_id: proveedorId,
        productos: productosOrden,
        solicitudes_ids: Array.from(selectedSolicitudes)
      };

      onConsolidate(ordenData);
      onHide();
    } catch (err) {
      setError('Error al crear orden: ' + err.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Consolidar Solicitudes</Modal.Title>
      </Modal.Header>

      <Modal.Body className="bg-dark text-light" style={{ minHeight: '60vh' }}>
        {error && <Alert variant="danger">{error}</Alert>}
        
        <Row>
          <Col md={8}>
            <h5>Seleccionar Solicitudes</h5>
            <Table striped bordered hover variant="dark">
              <thead>
                <tr>
                  <th></th>
                  <th>ID</th>
                  <th>Productos</th>
                </tr>
              </thead>
              <tbody>
                {todasSolicitudes.map(solicitud => (
                  <tr key={solicitud.id}>
                    <td>
                      <Form.Check
                        checked={selectedSolicitudes.has(solicitud.id)}
                        onChange={() => {
                          const newSet = new Set(selectedSolicitudes);
                          newSet.has(solicitud.id) 
                            ? newSet.delete(solicitud.id) 
                            : newSet.add(solicitud.id);
                          setSelectedSolicitudes(newSet);
                        }}
                      />
                    </td>
                    <td>#{solicitud.id}</td>
                    <td>
                      {solicitud.detalles?.map((d, i) => (
                        <div key={i}>
                          {d.producto.descripcion} (x{d.cantidad})
                        </div>
                      ))}
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </Col>

          <Col md={4}>
            <h5>Productos Consolidados</h5>
            <Table striped bordered hover variant="dark">
              <thead>
                <tr>
                  <th>Producto</th>
                  <th>Total</th>
                  <th>A Ordenar</th>
                </tr>
              </thead>
              <tbody>
                {productosConsolidados.map((p, i) => (
                  <tr key={i}>
                    <td>{p.producto.descripcion}</td>
                    <td>{p.cantidad}</td>
                    <td>
                      <InputGroup>
                        <Form.Control
                          type="number"
                          min="0"
                          max={p.cantidad}
                          value={selectedProductos.get(p.producto.id) || p.cantidad}
                          onChange={(e) => {
                            const nuevaCantidad = Math.min(p.cantidad, Math.max(0, e.target.value));
                            setSelectedProductos(prev => new Map(prev.set(p.producto.id, nuevaCantidad)));
                          }}
                        />
                      </InputGroup>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>

            <h5 className="mt-4">Proveedor</h5>
            <Form.Select
              value={proveedorId}
              onChange={(e) => setProveedorId(e.target.value)}
              className="bg-secondary text-light"
            >
              <option value="">Seleccionar proveedor...</option>
              {proveedores.map(proveedor => (
                <option key={proveedor.id} value={proveedor.id}>
                  {proveedor.nombre} - 
                  {proveedor.categorias?.map(c => c.categoria.nombre).join(', ')}
                </option>
              ))}
            </Form.Select>

            <Button
              variant="success"
              className="mt-3 w-100"
              onClick={handleCrearOrden}
              disabled={!proveedorId || productosConsolidados.length === 0}
            >
              Generar Orden Consolidada
            </Button>
          </Col>
        </Row>
      </Modal.Body>
    </Modal>
  );
};

export default ConsolidationModal;

AdminDashboard.jsx

import React, { useState, useEffect } from 'react';
import { Tabs, Tab, Table, Button } from 'react-bootstrap';
import RequestTable from './RequestTable';
import ConsolidationModal from './ConsolidationModal';
import OrderForm from './OrderForm';
import OrderPDF from './OrderPDF';
import OrderActions from './OrderActions';
import { supabase } from '../supabaseClient';

const AdminDashboard = ({ activeTab, solicitudesPendientes }) => {
  const [showConsolidation, setShowConsolidation] = useState(false);
  const [showOrderForm, setShowOrderForm] = useState(false);
  const [ordenConsolidada, setOrdenConsolidada] = useState(null);
  const [ordenesConsolidadas, setOrdenesConsolidadas] = useState([]);

  useEffect(() => {
    const cargarOrdenes = async () => {
      const { data } = await supabase
        .from('ordencompra')
        .select(`
          *,
          proveedor:proveedor_id(*),
          detalles:ordencompra_detalle(*, producto:producto_id(*) ),
          solicitudes:orden_solicitud(solicitud:solicitud_compra_id(id))
        `)
        .order('fecha_orden', { ascending: false });

      setOrdenesConsolidadas(data || []);
    };
    cargarOrdenes();
  }, []);

  const handleConsolidate = (ordenData) => {
    setOrdenConsolidada(ordenData);
    setShowOrderForm(true);
  };

  return (
    <div className="p-4">
      <Tabs activeKey={activeTab} className="mb-3">
        <Tab eventKey="solicitudes" title="Solicitudes">
          <RequestTable
            requests={solicitudesPendientes}
            withActions={true}
            onApprove={(request) => {
              setShowConsolidation(true);
            }}
            onReject={async (id) => {
              await supabase
                .from('solicitudcompra')
                .update({ estado: 'Rechazada' })
                .eq('id', id);
            }}
          />
        </Tab>

        <Tab eventKey="ordenes" title="Órdenes Consolidadas">
          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>ID</th>
                <th>Proveedor</th>
                <th>Productos</th>
                <th>Estado</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              {ordenesConsolidadas.map(orden => (
                <tr key={orden.id}>
                  <td>{orden.id}</td>
                  <td>{orden.proveedor?.nombre}</td>
                  <td>
                    {orden.detalles?.map((d, i) => (
                      <div key={i}>
                        {d.producto.descripcion} (x{d.cantidad})
                      </div>
                    ))}
                  </td>
                  <td>
                    <span className={`badge bg-${orden.estado === 'Borrador' ? 'warning' : 'success'}`}>
                      {orden.estado}
                    </span>
                  </td>
                  <td>
                    <div className="d-flex gap-2">
                      <OrderPDF order={orden} />
                      <OrderActions 
                        order={orden}
                        onUpdate={() => window.location.reload()}
                      />
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Tab>
      </Tabs>

      <ConsolidationModal
        show={showConsolidation}
        onHide={() => setShowConsolidation(false)}
        onConsolidate={handleConsolidate}
      />

      {showOrderForm && (
        <OrderForm
          show={showOrderForm}
          onHide={() => setShowOrderForm(false)}
          ordenConsolidada={ordenConsolidada}
          onSuccess={() => {
            window.location.reload(); // Actualizar lista de órdenes
          }}
        />
      )}
    </div>
  );
};

export default AdminDashboard;


Base de datos en supabase: 

| table_name              | column_name          | data_type                   |
| ----------------------- | -------------------- | --------------------------- |
| camaraindustriales      | id                   | integer                     |
| camaraindustriales      | nombre               | character varying           |
| camaraindustriales      | direccion            | text                        |
| camaraindustriales      | web                  | character varying           |
| camaraindustriales      | correo               | character varying           |
| camaraindustriales      | telefonos            | character varying           |
| camaraindustriales      | rif                  | character varying           |
| cargo                   | id                   | integer                     |
| cargo                   | nombre               | character varying           |
| cargo                   | departamento_id      | integer                     |
| categoria_producto      | id                   | integer                     |
| categoria_producto      | nombre               | character varying           |
| categoria_proveedor     | id                   | integer                     |
| categoria_proveedor     | nombre               | character varying           |
| departamento            | id                   | integer                     |
| departamento            | nombre               | character varying           |
| empleado                | id                   | integer                     |
| empleado                | cedula               | character varying           |
| empleado                | nombre               | character varying           |
| empleado                | apellido             | character varying           |
| empleado                | cargo_actual_id      | integer                     |
| empleado                | firma                | text                        |
| empleado                | departamento_id      | integer                     |
| empleadocargohistorial  | id                   | integer                     |
| empleadocargohistorial  | empleado_id          | integer                     |
| empleadocargohistorial  | cargo_id             | integer                     |
| empleadocargohistorial  | fecha_inicio         | date                        |
| empleadocargohistorial  | fecha_fin            | date                        |
| facturas_orden          | id                   | integer                     |
| facturas_orden          | orden_compra_id      | integer                     |
| facturas_orden          | numero_factura       | character varying           |
| facturas_orden          | fecha_recepcion      | date                        |
| facturas_orden          | documento_factura    | text                        |
| facturas_orden          | total_recepcionado   | numeric                     |
| inventario              | id                   | integer                     |
| inventario              | producto_id          | integer                     |
| inventario              | ubicacion            | text                        |
| inventario              | fecha_actualizacion  | timestamp without time zone |
| inventario              | existencias          | integer                     |
| orden_solicitud         | orden_id             | integer                     |
| orden_solicitud         | solicitud_id         | integer                     |
| ordencompra             | id                   | integer                     |
| ordencompra             | solicitud_compra_id  | integer                     |
| ordencompra             | proveedor_id         | integer                     |
| ordencompra             | fecha_orden          | timestamp without time zone |
| ordencompra             | estado               | character varying           |
| ordencompra             | precio_unitario      | numeric                     |
| ordencompra             | sub_total            | numeric                     |
| ordencompra             | iva                  | numeric                     |
| ordencompra             | ret_iva              | numeric                     |
| ordencompra             | neto_a_pagar         | numeric                     |
| ordencompra             | unidad               | character varying           |
| ordencompra             | observaciones        | text                        |
| ordencompra             | empleado_id          | integer                     |
| ordencompra             | changed_by           | integer                     |
| ordencompra             | fecha_modificacion   | timestamp without time zone |
| ordencompra             | retencion_porcentaje | numeric                     |
| ordencompra_detalle     | id                   | integer                     |
| ordencompra_detalle     | orden_compra_id      | integer                     |
| ordencompra_detalle     | producto_id          | integer                     |
| ordencompra_detalle     | cantidad             | integer                     |
| ordencompra_detalle     | precio_unitario      | numeric                     |
| ordencompra_detalle     | monto_total          | numeric                     |
| ordenes_consolidadas    | id                   | integer                     |
| ordenes_consolidadas    | proveedor_id         | integer                     |
| ordenes_consolidadas    | productos            | jsonb                       |
| ordenes_consolidadas    | estado               | character varying           |
| ordenes_consolidadas    | fecha_creacion       | timestamp without time zone |
| ordenes_consolidadas    | solicitudes          | jsonb                       |
| producto                | id                   | integer                     |
| producto                | descripcion          | text                        |
| producto                | cantidad_disponible  | integer                     |
| producto                | categoria_id         | integer                     |
| productos_no_recibidos  | id                   | integer                     |
| productos_no_recibidos  | orden_compra_id      | integer                     |
| productos_no_recibidos  | producto_id          | integer                     |
| productos_no_recibidos  | cantidad_faltante    | integer                     |
| productos_no_recibidos  | motivo               | text                        |
| proveedor               | id                   | integer                     |
| proveedor               | nombre               | character varying           |
| proveedor               | direccion            | text                        |
| proveedor               | rif                  | character varying           |
| proveedor               | telefono             | character varying           |
| proveedor               | correo               | character varying           |
| proveedor               | pagina_web           | character varying           |
| proveedor_categoria     | proveedor_id         | integer                     |
| proveedor_categoria     | categoria_id         | integer                     |
| solicitudcompra         | id                   | integer                     |
| solicitudcompra         | descripcion          | text                        |
| solicitudcompra         | fecha_solicitud      | timestamp without time zone |
| solicitudcompra         | estado               | character varying           |
| solicitudcompra         | empleado_id          | integer                     |
| solicitudcompra         | departamento_id      | integer                     |
| solicitudcompra_detalle | id                   | integer                     |
| solicitudcompra_detalle | solicitud_compra_id  | integer                     |
| solicitudcompra_detalle | producto_id          | integer                     |
| solicitudcompra_detalle | cantidad             | integer                     |
| user_profile            | id                   | uuid                        |
| user_profile            | empleado_id          | integer                     |
| user_profile            | departamento_id      | integer                     |


El estado de las ordenes de compra se maneja asi 

estado::text = ANY (ARRAY['Pendiente'::character varying, 'Completada'::character varying, 'Anulada'::character varying]::text[])

Y en las solicitudes de compra asi 

estado::text = ANY (ARRAY['Pendiente'::character varying, 'Aprobada'::character varying, 'Rechazada'::character varying]::text[])



Como te habras dado cuenta, este proyecto maneja las solicitudes de compra de los usuarios y los administradores generan las ordenes de compra 


Como te daras cuenta mi proyecto consiste en realizar solicitudes de compra y ordenes de compra de parte de los usuarios administradores 



Este proyecto es realmente mi tesis, te dare el planteamiento del problema de mi tesis para que entiendas de que trata, el planteamiento del problema es el Cap I de la tesis 

Te dare todo el cap 1 (falta la parte de contexto del problema)

CAPITULO I
1. EL PROBLEMA
1.1 Contexto del problema




1.2 Planteamiento del problema
La Cámara de Industriales del Estado Carabobo (CIEC), una institución clave en el desarrollo industrial de la región, enfrenta en la actualidad una serie de desafíos operativos que afectan su eficiencia interna y la capacidad de respuesta ante las necesidades de los diferentes departamentos que la componen. Desde su creación, la CIEC ha desempeñado un rol esencial en la promoción de la industria regional y el fortalecimiento de los sectores productivos. Sin embargo, a medida que el entorno económico ha ido cambiando, la organización ha mostrado dificultades en adaptar sus procesos internos a las nuevas exigencias del mercado, especialmente en lo que respecta a la gestión de sus recursos y el manejo de las solicitudes de compra.

La principal dificultad radica en la ausencia de una plataforma tecnológica que permita gestionar de manera eficiente las solicitudes y órdenes de compra dentro de la organización. Actualmente, la CIEC no dispone de un sistema digital centralizado que pueda integrar todos los procesos de compra y gestión de inventario en un solo lugar. Las solicitudes de los diferentes departamentos se gestionan de manera desordenada y a menudo manual, lo que genera demoras, errores administrativos y falta de visibilidad sobre el estado de los pedidos. Este desorden organizativo y la falta de una herramienta adecuada para centralizar la información impactan negativamente en la eficiencia de la Cámara, dificultando la toma de decisiones y afectando la operatividad de la institución.

Los procesos de solicitud y compra de materiales o insumos se realizan en cada departamento de manera independiente, lo que genera una fragmentación en el manejo de la información. No existe un sistema que permita tener una visibilidad global de las solicitudes realizadas, ni un seguimiento adecuado de los pedidos. Esto produce confusión sobre el estado de las compras, lo que a su vez genera retrasos en los proyectos y actividades de la CIEC, afectando la competitividad y capacidad de respuesta de la organización frente a los retos económicos del entorno. Además, la falta de un control adecuado sobre las órdenes de compra aumenta el riesgo de duplicación de compras o la adquisición de productos innecesarios, lo que agrava aún más la situación.

A nivel operativo, los empleados encargados de gestionar las solicitudes y órdenes de compra se ven limitados por la falta de un sistema que les permita acceder a la información en tiempo real. Esto genera dificultades para coordinar los pedidos entre los departamentos y retrasa la aprobación de las compras, dado que las solicitudes deben pasar por varios niveles jerárquicos antes de ser aprobadas. Este proceso manual y lento no solo reduce la eficiencia, sino que también crea un ambiente de trabajo desorganizado y propenso a errores humanos. Los responsables de los departamentos, al no contar con un sistema centralizado, pierden tiempo valioso en la búsqueda de información o en la corrección de errores administrativos, lo que afecta la productividad general de la institución.

En términos de control de inventarios, la falta de una plataforma adecuada genera desajustes entre los productos solicitados y los disponibles. Los encargados de la gestión de inventarios no tienen acceso a un sistema en el que puedan verificar en tiempo real las existencias y las compras realizadas, lo que puede llevar a la escasez de materiales o a la sobrecompra de insumos. Además, la gestión de presupuestos se ve afectada, ya que no existe una forma eficiente de controlar el gasto en compras de manera centralizada, lo que aumenta los costos operativos y reduce la capacidad de la CIEC para planificar de manera estratégica sus adquisiciones.

Otro aspecto que contribuye a la ineficiencia es la falta de transparencia en el proceso de aprobación de las compras. Al no existir un sistema digital que registre cada paso del proceso de solicitud y aprobación, la gerencia carece de visibilidad sobre el estado de las solicitudes en curso. Esto dificulta la toma de decisiones, ya que no se dispone de información clara y actualizada sobre el flujo de las compras. La ausencia de un sistema centralizado también crea una brecha en la comunicación entre los departamentos y la alta gerencia, lo que dificulta la colaboración y el alineamiento de las decisiones estratégicas relacionadas con la adquisición de recursos.

Ante este panorama, es evidente que la CIEC necesita una solución tecnológica que optimice sus procesos internos, especialmente en lo relacionado con la gestión de las solicitudes y órdenes de compra. Un sistema web local, diseñado para centralizar la información y automatizar los procesos, permitiría a cada departamento registrar sus solicitudes de manera estandarizada, garantizando una mayor eficiencia y transparencia en la gestión. Además, la automatización del proceso de aprobación de las compras reduciría los tiempos de espera y los errores humanos, agilizando la respuesta de la organización ante las necesidades de cada área.

Este sistema también brindaría una visibilidad en tiempo real sobre el estado de las órdenes de compra, lo que permitiría un mejor control de los inventarios y la planificación de adquisiciones. Al centralizar los datos, la CIEC podría llevar un registro detallado de las compras realizadas, lo que facilitaría la gestión del presupuesto y la toma de decisiones estratégicas basadas en información precisa. Asimismo, la interactividad que permitiría este sistema entre los diferentes departamentos y la alta gerencia fortalecería la comunicación interna y optimizaría la coordinación entre las distintas áreas de la institución.

La ausencia de una plataforma tecnológica para la gestión de solicitudes y órdenes de compra en la CIEC está generando ineficiencias operativas, retrasos y falta de control sobre los recursos adquiridos. Esto afecta tanto a la operatividad de la organización como a la capacidad de respuesta frente a los desafíos del entorno económico. La implementación de un sistema web local que centralice los procesos de compra y permita una gestión más eficiente de los recursos es crucial para mejorar la eficiencia operativa, reducir los costos y fortalecer la competitividad de la CIEC en el entorno actual.
1.2 Objetivo general de la investigación
    • El objetivo general de esta investigación es desarrollar un sistema web local para la gestión de solicitudes y órdenes de compra en la Cámara de Industriales del Estado Carabobo, con el fin de optimizar los procesos administrativos y mejorar la eficiencia operativa de la organización.
      
1.3 Objetivos específicos de la investigación
    • Diseñar una plataforma web que permita a los departamentos de la Cámara de Industriales del Estado Carabobo registrar, gestionar y seguir las solicitudes de compra de manera centralizada, asegurando la trazabilidad y transparencia del proceso.
    • Desarrollar un sistema de gestión de inventarios que permita la visualización y control de los productos solicitados, almacenados y adquiridos, con el objetivo de facilitar la toma de decisiones y optimizar los recursos disponibles.
    • Implementar un módulo de aprobación automatizado para las solicitudes de compra, que permita agilizar el proceso de revisión y autorización por parte de los responsables de cada departamento.
    • Integrar un sistema de notificaciones y alertas que informe a los usuarios sobre el estado de las solicitudes y órdenes de compra, garantizando una comunicación fluida y eficiente entre los departamentos y la gerencia.
    • Optimizar la experiencia de usuario (UX) en la plataforma, diseñando una interfaz amigable y accesible que facilite la navegación y el manejo de los procesos administrativos, mejorando la usabilidad y eficiencia del sistema.
    • Evaluar el impacto del sistema en la eficiencia operativa de la Cámara de Industriales del Estado Carabobo mediante pruebas de usuario y encuestas a los empleados, con el fin de identificar áreas de mejora y asegurar que el sistema cumpla con las necesidades administrativas de la organización.
1.4 Justificación del estudio
La propuesta de desarrollar un sistema web local para la gestión de solicitudes y órdenes de compra en la Cámara de Industriales del Estado Carabobo (CIEC) está profundamente justificada desde varias perspectivas, tanto operativas como estratégicas. En primer lugar, la implementación de esta plataforma digital permitirá a los distintos departamentos de la CIEC gestionar de manera centralizada y eficiente las solicitudes de compra y los inventarios, optimizando significativamente el proceso administrativo. La automatización de este sistema reducirá la dependencia de métodos manuales y desorganizados, minimizando errores administrativos y retrasos en las adquisiciones, lo que garantizará una respuesta más ágil y precisa ante las necesidades de cada área de la Cámara.

Desde un punto de vista operativo, la plataforma web facilitará la visibilidad y trazabilidad de las solicitudes y órdenes de compra, lo que no solo mejorará la transparencia en el proceso, sino que también brindará una herramienta de control a los responsables de la gestión financiera. La posibilidad de realizar un seguimiento constante de las órdenes de compra permitirá a la gerencia tomar decisiones informadas y oportunas, mejorando la planificación financiera y el uso de los recursos disponibles. Además, la centralización de la información en un sistema web optimizará los tiempos de gestión, reduciendo el esfuerzo administrativo y permitiendo una mejor coordinación entre los departamentos involucrados.

Desde la perspectiva institucional, el proyecto tendrá un impacto significativo en la modernización de la CIEC. En un contexto de constante cambio y competencia en el ámbito industrial, la adopción de soluciones tecnológicas innovadoras es esencial para mantener una gestión eficiente y competitiva. El sistema web propuesto permitirá a la CIEC alinearse con las mejores prácticas tecnológicas, optimizando sus procesos internos y asegurando que la Cámara siga siendo un actor relevante en el sector industrial del estado Carabobo. Este tipo de proyectos contribuirá a la mejora de la competitividad organizacional, haciendo que la Cámara se destaque no solo por su labor gremial, sino también por su capacidad de adaptarse a las necesidades tecnológicas del sector.

A nivel más específico, el sistema también contribuirá a mejorar la comunicación interna entre los departamentos, ya que permitirá un flujo de información más rápido y directo. Las notificaciones automáticas y los informes detallados sobre el estado de las solicitudes y órdenes de compra mejorarán la coordinación y reducirán los posibles conflictos o malentendidos. Esto resultará en un ambiente de trabajo más eficiente, donde los departamentos podrán gestionar sus recursos de manera más estratégica, evitando la duplicación de esfuerzos y asegurando una distribución más equitativa de los recursos disponibles.

Además, este estudio también tiene un impacto importante en el desarrollo organizacional de la CIEC. La implementación del sistema web ayudará a crear una cultura de trabajo más digitalizada, permitiendo a los empleados de la Cámara desarrollar habilidades en el manejo de herramientas tecnológicas aplicadas a la gestión administrativa. Este aprendizaje no solo beneficiará a la CIEC en términos de productividad, sino que también fortalecerá las capacidades tecnológicas de su equipo de trabajo, alineándolos con las tendencias actuales del sector industrial.

El impacto de la implementación de este sistema web será notable tanto a corto como a largo plazo. A corto plazo, permitirá una mejora inmediata en la eficiencia de los procesos de gestión de compras e inventarios, lo que tendrá un efecto positivo en la operatividad diaria de la Cámara. A largo plazo, la plataforma contribuirá al consolidará su papel como líder en la promoción del desarrollo industrial, al incorporar las herramientas tecnológicas más avanzadas en sus operaciones.




desarrollo continuo de una infraestructura organizacional más robusta y preparada para enfrentar los desafíos del futuro, garantizando que la CIEC siga siendo un pilar fundamental para el desarrollo industrial de la región. En resumen, este proyecto no solo permitirá a la Cámara optimizar sus procesos internos, sino que también consolidará su papel como líder en la promoción del desarrollo industrial, al incorporar las herramientas tecnológicas más avanzadas en sus operaciones.


Eso es lo que llevo hasta ahora, espera mis instrucciones, te dare una tesis ya completa que debes tomar como inspiracion y guia de como debe realizarse mi tesis

SISTEMA DE MARCAJE PARA LAS ASISTENCIAS DEL PERSONAL AL CENTRO POLICLÍNICO VALENCIA C.A











Autores
Fermín, Leandro Tedesco, Giancarlo
Tutor académico
Profesor. Tellez, Arnoldo






Valencia, Mayo de 2022
DEDICATORIA

A mis padres Sergio Fermín y Luisa De Cicco A mi Hermanita Esthefany Fermín
A la memoria de mi abuelo Vincenzo De Cicco A aquellos profesores que dieron lo mejor de sí A todos mis amigos



Leandro Fermín
DEDICATORIA







Giancarlo Tedesco
AGRADECIMIENTO

A mis padres; Sergio Fermín y Luisa De Cicco por su incondicional apoyo, pues en todo momento estuvieron junto a mí (Leandro).
A mi hermanita Esthefany a quien tanto quiero y aprecio (Leandro).
A la memoria de mi abuelo Vincenzo, que aunque no se encuentre físicamente, estoy seguro que estaría orgulloso. (Leandro).
A mi amiga Laura, quien gracias a su apoyo en los momentos difíciles, me ayudó a ser quién soy ahora (Leandro).
A mi amigo Danny Endara, quien con su apoyo incondicional, valiosa y sincera amistad me ha motivado a seguir adelante (Leandro).
A mis amigas Victoria, Michelle, Nicole, Geovanna, Giulianna, Isabel, Mesli, quienes me han brindado su valiosa y sincera amistad. (Leandro).
A mis amigos Danny, Jhonatan, Carmelo, Giancarlo, Eduard, Alejandro, Santiago, Bimar, Fermín, Marcelo, quienes también me han brindado su valiosa y sincera amistad (Leandro).
A mis profesores Blasco, Robertis, Marián, Nieves, Karen, Rossana, muchas gracias por su apoyo y sus conocimientos brindados a lo largo del recorrido, aprecio mucho su esfuerzo y dedicación (Leandro)
ÍNDICE GENERAL
INTRODUCCIÓN	4
CAPÍTULO I	6
EL PROBLEMA	6
        1.1 Contexto del problema	6
Misión	6
Visión	7
        1.2 Planteamiento del Problema.	12
        1.3 Objetivos de la investigación	14
Objetivo General	14
Objetivos Específicos.	14
        1.4 Justificación de la investigación	14
CAPÍTULO II	16
MARCO TEÓRICO	16
        2.1 Antecedentes de la investigación.	16
        2.2 Marco referencial.	19
        2.3 Definición de Términos básicos.	30
CAPÍTULO III	33
METODOLOGÍA	33
        3.1 Justificación de la Metodología	33
        3.2 Justificación del Software	34
        3.3. Técnicas de Recolección de Datos	36
Entrevista no Estructurada.	36
Observación Directa.	36
Encuesta de respuesta cerrada.	37
        3.4. Análisis de Resultados	37
        3.5. Análisis de Factibilidad	44
        3.6. Análisis D.O.F.A	48
CAPÍTULO IV	52
LA PROPUESTA	52
        4.1 Descripción del Sistema actual	52
        4.2 Descripción de la Propuesta	54
Objetivos de la Propuesta	55
Objetivo General	56
Objetivos Específicos	56
Beneficios de la Propuesta	56
Requerimiento de la Propuesta	57
Descripción de la Aplicación	59
Seguridad de la Propuesta	59
Modelo Entidad Relación	61
DESCRIPCIÓN DE PANTALLAS	71
Inicio De Sesión	71
Pantalla Principal	71
botones de la pantalla principal	73
Panel de Reportes	87
RECOMENDACIONES	91
CONCLUSIÓN	92
REFERENCIAS BIBLIOGRÁFICAS	93
ÍNDICE DE CUADROS



Cuadro Nº 1: Organigrama y Descripción de cargos	9
Cuadro Nº 2: Resumen de Software	36
Cuadro N° 3: Observación Directa	40
Cuadro N° 4: Entrevista no Estructurada	41
Cuadro N° 5: Encuesta de respuesta cerrada	43
Cuadro N° 6: Preguntas de la encuesta	43
Cuadro N° 5: Hardware Requerido	47
Cuadro N° 6: Software Requerido	48
Cuadro N° 7: Espacio Físico	49
Cuadro N° 8: Inversión Económica	49
Cuadro N° 9: Análisis D.O.F.A del sistema Propuesto	52
Cuadro N° 10: Análisis D.O.F.A del sistema Actual	53
Cuadro N° 11: Diagrama de Casos de uso sistema de marcaje de asistencias actual 55 Cuadro N° 12 Diagrama de Casos de Uso del sistema propuesto	56
Cuadro N° 13: Resolución de la pantalla	59
Cuadro N° 14: Fuentes	60
Cuadro N° 15 Colores utilizados en la aplicación	60
Cuadro N° 16 Logotipo de la aplicación	61
Cuadro N° 17: Mapa de la aplicación	63
Cuadro N° 18 Modelo Entidad-Relación	64
Cuadro N° 19: Diccionario de Datos, tabla auth_group	65
Cuadro N° 20: Diccionario de Datos, tabla auth_group_permissions	65
Cuadro N° 21: Diccionario de Datos, tabla auth_permissions	66
Cuadro N° 22: Diccionario de Datos, tabla auth_user	66
Cuadro N° 23: Diccionario de Datos, tabla auth_user_groups	67
Cuadro N° 24: Diccionario de Datos, tabla auth_user_user_permissions	67
Cuadro N° 25: Diccionario de Datos, tabla django_admin_log	68
Cuadro N° 26: Diccionario de Datos, tabla django_content_type	68
Cuadro N° 27: Diccionario de Datos, tabla django_migrations	69
Cuadro N° 28: Diccionario de Datos, tabla django_session	69
Cuadro N° 29: Diccionario de Datos, tabla marcaje_cargo	70
Cuadro N° 30: Diccionario de Datos, tabla marcaje_departamento	70
Cuadro N° 31: Diccionario de Datos, tabla marcaje_departamento_usuario	70
Cuadro N° 32: Diccionario de Datos, tabla marcaje_empleado	71
Cuadro N° 33: Diccionario de Datos, tabla marcaje_estado	72
Cuadro N° 34: Diccionario de Datos, tabla marcaje_evento	72
Cuadro N° 35: Diccionario de Datos, tabla marcaje_horario	73
Cuadro N° 36: Diccionario de Datos, tabla marcaje_movimiento	73
ÍNDICE DE FIGURAS
Figura N° 1: Modelo Vista Plantilla	77
Figura N° 2: Inicio De Sesión	78
Figura N° 3: Pantalla Principal	79
Figura N° 4: Pantalla principal de un Gerente	79
Figura N° 5: Pantalla principal del Personal de Seguridad	80
Figura N° 7: Entrada de datos para el escáner (cédula de empleados)	81
Figura N° 8: Panel de Administrador del Súper Usuario	81
Figura N° 9: Botones de la barra de navegación superior	81
Figura N° 10: Modelo de Cargos	82
Figura N° 11: Pantalla de Modelo de Departamentos	83
Figura N° 12: Pantalla de Modelo de Empleados	83
Figura N° 13: Pantalla de Modelo de Estados	84
Figura N° 14: Pantalla de Modelo de Eventos	84
Figura N° 15: Pantalla de Modelo de Horarios	85
Figura N° 16: Pantalla de Modelo de Movimientos	85
Figura N° 17: Pantalla de Agregar usuario	86
Figura N° 18: Pantalla de Modificar usuario (1)	87
Figura N° 19: Pantalla de Modificar Usuario (2)	88
Figura N° 20: Pantalla de Modificar Usuario (3)	88
Figura N° 21: Pantalla de gestión de permisos	89
Figura N° 22: Permisos de usuario para el personal de seguridad	90
Figura N° 23: Permisos de supervisor genérico	91
Figura N° 24: Señalización de botones para administradores	91
Figura N° 25: Señalización de gestión de usuarios para Gerentes	92
Figura N° 26: Pantalla de panel de administrador para un gerente	93
Figura N° 27: Modificación de un estatus de empleado con usuario de gerente	94
Figura N° 28: Pantalla de panel de reportes	94
Figura N° 29: Botones pantalla de reporte	95
Figura N° 30: Señalización de botones en panel de reportes	95
Figura N° 31: Tabla de datos de empleados para reportes individuales	95
Figura N° 32: Tabla de datos de departamentos para reportes por departamento	96
Figura N° 33: Selectores de rangos de fechas	96
Figura N° 34: Reporte general de los empleados y sus horarios	97
Figura N° 35: Reporte general con el resumen de cada empleado	97
Figura N° 36: Reporte de empleado individual	97
Figura N° 37: Reporte por departamento	98
INTRODUCCIÓN


En la actualidad, los servicios informáticos se han vuelto indispensable para todas las organizaciones y empresas, debido a que reducen el coste de realizar determinadas tareas gracias a la automatización de muchos procesos como los pagos, facturación, control del almacén, etc. y, por extensión, los empleados disponen de más tiempo para dedicarse a otros cometidos enfocados al crecimiento personal de la empresa.


Por esto, dentro del mundo actual la tecnología se ha convertido en una herramienta muy importante para todas las personas de todo el mundo, por ello cualquier empresa se vería beneficiada por la implementación de computadores que cuenten con los programas necesarios para realizar las tareas de manera rápida y ordenada, sobre todo para aquellas empresas que cuenten con una gran cantidad de personal y una corriente de pagos y facturas constantes.
Por lo tanto, en el presente proyecto se plantea una propuesta de creación de una aplicación, necesaria y oportuna para la administración correcta y automática del marcaje de los empleados que dispone una empresa, así como la generación de los reportes, ya que en la actualidad con la tecnología que avanza cada día para los usuarios es muy importante un sistema automatizado que les permita llevar un control sobre los movimientos que se realizan a diario.
El siguiente trabajo contiene la presentación de una propuesta para la creación de una aplicación para el Centro Policlínico Valencia C.A. en la Urb. La Viña, en Valencia, Estado Carabobo, que permita un mejor manejo de los movimientos del personal.
El presente trabajo de investigación se encuentra estructurado en cuatro capítulos que comprenden el desarrollo del tema planteado:
En el CAPÍTULO I se presenta el contexto y planteamiento del problema, donde se revisan los antecedentes que llevaron a la creación de la empresa y posterior evolución, la formulación de que es exactamente lo que se quiere proponer con el presente trabajo de grado, los objetivos que se quieren cumplir para el contexto del problema, tanto el general
como los específicos, y una justificación en donde se dicta qué entidades y ámbitos se benefician del actual proyecto.
El CAPÍTULO II comprende los antecedentes teóricos, marco referencial y glosario de términos, todos estos puntos tienen sustento en las teorías y conceptos que constituyen un enfoque de mejor comprensión sobre el estudio para la creación de la aplicación.
En el CAPÍTULO III, se define la metodología que se va a utilizar en la investigación, la técnica que se usará en este proyecto es la metodología R.U.P. ya que se analizará todos los aspectos que influyan en la creación de la aplicación y la entrevista para recolectar información sobre las necesidades de la empresa sobre la administración de precios y servicios para posteriormente detallar mediante tablas la interpretación que servirán de base al momento de plantear la propuesta para nuestro proyecto.
En el CAPÍTULO IV, se encuentra la propuesta que es el estudio de la implementación de una aplicación para ver si es factible o no la misma, en el Centro Policlínico Valencia C.A., se presentan al final las recomendaciones del proyecto.
En definitiva se hizo posible esta investigación en base al objetivo general que es desarrollar un sistema de marcaje para las asistencias del personal del Centro Policlínico Valencia C.A.
CAPÍTULO I EL PROBLEMA

        1.1 Contexto del problema


El Centro Policlínico Valencia inició la construcción de su sede principal en el año 1972, durante cuatro (4) años se realizó la dotación y construcción de la clínica, siendo inaugurada el 23 de julio de 1976 y aperturada al público el 01 de agosto del mismo año, con el objetivo de asegurar a los pacientes un servicio de salud que satisfaga sus expectativas, a través de un mejoramiento continuo en la calidad del servicio, talento humano capacitado e infraestructura confiable.
De la misma forma, la clínica abrió sus puertas con dos edificios modernos; una torre de hospitalización con dos pisos, cuarenta (40) camas de hospitalización, cuatro (04) quirófanos de cirugía; una sala de partos con quirófano, laboratorio central, servicios de radiología general, traumatología, emergencias de adultos y niños, cocina y dietética, lavandería, estacionamiento y una torre de setenta y cinco (75) consultorios, distribuidos en tres pisos.
Finalmente, en la actualidad, la clínica cuenta con un número de empleados de 608 personas, distribuidas en las diferentes áreas de Valencia y sus adyacencias, también cuenta con satélites en diferentes zonas de Valencia como son: el Ambulatorio de Naguanagua, San Diego y en la Zona Industrial. Manejan un horario corrido los 365 días del año.
Misión

“Brindar un servicio integral de salud, de alta calidad y compromiso social a nuestros pacientes, con talento humano altamente especializado, ético, responsable, honesto y apoyados en avances científicos y tecnológicos. Estamos consagrados a nuestros pacientes y orientados a satisfacer sus necesidades”.
Visión
“Ser líder a nivel nacional en el servicio de atención integral de salud, mediante la incorporación de infraestructura física, tecnológica y talento humano especializado, ético y comprometido, con el propósito de brindar un servicio de alta calidad, con responsabilidad social”.

Cuadro Nº 1: Organigrama y Descripción de cargos

Fuente: Departamento de Recursos Humanos (2016).
Junta Directiva: Es quien debe generar valor para los accionistas y grupos de interés. Esto debe lograrse a partir de la definición y seguimientos del marco estratégico corporativo y políticas para ejecutarlo, a través de la disposición de recursos y del desarrollo de su talento humano.

Sociedad Médica: Agrupa en su seno a todos los médicos y profesionales afines del del centro policlínico, cualquiera que sea su condición de accionista o de trabajo dentro de la misma, para asegurar el desarrollo científico de la institución a niveles óptimos.

Fundación Policlínico Valencia: Es la organización no gubernamental, sin fines de lucro, cuyo marco de acción es la salud, busca la integración de equipos de trabajo, el desarrollo de voluntariado corporativo, la investigación y prevención como valores para el desarrollo del país y la formación de talento humano en individuos sensibles y solidarios con un alto nivel de desempeño científico y profesional.

Departamento Legal: Es el órgano encargado de analizar, sustanciar e instruir las sanciones de carácter disciplinarias aplicables al personal funcionarial, así como de asesorar en materia del Derecho Administrativo a las distintas Dependencias Centrales y Facultades.

Gerencia de Auditoría Interna: Planifica las actividades de Auditoría, de acuerdo a los riesgos de la empresa y al tiempo limitado de los recursos de Auditoría. Las actividades de auditoría pueden ser Auditorías Operativas, Auditorías de Sistemas, Auditorías de Tienda, Verificaciones, etc.

Gerencia de Seguridad Integral: Analiza las situaciones de riesgo, planifica y programa las actuaciones precisas para implantar y llevar a cabo los servicios de seguridad.

Dirección Médica: Diseña estrategias y planes para el departamento médico conforme a las normas de la empresa para crecer y prestar un excelente servicio, además de planificar y supervisar la atención de todos los pacientes o las operaciones y programas administrativos.
Gerencia General: Tiene la responsabilidad de conducir la organización de la empresa, liderando al equipo de trabajo y coordinando las actividades de otras jefaturas con el fin de cumplir con los objetivos estratégicos establecidos en el plan de trabajo.

Secretaria: Se encarga de recibir y redactar la correspondencia de un superior jerárquico, llevar adelante la agenda de éste y custodiar y ordenar los documentos de una oficina.

Mercadeo: Diseña todas las actividades de promoción de la empresa, y sus productos o servicios. lleva adelante un estudio de clientes para determinar a quién está dirigido los productos o servicios e implementar acciones para alcanzar al público objetivo.

Gerencia Administrativa: Es la unidad responsable de establecer la orientación estratégica de la organización, planificando sus actividades dirigiendo y supervisando a las dependencias que la conforman, coordinando y controlando el equipo humano que colabora, todo de acuerdo con criterios y políticas previamente establecidas.

Gerencia de Contabilidad: Comprende el desarrollo e interpretación de la información contable (oportuna y confiable) para la toma de decisiones, planeamiento y control de la organización. Ayuda a manejar y controlar las operaciones diarias del negocio.

Gerencia de Finanzas: Es la encargada de administrar los recursos económicos y físicos de la empresa, es decir, cuenta con el conocimiento de cada área de la empresa como lo son contabilidad, nomina, presupuesto, costo, talento humano, y demás áreas con las que cuenten esto depende de la actividad económica de la empresa

Gerencia de Cobranza: Controlan las cuentas para identificar pagos vencidos. Localizar a los deudores y ponerse en contacto con ellos para acordar la amortización de la deuda. Mantener registros precisos e informar de la actividad de cobro.

Gerencia de Impuestos: Se encargan de la administración y manejo de bienes y fondos públicos, en épocas de recaudación, adquisición, conservación, enajenación, gasto, inversión y disposición.
Gerencia de RRHH: Definen los procesos por los cuales las empresas planifican, organizan y administran las tareas y activos relacionados con las personas que conforman la organización.

Gerencia de Informática: Es el órgano encargado de planear, organizar, dirigir, ejecutar y desarrollar sistemas informáticos, así como de la operación y administración de la infraestructura tecnológica.

Gerencia de Proyectos: Controlan la planeación, ejecución y monitoreo de los proyectos para que se lleve a cabo de manera exitosa.

Gerencia de Costos y Presupuestos: Coordinan las actividades relacionadas con el desarrollo, organización de los sistemas de costos, supervisar el análisis de costos, emitir el análisis estadístico para determinar la rentabilidad por producto y cliente.

Gerencia de Admisión: Dirigen, realizan y controlan los procesos de inscripción, admisión, matrícula y grados de los programas de pregrado y posgrado, en concordancia con las políticas institucionales y los reglamentos estudiantiles.

Gerencia de Compras, Mantenimiento y Servicios: Responsables de la búsqueda de los mejores suministros y proveedores para la empresa, además de desarrollar estrategias de aprovisionamiento de insumos, alianzas estratégicas y buena relación con los proveedores.

Gerencia de Mantenimiento: Responsable de gestionar el mantenimiento global de la empresa, coordinando un grupo de personas cualificadas en diferentes tareas (mecánica, electricidad, electrónica, informática...).

Gerencia de Operaciones y Hotelería: Responsables de todos los servicios del hotel, incluyendo la recepción, los servicios de Amas de Llaves, las reservas, los banquetes, el mantenimiento y la restauración; además, establecen los estándares para la administración de personal, se encargan del servicio al huésped, de la publicidad
Departamento de Almacén y Suministros: Se encarga de garantizar el abasto suficiente de los artículos y productos recurrentes, así como el adecuado manejo y custodia de las existencias de sustancias químicas, materiales de laboratorio, refacciones, muebles y enseres.

Gerencia de Compras: Planifican, dirigen o coordinan las actividades de los compradores y empleados relacionados con el área de compras que participan de la compra de materiales, productos, y servicios.

Gerencia de Salud: Planifica y gestiona los procesos administrativos y médicos para garantizar la seguridad y la calidad de la atención médica, haciéndola más productiva y eficiente.

Gerencia de Imagenología: Planifica, dirige y coordina las diferentes actividades para tratar enfermedades usando radiación (radioncología) o intervenciones mínimamente invasivas guiadas por imagen (radiología de intervención).
        1.2 Planteamiento del Problema.


Desde el siglo XX el hombre ha innovado en la creación de máquinas para la optimización de cuentas, la gestión de recursos por parte del ser humano hace posible realizar tareas de una manera mucho más eficiente, reduciendo así las pérdidas de cualquier tipo.
Por lo que, durante el Siglo XX, se inventó el computador, el cual es una máquina electrónica digital programable que ejecuta una serie de comandos para procesar los datos de entrada, obteniendo convenientemente información que posteriormente se envía a las unidades de salida.
Eventualmente, esta invención le da la posibilidad a las personas de crear programas capaces de realizar tareas de una manera más eficiente y automatizada, debido a la velocidad con la que un computador puede realizar una tarea, así como la facilidad para guardar, modificar y enviar archivos a través de la red.
Hoy en día en Venezuela, gran parte de las empresas poseen computadores con programas que hagan de las tareas algo sencillo de comprender y de fácil manejo, ofreciendo así la posibilidad de que los empleados puedan disponer del tiempo necesario para dedicarse a otras actividades en la empresa. Dentro del país son muchas las empresas que requieren de estos programas, por lo que hay una gran demanda de los mismos.
Asimismo, la causa principal de dicha necesidad por parte de las empresas Venezolanas es debido al incremento exponencial de la productividad al agilizar muchos procesos, así como medirla y tener una mayor control de todas las actividades.
De este modo, en el centro policlínico Valencia C.A existe una gran cantidad de computadoras que contienen los programas necesarios para automatizar y agilizar muchas de las actividades que se realizan, uno de estos programas se usa para el marcaje de entrada y salida de los empleados, generalmente, el proceso que se lleva a cabo comienza cuando los empleados entran al establecimiento y se dirigen al recibidor para marcar su movimiento.
Después, el sistema registra el movimiento con el nombre del empleado, la fecha y hora del registro, y el tipo de movimiento, entrada o salida.
A pesar de que el sistema realiza su tarea, carece de varias opciones que pueden ayudar a agilizar el proceso de generación de reportes de los empleados.
Por consiguiente, el problema principal proviene de la necesidad que existe en el departamento de nómina de tener un control de las asistencias y realizar los cálculos de las horas extras y los retrasos de manera automatizada, debido a que actualmente el sistema de marcaje solo puede generar un reporte general de todo el personal y no cuenta con la programación necesaria para filtrar los reportes de manera individual o departamental así como determinar los cálculos citados anteriormente, actualmente el proceso se realiza de manera manual, chequeando cada uno de los movimientos de los empleados para determinar el pago de la nómina en base a los parámetros anteriormente establecidos lo cual resulta en un proceso tardío ya que se tienen que procesar los registros de más de 600 empleados, además de no poder comprobar los movimientos individualmente o de un departamento.
Por otro lado, el programa no cuenta con el filtro para no incluir a los empleados inactivos en el reporte general, provocando la pérdida de recursos y tiempo por tener que generar el reporte de los empleados que no se encuentran activos y tener que realizar el chequeo manualmente.
Finalmente, en la actualidad, la clínica ha decidido migrar las computadoras a sistemas operativos actualizados, en consecuencia, no será posible la migración del sistema de marcaje, debido a que el lenguaje de programación base del mismo no tiene ningún tipo de soporte para los sistemas actuales, provocando la ausencia de un sistema de marcaje.
En este orden de ideas, se presenta la importancia de desarrollar un sistema de marcaje para las asistencias del personal del Centro Policlínico Valencia C.A. que permita mejorar el control del registro de los movimientos de los empleados, así como la generación de reportes precisos y automatizados.
        1.3 Objetivos de la investigación

Objetivo General
Desarrollar un sistema para el marcaje de los empleados del Centro Policlínico Valencia C.A, que permita mejorar el registro de los movimientos y automatizar el proceso de generación de reportes.
Objetivos Específicos.
            ▪ Diagnosticar la situación actual del sistema de marcaje para obtener la información relacionada para establecer los elementos del proyecto.
            ▪ Estudiar los requerimientos obtenidos que permita conducir a una viabilidad de un sistema automatizado.

            ▪ Establecer un proyecto factible que oriente la investigación hacia una posible implementación de un sistema que dé solución a la situación


            ▪ Proponer un sistema para el marcaje de los empleados del Centro Policlínico Valencia para agilizar el control de entradas y salidas de los empleados



        1.4 Justificación de la investigación


Un sistema automatizado constituye una herramienta que viene a facilitar el control de los movimientos de los empleados del Centro Policlínico Valencia C.A, para satisfacer una inquietud ante una necesidad determinada, El uso de este recurso es de gran utilidad, dado que facilitará la labor administrativa del personal del departamento de nómina.
Cabe mencionar que el sistema permitirá gestionar los cálculos de las horas extras y retrasos de manera más fácil y detallada, debido a que va a contar con su respectiva estructura programada para que los reportes reflejan dichos cálculos de manera automática, también va a ser una aplicación de manejo sencillo, ya que contará con una interfaz bastante explícita.
Asimismo, el sistema cuenta con los filtros necesarios para generar distintos tipos de reportes, entre los cuales se incluyen los individuales, departamentales y generales, así como no toma en cuenta a los empleados inactivos, dando como resultado la agilización del departamento de nómina al no tener que recurrir a métodos manuales los cuales consumen tiempo y recursos que la empresa puede usar para dedicarse a otros cometidos enfocados al crecimiento personal de la misma.
Teniendo en cuenta que es un programa de fácil acceso y uso, contando con las medidas de seguridad acorde con las exigencias, garantizando un buen funcionamiento más flexible, donde el contenido se adapte a las necesidades brindando así al Centro Policlínico Valencia C.A, la mejor innovación tecnológica para facilitar la labor administrativa del personal y agilizar las actividades en el departamento de nómina.
Por otro lado, al Instituto Universitario de Tecnología Juan Pablo Pérez Alfonso (IUTEPAL), se beneficia del presente proyecto debido a que dejaría material de antecedentes para los futuros trabajos de los estudiantes, además de otorgar prestigio a la institución para mejorar su reconocimiento.
De modo similar, aporta un aprendizaje para los Autores implicados en el presente proyecto, debido a que se adquieren conocimientos prácticos y teóricos para la realización de programas e investigaciones metodológicas aplicables a la vida laboral.
CAPÍTULO II

MARCO TEÓRICO

El marco teórico es la recopilación de antecedentes, investigaciones previas y consideraciones teóricas en las que se sustenta un proyecto de investigación, análisis, hipótesis o experimento.
En este orden de ideas el marco teórico, también llamado marco de referencia, es el soporte teórico, contextual o legal de los conceptos que se utilizaron para el planteamiento del problema en la investigación.

        2.1 Antecedentes de la investigación.

A continuación, se plantean las investigaciones preliminares que favorecerá el desarrollo del presente proyecto de grado aportando información valiosa que sustente el desarrollo del sistema que se desea.

Primeramente Espino A. (2018) en su estudio titulado "Sistema de información para el control de asistencia del personal de la empresa Global Sales Solutions Line Sucursal Perú." investigación realizada en la universidad Inca Garcilaso de la Vega, ubicada en Lima, Perú, En esta investigación se presenta el desarrolló un sistema de registro de asistencias para un mejor control del personal y facilitar la gestión de la información y procesamiento de los datos de forma ágil y confiable, brindando un registro histórico de el ingreso y salida de los empleados y emitiendo las horas trabajadas correspondientes.

Por lo tanto, la propuesta principal del trabajo de investigación es resolver el problema de las continuas tardanzas, inasistencia y el incumplimiento de los empleados, con una aplicación de gestión de asistencias, que ayude a mejorar la administración, el control y la gestión de los movimientos, impactando de forma positiva al cumplimiento del horario de trabajo, brindado a la empresa de una buena imagen y prestigio.

De este modo, para la recolección de datos, se utilizaron: la observación, Análisis y síntesis y entrevista, respecto al aspecto metodológico, fue utilizado el Proceso Unificado
Racional (RUP), para la recolección de datos se recopiló información mediante una entrevista y encuesta para el gerente, así como una investigación exploratoria por la empresa, y para el desarrollo del sistema utilizaron Visual Studio 2017 para la codificación y para el diseño de las interfaces, por último, el sistema gestor de base de datos utilizado fue MySQL.

Asimismo, este trabajo de investigación se relaciona con el Proyecto debido a que aporta el conocimiento necesario para tener una guía de cómo desarrollar un sistema para la automatización del control de asistencia del personal de una empresa.

Por otro lado, Rodriguez, A., (2019) en su investigación titulada “Desarrollo De Tecnologías De Información Gerencial Para Instituciones Públicas Y Privadas En Venezuela” investigación realizada en el Instituto Universitario Nueva Esparta ubicado en Caracas, Venezuela. La investigación plantea el desarrollo de un software de inventario, compra y venta para la empresa el cual sea un aplicativo web en el que se permita realizar los pagos de la empresa, así como el control de sus operaciones, tales como la facturación, el manejo de clientes y proveedores, los artículos registrados en comercio con su respectivo inventario, el corte de caja realizado durante las jornadas laborales, los precios de los productos, el registro de los pagos realizados y los reportes.

Por lo consiguiente, para la recolección de datos, se utilizaron: entrevista estructurada y observación directa, respecto al aspecto metodológico, la investigación tiene una modalidad de Proyecto Especial, y de diseño de tipo No Experimental, tendrá como base la metodología de desarrollo de software SCRUM, Cabe mencionar, que para la codificación de la página web se utilizaron los siguientes software: lenguajes de programación Python, XML, Javascript y CSS, HTML5.

Es por ello que el presente estudio tiene se vincula con esta investigación, debido a que busca realizar una aplicación web site para el control de sus operaciones, tales como la facturación, el manejo de clientes, los precios de los productos, registros de pagos realizados y reportes, aportando conocimientos acerca de una estructura para la aplicación que se desea realizar, para así tener un conocimiento más claro de los datos que se van a procesar dentro de la aplicación y así tener una aplicación administrativa óptima.
Por su parte, Pérez, M., (2016) en su proyecto de grado titulado “Extensión de aplicaciones mediante python embebido”. investigación realizada en la Escuela Superior de ingeniería y sistemas de telecomunicación, ubicada en Madrid, España. en el proyecto se realiza una descripción de python, lenguaje de programación que escogen para la realización de scripts que utilizan para desarrollar pruebas de conceptos, a partir de ejemplos básicos de uso de módulos python desde aplicaciones desarrolladas en C, se aborda el desarrollo de un módulo C que sirva de envoltorio, entre una interfaz C y un módulo Python que las implemente.

En este sentido, el antecedente se vincula con la presente investigación debido a que aporta conocimientos acerca del desarrollo de scripts en Python y el manejo de módulos que posteriormente servirán para facilitar el desarrollo de la aplicación propuesta.

De igual forma, Rodríguez M., (2019), en su proyecto titulado “Desarrollo de una aplicación para el análisis automatizado de datos de producción científica”. Investigación realizada en la Universidad Da Coruña de Valencia, ubicada en Coruña, España. El trabajo propone el desarrollo de una página web para la búsqueda y análisis de autores, citas, artículos y revistas. Haciendo uso de Python como encargado de todo el entorno del modelo, y el Framework Django que proporciona la base de la aplicación, ofreciendo el entorno de trabajo al completo.

El programa está compuesto por una interfaz gráfica agradable al usuario construida a base de HTML y JavaScript, utilizando para su desarrollo la herramienta Visual Studio Code. El almacenamiento y la gestión de la aplicación se realiza mediante bases de datos SQLite y MongoDB, mientras un entorno gráfico claro y homogéneo permite la interacción con los usuarios.

Según lo anteriormente mencionado, el trabajo se vincula con la presente investigación debido a que aporta conocimientos sobre el desarrollo de interfaz gráfica utilizando HTML y JavaScript, así como dar a conocer la operatividad del Framework Django para el manejo de la base de datos, además de aportar conocimientos en cuanto al mantenimiento de base de datos en python.
        2.2 Marco referencial.

Para la elaboración de un trabajo de grado es de gran importancia tener conocimientos teóricos del tema a tratar por lo tanto se hace una búsqueda referencial, abarcando las definiciones relacionadas con la investigación a desarrollar, para la realización de la aplicación ya propuesta.

En relación a lo antes expuesto, se puede decir que el marco referencial tiene como finalidad situar el problema dentro de un conjunto de conocimientos que permite orientar la búsqueda y ofrecer una conceptualización adecuada de los términos que se deberán usar.
Administración

Según Fermín, M. en el año 2014 a través del siguiente enlace:
https://web.archive.org/web/20090307114157/http://www.managementweb.com.ar/Managem ent1.htm
La administración puede verse como un proceso. Esto fue planteado originalmente por Henri Fayoly luego seguido por otros autores, que surgirían algunas modificaciones. Actualmente se acepta el proceso propuesto por Dale, que está compuesto por las siguientes etapas básicas: Planificación, organización, dirección, control. Este proceso también recibe el nombre de función administrativa.
Proceso Administrativo.

Planificar: es el proceso que comienza con la visión que tiene la persona que dirige a una organización; la misión de la organización; fijar objetivos, las estrategias y políticas organizacionales, usando como herramienta el mapa estratégico; todo esto teniendo en cuenta las fortalezas/debilidades de la organización y las oportunidades/amenazas del contexto.

Organizar: responde a las preguntas ¿Quién va a realizar la tarea?, implica diseñar el organigrama de la organización definiendo responsabilidades y obligaciones; ¿Cómo se va a realizar la tarea?; ¿Cuándo se va a realizar?; mediante el diseño de proceso de negocio, que
establecen la forma en que se deben realizar las tareas y en qué secuencia temporal; en definitiva organizar es coordinar y sincronizar.

Dirigir: es la influencia positiva y voluntaria (que implica persuadir), para que todo lo que se ha planeado y organizado, se pueda realizar; en términos coloquiales significa "Hacer que las cosas se hagan" y la probabilidad de que se logre dicho objetivo aumenta, cuando ejercemos sobre los miembros de la empresa, el liderazgo, la motivación, la comunicación y la supervisión efectiva, para lo cual se recomienda que sea basado en la teoría de la toma de decisiones usando modelos lógicos y también intuitivos de toma de decisiones.

Controlar: es la medición del desempeño de lo ejecutado, comparándolo con los objetivos y metas fijados; se detectan los desvíos y se toman las medidas necesarias para corregirlos. El control se realiza a nivel estratégico, nivel táctico y a nivel operativo; la organización entera es evaluada, mediante un sistema de Control de gestión; por otro lado también se contratan auditorías externas, donde se analizan y controlan las diferentes áreas funcionales.

Por consiguiente la Administración también puede ser aplicada por diferentes áreas, para la que compete a este trabajo se encuentra la “Administración de las tecnologías de la información”

La administración de las tecnologías de la información Yasmina, A. en el año 2001.
Tiene como objetivo el desarrollo de sistemas de información que ayudan a resolver problemas de la administración. Las organizaciones tanto lucrativas como no lucrativas deben mantenerse a la vanguardia en sus diferentes campos de acción, y para poder realizar esto deben contar con lo último en sistemas de información que puedan cubrir las necesidades tanto de su entorno interior como de su entorno exterior. El rediseño de una organización basado en la adquisición de nuevas tecnologías de información que den paso a un nuevo sistema de información no es tarea fácil, se tienen que tomar en cuenta muchos aspectos de la organización (recursos humanos, económicos y operativos) y se debe seguir un proceso previamente definido para poder renacer y hacer que este rediseño tenga éxito.

Lo primero que se debe realizar en el rediseño de una organización con sistemas de información es el análisis de las necesidades. Existen dos metodologías importantes para determinar las necesidades de información esenciales de la organización en su totalidad:
    • El análisis de la empresa, el cual examina toda la organización en términos de sus unidades, funciones, procesos y elementos de información
    • El análisis de los factores críticos para el éxito, el cual se basa en la premisa de que las necesidades de información de una organización están determinadas por un número reducido de factores críticos para el éxito (CSF, del inglés critical success factors).

Existen cuatro clases de cambio estructural en las organizaciones que se pueden presentar en el rediseño de una organización sobre la base de sistemas de información:

            1. Automatización, la forma más común de cambio en la organización que la tecnología de información hace posible. Esta consiste en el uso de computadoras para acelerar el desempeño de tareas existentes.
            2. Racionalización, consiste en la agilización de los procedimientos operativos estándar eliminando cuellos de botella obvios, de modo que la automatización haga más eficientes los procedimientos operativos.
            3. Reingeniería, esta implica rediseñar radicalmente el flujo de trabajo y los procesos de negocios que se siguen para generar productos y servicios, con el objeto de reducir radicalmente los costos del negocio
            4. Cambios de paradigma, esta es la forma más radical de cambio en los negocios e implica una reconceptualización de la naturaleza del negocio y de la organización misma.


Control

Según Barrios, J. en el año 2018 a través del enlace:

https://www.isamex.org/intechmx/index.php/2018/12/24/conceptos-basicos-sistemas-de-contr ol/
“Un sistema de control es un conjunto de dispositivos encargados de administrar, ordenar, dirigir o regular el comportamiento de otro sistema, con el fin de reducir las probabilidades de fallo y obtener los resultados deseados.”
Existen dos clases comunes de sistemas de control, sistemas de lazo abierto y sistemas de lazo cerrado. En los sistemas de control de lazo abierto la salida no interviene en la acción de control; mientras que en los de lazo cerrado si se va a requerir conocer la salida para ejercer el control del sistema. Un sistema de lazo cerrado es llamado también sistema de control con realimentación.



Sistema

Según la Editorial Etecé, en el año 2021 a través del enlace: https://concepto.de/sistema/

Es "un objeto complejo cuyas partes o componentes se relacionan con al menos alguno de los demás componentes"; ya sea conceptual o material. Todos los sistemas tienen composición, estructura y entorno, pero sólo los sistemas materiales tienen mecanismos (o procesos), y solo algunos sistemas materiales tienen figura (forma).

Un sistema es un conjunto de elementos interrelacionados entre sí para lograr un mismo objetivo. Los componentes de sistema son:
    • Entradas: Datos, información, insumos que ingresan al sistema.

    • Procesos: Cambios que se producen a las entradas para generar salidas, resultados del sistema.
    • Salidas: Resultados de los procesos realizados en el sistema.

Un sistema informático (SI)es un sistema que permite almacenar y procesar información; es el conjunto de partes interrelacionadas: hardware, software y personal informático. El hardware incluye computadoras o cualquier tipo de dispositivo electrónico, que consisten en procesadores, memoria, sistemas de almacenamiento externo, etc. El software incluye al sistema operativo, firmware y aplicaciones, siendo especialmente importante los sistemas de gestión de bases de datos. Por último, el componente humano incluye al personal técnico que apoya y mantiene el sistema (analistas, programadores, operarios, etc.) y a los usuarios que lo utilizan.
Software
Según la Editorial Etecé en el año 2022 a través del enlace: https://concepto.de/software/

Se conoce como software al sistema formal de un sistema informático, que comprende el conjunto de los componentes lógicos necesarios que hace posible la realización de tareas específicas, en contraposición a los componentes físicos que son llamados hardware. La interacción entre el software y el hardware hace operativo un ordenador (u otro dispositivo), es decir, el software envía instrucciones que el hardware ejecuta, haciendo posible su funcionamiento.
Los componentes lógicos incluyen, entre muchos otros, las aplicaciones informáticas, tales como el procesador de texto, que permite al usuario realizar todas las tareas concernientes a la edición de textos; el llamado software de sistema, tal como el sistema operativo, que básicamente permite al resto de los programas funcionar adecuadamente.
El software, en su gran mayoría, está escrito en lenguajes de programación de alto nivel, ya que son más fáciles y eficientes para que los programadores los usen, porque son más cercanos al lenguaje natural respecto del lenguaje de máquina. Los lenguajes de alto nivel se traducen a lenguaje de máquina utilizando un compilador o un intérprete, o bien una combinación de ambos. El software también puede estar escrito en lenguaje ensamblador, que es de bajo nivel y tiene una alta correspondencia con las instrucciones de lenguaje máquina; se traduce al lenguaje de la máquina utilizando un ensamblador.
Si bien esta distinción es, en cierto modo, arbitraria, y a veces confusa, a los fines prácticos se puede clasificar al software en tres tipos:
Software de sistema: Su objetivo es desvincular adecuadamente al usuario y al programador de los detalles del sistema informático en particular que se use, aislandolo especialmente del procesamiento referido a las características internas de: memoria, discos, puertos y dispositivos de comunicaciones, impresoras, pantallas, teclados, etc. El software de sistema le procura al usuario y programador una interfaz de alto nivel, controladores, herramientas y utilidades de apoyo que permiten el mantenimiento del sistema global.
Software de programación: Es el conjunto de herramientas que permiten al programador desarrollar programas de informática, usando diferentes alternativas y lenguajes de programación, de una manera práctica.
Software de aplicación: Es aquel que permite a los usuarios llevar a cabo una o varias tareas específicas, en cualquier campo de actividad susceptible de ser automatizado o asistido, con especial énfasis en los negocios.



Aplicación

Según GCF global, en el año 2018 a través del enlace: https://edu.gcfglobal.org/es/cultura-tecnologica/
“Una aplicación es un programa informático diseñado como una herramienta para realizar operaciones o funciones específicas. Generalmente, son diseñadas para facilitar ciertas tareas complejas y hacer más sencilla la experiencia informática de las personas.”
Las aplicaciones son programas totalmente distintos a los sistemas operativos o lenguajes de programación, ya que estas cumplen una función puntual y es pensada para que sea de uso común como por ejemplo manejar finanzas o contabilidad desde hojas de cálculo.
Ejemplos de una aplicación serían un procesador de textos, una hoja de cálculo, una aplicación de contabilidad, un navegador web, un reproductor multimedia, un simulador de vuelo aeronáutico, una consola de juegos o un editor de fotografías. «Software de aplicación» hace referencia colectivamente a todas las aplicaciones, como analogía con el software del sistema, que está principalmente relacionado con aquel ejecutado por el sistema operativo.
Base De Datos

Según Oracle en el año 2011, a través del enlace: https://www.oracle.com/ar/database/what-is-database/#link6
Una base de datos es un conjunto de datos pertenecientes a un mismo contexto y almacenados sistemáticamente para su posterior uso. En este sentido; una biblioteca puede considerarse una base de datos compuesta en su mayoría por documentos y textos impresos en papel e indexados para su consulta. Actualmente, y debido al desarrollo tecnológico de campos como la informática y la electrónica, la mayoría de las bases de datos están en formato digital, siendo este un componente electrónico, por tanto se ha desarrollado y se ofrece un amplio rango de soluciones al problema del almacenamiento de datos.
Clasificación de las bases de datos

Las bases de datos pueden clasificarse de varias maneras, de acuerdo al contexto que se esté manejando, la utilidad de las mismas o las necesidades que satisfagan.
Según la variabilidad de la base de datos Bases de datos estáticas
Son bases de datos únicamente de lectura, utilizadas principalmente para almacenar datos históricos que posteriormente se pueden utilizar para estudiar el comportamiento de un conjunto de datos a través del tiempo, realizar proyecciones, tomar decisiones y realizar análisis de datos para inteligencia empresarial.
Bases de datos dinámicas

Son bases de datos donde la información almacenada se modifica con el tiempo, permitiendo operaciones como actualización, borrado y edición de datos, además de las operaciones fundamentales de consulta. Un ejemplo, puede ser la base de datos utilizada en un sistema de información de un supermercado
Según el contenido:

Bases de datos bibliográficas

Solo contienen una subrogante (representante) de la fuente primaria, que permite localizarla. Un registro típico de una base de datos bibliográfica contiene información sobre el autor, fecha de publicación, editorial, título, edición, de una determinada publicación, etc. Puede contener un resumen o extracto de la publicación original, pero nunca el texto completo, porque si no, estaríamos en presencia de una base de datos a texto completo (o de fuentes primarias). Como su nombre lo indica, el contenido son cifras o números. Por ejemplo, una colección de resultados de análisis de laboratorio, ayuda mucho a la redundancia de datos.
Bases de datos de texto completo

Almacenan las fuentes primarias, como por ejemplo, todo el contenido de todas las ediciones de una colección de revistas científicas.
Directorios
Un ejemplo son las guías telefónicas en formato electrónico.

Estos directorios se pueden clasificar en dos grandes tipos dependiendo de si son personales o empresariales (llamadas páginas blancas o amarillas respectivamente).
Los directorios empresariales hay de tres tipos:

    1. Tienen nombre de la empresa y dirección.

    2. Contienen teléfono y los más avanzados contienen correo electrónico.

    3. 	Contienen datos como facturación o número de empleados además de códigos nacionales que ayudan a su distinción.
Los directorios personales solo hay de un tipo, ya que leyes como la LOPD en España protege la privacidad de los usuarios pertenecientes al directorio.
La búsqueda inversa está prohibida en los directorios personales (a partir de un número de teléfono saber el titular de la línea).
Bases de datos o "bibliotecas" de información química o biológica

Son bases de datos que almacenan diferentes tipos de información proveniente de la química, las ciencias de la vida o médicas. Se pueden considerar en varios subtipos:
        ◦ Las que almacenan secuencias de nucleótidos o proteínas.

        ◦ Las bases de datos de rutas metabólicas.

        ◦ 	Bases de datos de estructura, comprende los registros de datos experimentales sobre estructuras 3D de biomoléculas.
        ◦ Bases de datos clínicas.

        ◦ 	Bases de datos bibliográficas (biológicas, químicas, médicas y de otros campos): PubChem, Medline, EBSCOhost.



Sistema de Administración de Bases de Datos (DBMS).
Las bases de datos requieren de un software que permita la administración de dicha base de datos. Estos programas especializados sirven como interfaz para que los usuarios puedan administrar cómo se estructura y optimiza toda la información recopilada. Un sistema de administración de bases de datos también permite un gran número de operaciones relacionadas con la administración, tal como, supervisar la productividad, ajustes, backups y restauración de los datos
Entre los gestores de bases de datos o DBMS más conocidos se encuentran: Microsoft SQL Server, MySQL,OracleDatabase, Microsoft Access, FileMaker, y dBASE
Normalización

Según Abalar, E. en el año 2015 a través del siguiente enlace:

https://www.edu.xunta.gal/espazoAbalar/sites/espazoAbalar/files/datos/1464945204/contido/ 22_la_normalizacin.html
La normalización de bases de datos es un proceso que consiste en asignar y aplicar una serie de reglas a las relaciones obtenidas tras el paso del modelo entidad-relación al modelo relacional con objeto de minimizar la redundancia de datos, facilitando su gestión posterior.
Las bases de datos relacionales se normalizan para:

        ◦ Minimizar la redundancia de los datos.

        ◦ Disminuir problemas de actualización de los datos en las tablas.

        ◦ Proteger la integridad de datos.

En el modelo relacional es frecuente llamar «tabla» a una relación; para que una tabla sea considerada como una relación tiene que cumplir con algunas restricciones:
        ◦ Cada tabla debe tener su nombre único.

        ◦ No puede haber dos filas iguales. No se permiten los duplicados.

        ◦ Todos los datos en una columna deben ser del mismo tipo.

Lenguaje De Programación
Según Betancourt, D. en el año 2018 a través del enlace: https://www.wildcodeschool.com/es-ES/blog/ en el año 2018.
“Un lenguaje de programación es un lenguaje de computadora que los programadores utilizan para comunicarse y para desarrollar programas de software, aplicaciones, páginas webs, scripts u otros conjuntos de instrucciones para que sean ejecutadas por los ordenadores.”
Así como los idiomas que utilizan los humanos para comunicarse, los ordenadores tienen sus propios lenguajes de programación. Cada lenguaje de programación tiene un conjunto único de palabras clave (palabras que entiende) y una sintaxis especial para organizar las instrucciones del programa específico de programación.
El profesional encargado de ejecutar estos lenguajes de programación se llama programador o desarrollador web. Estos especialistas pueden desarrollar un sinfín de software, aplicaciones y páginas web utilizando distintos tipos de lenguajes de programación que respondan a cada necesidad tecnológica.
Casos de Uso

Según IBM corporation, en el año 2021, según el enlace: https://www.ibm.com/docs/es/elm/6.0.3?topic=requirements-defining-use-cases
“Un caso de uso es la descripción de una acción o actividad. Un diagrama de caso de uso es una descripción de las actividades que deberá realizar alguien o algo para llevar a cabo algún proceso.”



Su uso es común para la captura de requisitos funcionales, especialmente con el paradigma de la programación orientada a objetos, donde se originaron, si bien puede utilizarse con resultados igualmente satisfactorios con otros paradigmas de programación.
Los casos de uso están compuesto por elementos llamados: los Actores y relaciones los cuales se definirán a continuación:
Actores.
Se le llama actor a toda entidad externa al sistema que guarda una relación con este y que le demanda una funcionalidad. Esto incluye a los operadores humanos pero también incluye a todos los sistemas externos, además de entidades abstractas, como el tiempo.
Relaciones.

Las relaciones se utilizan para extraer el comportamiento de los casos de uso en los que se incluye y poniendo ese comportamiento en otros casos de uso que lo extiende.
Tipos de Relaciones:

Generalización. Entre un actor y un caso de uso que denota la participación del actor en dicho caso de uso. Este tipo de relación es uno de los más utilizados, cumple una doble función dependiendo de su estereotipo
    • 	Asociación. Es el tipo de relación más básica que indica la invocación desde un actor o caso de uso a otra operación (caso de uso). Dicha relación se denota con una flecha simple.
    • Dependencia o Instanciación. Es una forma muy particular de relación entre clases, en la cual una clase depende de otra, es decir, se instancia (se crea). Dicha relación se denota con una flecha punteada.
        2.3 Definición de Términos básicos.


Internet
Internet es una red de computadoras interconectadas a nivel mundial en forma de tela de araña. Consiste de servidores (o "nodos") que proveen información a aproximadamente 100 millones de personas que están conectadas entre ellas a través de las redes de telefonía y cable.

Servicio
Un servicio, en el ámbito económico, es la acción o conjunto de actividades destinadas a satisfacer una determinada necesidad de los clientes, brindando un producto inmaterial y personalizado.

Análisis
El análisis es el proceso de dividir un tema complejo o sustancia en partes más pequeñas para obtener una mejor comprensión de él.

Archivos
Un archivo o fichero informático es una secuencia de bytes que son almacenados en un dispositivo. A los archivos informáticos se les llama así porque son los equivalentes digitales de los archivos escritos en expedientes, tarjetas, libretas, papel o microfichas del entorno de oficina tradicional.

Automatización
El vocablo automatización describe una amplia gama de tecnologías que reducen la intervención humana en los procesos. La intervención humana se reduce mediante la predeterminación de los criterios de decisión, las relaciones de los subprocesos y las acciones relacionadas, y la incorporación de estas predeterminaciones en las máquinas.

Codificar
La codificación es el proceso mediante el cual la información se convierte en otra forma aceptable para la transmisión. La decodificación invierte este proceso para interpretar la información.
Computadoras
Un computador es una máquina electrónica que está diseñada para realizar tareas específicas. En muchos países se le conoce como computadora u ordenador, pero todas estas palabras se refieren a lo mismo.

Datos.
El dato es la representación de una variable cualitativa o cuantitativa. De ese modo, se le asigna un número, letra o símbolo. El dato suele tener una base empírica, es decir, proviene de la realidad. En este sentido, puede utilizarse para el análisis de un hecho concreto.

Empleado
El empleado es aquella persona que brinda sus servicios a cambio de un salario por parte de un empleador.

Empresa
Una empresa es una organización de personas y recursos que buscan la consecución de un beneficio económico con el desarrollo de una actividad en particular.

Entorno De Desarrollo
El entorno de desarrollo en el mundo del software y la tecnología es un conjunto de procedimientos y herramientas utilizadas por los desarrolladores para codificar, generar, depurar, actualizar, integrar, testear, validar y ejecutar programas.

Información
La información es el conjunto de datos que configuran un mensaje que emite un emisor y que se pretende llegue al receptor para que quede informado. Siempre se lleva a cabo a través de un canal que es el que uno a ambos interlocutores han elegido.

Interfaz
Como interfaz designamos, en informática, la conexión física y funcional que se establece entre dos aparatos, dispositivos o sistemas que funcionan independientemente uno del otro. En este sentido, la comunicación entre un ser humano y una computadora se realiza por medio de una interfaz.
Metodología
El término metodología se define como el grupo de mecanismos o procedimientos racionales, empleados para el logro de un objetivo, o serie de objetivos que dirige una investigación científica.

Red Informática
Una red de computadoras, también llamada red de ordenadores o red informática, es un conjunto de equipos conectados por medio de cables, señales, ondas o cualquier otro método de transporte de datos, que comparten información (archivos), recursos (CD-ROM, impresoras, etc.)

Tecnología
La tecnología hace referencia a las herramientas que son fáciles de usar para la administración e intercambio de la información, desde un principio era utilizada para el desarrollo, ahora es empleada para la resolución de problemas o hacer más fácil las actividades diarias y adaptarse a su entorno.

Telecomunicaciones
La Unión Internacional de Telecomunicaciones (ITU, en inglés) define a la telecomunicación como: “Toda emisión, transmisión y recepción de signos, señales, escritos e imágenes, sonidos e informaciones de cualquier naturaleza, por hilo, radioelectricidad, medios ópticos u otros sistemas electromagnéticos”.
CAPÍTULO III


METODOLOGÍA

        3.1 Justificación de la Metodología

Para el presente trabajo se realizaron dos tipos de investigación, documental exploratoria, y de campo propositiva, para evaluar si existe una inconformidad en el proceso de control de entrada, salida y horario de los empleados, lo que crea imprecisiones e ineficiencia de los procesos, y al ser una investigación de tipo propositiva, se plantea la investigación como tipo proyecto factible. Por lo tanto, según Balestrini A., (2002), se define un Proyecto Factible como:


Los proyectos factibles son aquellos proyectos o investigaciones que proponen la formulación de modelos, sistemas entre otros, que dan soluciones a una realidad o problemática planteada, la cual fue sometida con anterioridad a estudios de las necesidades a satisfacer.



En este sentido, Al iniciar cualquier proceso de investigación, siempre es necesario tener presente el respaldo de algún tipo de metodología que permita definir las actividades a seguir, tales como: la recolección y análisis de los datos, y también conocer detalladamente los modelos investigativos, a saber: explicativo, descriptivo, exploratorio, evaluativo y factible, y de esta manera facilitar en gran medida el trabajo de los investigadores para poder ofrecer una solución a la problemática planteada.
Por otro lado, cabe señalar que la presente investigación recopila datos e información cualitativos y cuantitativos, mediante las técnicas de recolección de datos, por lo que se puede señalar que la metodología de la investigación planteada es mixta, que pretende proporcionar una solución viable para los problemas que presenta El Centro Policlínico Valencia C.A., a medida que el proyecto se desarrolla, este debe ser guiado por una metodología previamente analizada y que se adapte a la investigación, para lograr alcanzar los objetivos inicialmente planteados, llevando a cabo actividades relacionadas con la investigación.
Por lo antes expuesto se optó por utilizar la Metodología Proceso Unificado del Desarrollo de Software (R.U.P), por considerarla bien estructurada y completa, fácil de manejar y se adapta perfectamente al diseño de la solución funcional que se persigue, además de que poseo conocimientos de sus procedimientos y fases ya que pueden adaptarse a solventar la problemática existente en El Centro Policlínico Valencia C.A., de forma disciplinada al momento de asignar tareas y responsabilidades, se pretende implementar las mejores prácticas en el software con desarrollos interactivos. Cabe mencionar que los autores de este trabajo poseen sólidos conocimientos en la aplicación de la metodología mencionada.



        3.2 Justificación del Software

Al realizar un estudio minucioso de los diversos lenguajes de programación y frameworks para el desarrollo de aplicaciones web que existen en la actualidad para el desarrollo del presente proyecto, para así satisfacer las necesidades de información para el desarrollo del mismo.
De esta manera se presenta un cuadro resumen donde se señala el Software seleccionado para realizar la aplicación.
Cuadro Nº 2: Resumen de Software


Lenguaje de Programación	
Lenguajes de diseño	
Editor de código	
Manejador de Base de Datos	
Plataforma

Python 3.10.5 Javascript	
HTML5 CSS	
Visual Studio Code	MySQL 7.4.29	
Windows 10
Fuente: Los autores (2022)
Con respecto al cuadro anterior, se trabajará con Python 3.10.5, como lenguaje de programación principal por ser un lenguaje muy flexible que tiene la capacidad de crear aplicaciones web mediante el framework Django. Además, a Python se le considera un lenguaje de paradigmas múltiples, que admite programación estructurada, funcional y orientada a objetos que permite unir objetos y recursos entre el usuario y el servidor haciendo
que la aplicación web sea más flexible, dinámica, rápida y escalable, sumando que es un lenguaje de alto nivel bastante simplificado que permite a los desarrolladores una mayor facilidad para desarrollar la aplicación propuesta y realizarle mantenimiento en caso de necesitarlo.
Asimismo también se hará uso del lenguaje de programación Javascript debido a que es un lenguaje esencial en cuanto a lo que respecta en el desarrollo de aplicaciones web, utilizado principalmente como apoyo para el diseño de las páginas web, además de tener disponible diferentes librerías que facilitan el desarrollo del sistema, como podría ser JQuery y Bootstrap como las principales, siendo Bootstrap utilizado para el diseño de las páginas web, y JQuery utilizado para facilitar la legibilidad del código, además que permite realizar conexiones asíncronas con el servidor, es un lenguaje de programación de fácil interpretación que es altamente compatible con Django.

En este orden de ideas, se utilizará HTML5 debido a que es esencial para el desarrollo de cualquier página web, cuenta con un lenguaje basado en etiquetas que permiten dar estructura a las páginas, así como insertar imágenes e hipervínculos, mientras que con el lenguaje de estilos CSS, se le dará estilización a las páginas previamente estructuradas con HTML5, haciendo uso del framework bootstrap 5, para facilitar el diseño de las páginas.

Por otro lado, se seleccionó a Visual Studio Code como editor de código seleccionado para la creación del programa, debido a las facilidades que ofrece al programador a la hora de desarrollar código, gracias a las extensiones que se le pueden instalar para ahorrar tiempo al desarrollador al momento de escribir código y conseguir errores.

Asimismo el manejador de base de datos a utilizar para la elaboración de la Aplicación web es MySQL, debido a que se encuentra plenamente implementado en las aplicaciones web de la actualidad, además de ser fácil de utilizar, seguro y escalable para el almacenamiento de bases de datos, en especial en los servidores del policlínico, donde podrá almacenar una gran cantidad de datos sin problema alguno, únicamente siendo limitado por el espacio total del disco en el que esté instalado el servidor.

Además se seleccionó el sistema operativo Windows 10 Pro, debido a que es más conocido, siendo el más popular y distribuido es un sistema operativo que es muy compatible
con la mayoría de los programas o dispositivos que se distribuyen. Puedes jugar a infinidad de títulos con el sistema correcto debido al software y los controladores.
        3.3. Técnicas de Recolección de Datos


Para poder obtener un mayor desempeño en la investigación, es necesario recolectar información que esté relacionada con el entorno que se aplica en la empresa, en otras palabras de los problemas que se presentan en el sistema actual, para ellos se utilizó las técnicas de recolección de datos a la población de empleados en el Centro Policlínico, siendo un total como población de seiscientos ocho (608) empleados, y para el presente proyecto se tomó como muestra a cuarenta y seis (46) empleados para la aplicación de las técnicas de recolección de datos entre ellas la observación directa, revisión de documentos y encuestas de respuesta cerrada, mientras que por otro lado, se aplicaron entrevistas no estructuradas al gerente del departamento de Nómina, se tomó como muestra a las cuarenta y seis (46) personas, para recoger datos que pudieran ser cuantificados y graficados para así tener una amplia perspectiva de todos los actores involucrados.
Entrevista no Estructurada.


De acuerdo a todo lo expuesto, como primer instrumento a utilizar para recolectar datos se utilizó la entrevista no estructurada, ya que permitirá obtener información concreta por parte de los entrevistados.

La misma fue realizada a los gerentes de los departamentos de informática, nómina y sus empleados, con un tiempo de duración de quince (15) minutos. Igualmente, la cual permitió conocer las especificaciones del sistema actual y datos de La empresa Centro Policlínico Valencia C.A.


Observación Directa.


Se puede decir que la observación directa se aplicó como técnica de recolección de datos con la finalidad de conocer los métodos para el control de las asistencias de los empleados en la empresa Centro Policlínico Valencia C.A.
Se usó con el propósito de obtener información de la forma en que manejan los horarios y horas de trabajo de cada empleado en la empresa, esta técnica permitió realizar un seguimiento a las personas involucradas, en otras palabras se observó cómo se realiza el procedimiento.
Encuesta de respuesta cerrada.
Se realizaron encuestas de tipo respuesta cerrada con dos opciones de Sí y No, para recolectar datos cuantificables de los empleados que trabajan en el Centro Policlínico, con el propósito de obtener una perspectiva más profunda desde el punto de vista del empleado promedio que utiliza el sistema de control de asistencias actual, las encuestas de respuesta cerrada son mucho más sencillas de cuantificar y graficar para plasmar de forma más exacta los datos de una mayor cantidad de individuos encuestados.


        3.4. Análisis de Resultados
Luego de aplicadas las técnicas de recolección de datos, es de suma importancia que se realice un análisis de los resultados obtenidos que permitirá determinar cuán relevante ha sido la información recabada para la investigación que se está realizando. Este análisis consiste en presentar los resultados de esos datos en forma ordenada y detallada a través de la aplicación de procedimientos estadísticos y en el mismo orden que se tienen los objetivos específicos.

Siguiendo un orden de ideas, a continuación se presentan los formatos y el contenido de las técnicas de recolección de datos descritas con anterioridad, estableciendo la población a las cuales fueron aplicadas y destacando la muestra escogida por el análisis.
Cuadro N° 3: Observación Directa


Proceso Observado: Sistema de marcaje de asistencias del personal
Objetivo: Identificar las características del sistema actual de control de asistencias y la interacción de los empleados con el mismo al momento de marcar su asistencia.

Resultados Obtenidos:

Fallos gráficos constantes en el sistema, errores funcionales frecuentes, incapacidad para generar reportes, interfaz desactualizada y seguridad deficiente

Fuente: Los Autores (2022)	
Fecha: 16/08/22	
Duración: 5 Horas


Como se puede observar el cuadro Nº 3, la observación directa en el área permitió determinar la problemática en el proceso que realizan los empleados al momento de realizar el marcaje de su asistencia, debido a que el sistema actual causa inconsistencias de datos en determinadas ocasiones, en las cuales los empleados realizaban doble marcaje de movimiento por accidente, generando así dificultades al departamento de nómina al momento de realizar el conteo de las horas trabajadas extras y horas de retraso, la cual realizaban de forma manual, es por ello que se sugiere el desarrollo de una aplicación web, la misma tendrá la capacidad de permitirle realizar a los empleados un marcaje de asistencia mucho más seguro, además de reducir la inconsistencia de datos para el departamento de nómina, evitando así la presencia de errores administrativos.
Cuadro N° 4: Entrevista no Estructurada

Entrevistado: Andrea Montenegro
Cargo: Gerente de Nómina
Objetivo: Conocer cómo se llevan a cabo los procesos de gestión de los registros de asistencia de los empleados por parte del departamento de nómina
Resultados Obtenidos:
Gracias a esta entrevista se logró conocer las razones por las que esta empresa presenta pérdidas de recursos y de tiempo a la hora de gestionar los controles de asistencia de cada empleado activo
Fuente: Los Autores (2022)	Fecha: 17/08/22	Duración: 15 Minutos

¿Cómo describiría usted al sistema actual para hacer seguimiento de las asistencias del personal?
R: “El sistema actual registra satisfactoriamente las entradas y salidas de los empleados, no tenemos problemas con ello, las posibles fallas que se encontrara en los registros eran más causadas por error humano al momento de escanear más de una vez su carnet por error, o al escanear mal el carnet sin darse cuenta, sin embargo sí es cierto que al momento de hacer un seguimiento de las horas trabajadas, los retrasos, y los cálculos de horario nocturno, se tiene que hacer de forma manual por parte del personal de nómina, lo cual es un proceso muy tardado y complicado, puesto que también los propios gerentes de cada departamento deben llevar la contabilidad de las horas extras que hayan trabajado sus empleados.”

¿Cómo describiría usted la confiabilidad del programa a la hora de revisar la consistencia de los registros de movimientos de cada empleado?

R: “Hasta ahora ha estado generando algunos problemas, en especial porque el sistema no cuenta con una validación correcta para generación de movimientos, debido a que hay ocasiones en donde los empleados por algún error humano pueden marcar su asistencia dos veces, y les marca entrada y salida en el mismo momento, y deben volver a marcar entrada, sin embargo en el departamento de nómina al momento de imprimir los reportes, eliminamos esos errores de forma manual, para cada empleado, es una tarea bastante tardada ”
¿Ha encontrado alguna vez imprecisiones en los cálculos realizados de las horas trabajadas, tardanzas o ausencias?

R: “Sí, debido a que hay que realizar de forma manual las variaciones de la nómina de los empleados, y en ocasiones puede resultar en error de cálculo humano, y al ser más de 600 empleados, el proceso es bastante tardado”

¿Cómo describiría usted la funcionalidad del sistema respecto a emitir reportes de forma física y digital de manera inmediata en la empresa?

R: “Actualmente los genera bien cuando son reportes de forma masiva, es decir los reportes generales, sin embargo no cuenta con la capacidad de generarlos de forma individual por empleado, ni tampoco por departamento, cuando hay que filtrar las asistencias de los empleados por departamento, hay que ubicarlos de forma manual y separarlos manualmente, para así enviarle el reporte a los jefes de departamento, además sin contar que el sistema actual no diferencia entre los empleados activos de los inactivos, así que imprime todos los movimientos y registros de los empleados que ya no trabajan en la empresa, y eso genera una pérdida de recursos innecesaria para la clínica, también cabe destacar que los reportes generados no generaban automáticamente los cálculos de horas extras trabajadas, ni las diurnas o nocturnas, lo cual teníamos que realizar de forma manual en nómina y también los jefes de departamento llevar la cuenta de las horas de sus empleados, lo cual extiende el trabajo no sólo al departamento de nómina, sino a los demás departamentos, el llevar el conteo manual de las horas de sus empleados”

¿Considera usted que el desarrollo de un nuevo programa de marcaje para llevar el registro de asistencias del personal sería beneficioso para la empresa y el personal?

R: “Sí, cien por ciento de acuerdo con que sería muy beneficioso para la clínica y para nosotros el departamento de nómina ”
Cuadro N° 5: Encuesta de respuesta cerrada

Entrevistados: Empleados anónimos
Objetivo: Conocer cómo se refleja la problemática en los empleados promedio usando como base sus respuestas
Resultados Obtenidos:
Gracias a esta encuesta de respuesta cerrada se logró cuantificar la problemática en base a las respuestas obtenidas de los empleados del policlínico, de tal manera que se puede ver reflejada en los empleados la problemática de la ineficiencia administrativa.
Fuente: Los Autores (2022)	Fecha: 17/08/22	Duración: 5 Minutos


Cuadro N° 6: Preguntas de la encuesta

Encuesta de respuesta Cerrada	Sí	No
1- ¿Al momento de marcar su asistencia, ha tenido que esperar debido a fallas en el sistema de marcaje?	33	13
2- ¿Ha notado usted inconsistencia en los movimientos efectuados al momento de marcar asistencia? (Generar movimientos extra por
accidente)	35	11
3- ¿Al momento de realizar el marcaje de asistencia tuvo
problemas para visualizar si el movimiento se había efectuado correctamente?	30	16
4- ¿Considera usted que es más confiable el registro de asistencia del personal mediante un sistema en el cual los gerentes puedan
supervisar sus horarios y asistencias?	40	6
5- ¿Ha tenido inconsistencias relacionadas a la remuneración de sus horas extras trabajadas?	26	20
Total de encuestados	46
Fuente: los autores (2022)
Gráfico N°1: ¿Al momento de marcar su asistencia, ha tenido que esperar debido a fallas en el sistema de marcaje?



Según los resultados obtenidos en el previo gráfico, se observa que cerca de un 71.7% de las personas a quienes se les aplicó la encuesta, han tenido que esperar para poder realizar el marcaje de su asistencia, debido a fallas en el sistema de marcaje, mientras que el 28.3% restante no han experimentado esta situación, por lo que se puede obtener unos resultados claves en base al personal encuestado, siendo que la mayoría del personal encuestado ha observado al sistema de marcaje sufrir fallas que como consecuencia ha obligado a los empleados a esperar que el problema sea solventado para poder comenzar su jornada laboral.
Gráfico N°2: ¿Ha notado usted inconsistencia en los movimientos efectuados al momento de marcar asistencia? (Generar movimientos extra por accidente)

En el previo gráfico se puede observar como resultado que el 76.1% de los encuestados han observado inconsistencias en el registro de movimientos del sistema al momento de realizar el marcaje, obteniendo como resultado clave la falta de validación por parte del sistema, debido a que permite que se realice doble marcaje
Gráfico N° 3: ¿Al momento de realizar el marcaje de asistencia tuvo problemas para visualizar si el movimiento se había efectuado correctamente?



Según lo demostrado con el gráfico anterior, se puede observar que el 76.1% de los encuestados tienen problemas para visualizar si su marcaje de movimiento ha sido realizado satisfactoriamente, lo que indica que el sistema no cuenta con un diseño llamativo ni alertas que permitan al usuario confirmar con mayor facilidad su creación de movimiento.
Gráfico N°4: ¿Considera usted que es más confiable el registro de asistencia del personal mediante un sistema en el cual los gerentes puedan supervisar sus horarios y asistencias?

Se puede observar en el gráfico previamente mostrado que un 87.0% de los encuestados creen que sería más confiable el registro de asistencias mediante un sistema supervisado por los gerentes de cada departamento, lo que indica que un nuevo sistema con estas características traería beneficios a los gerentes y empleados por igual.
Gráfico N° 5: ¿Ha tenido inconsistencias relacionadas a la remuneración de sus horas extras trabajadas?



Según los resultados obtenidos con el gráfico anterior, se puede observar que el 56.5% de los encuestados afirman haber tenido inconsistencias presentes en la remuneración de sus horas extra trabajadas, lo cual indica una cantidad de empleados afectados significativa que debe ser tomada en cuenta
        3.5. Análisis de Factibilidad
En la presente fase permite viabilidad, la propuesta de la aplicación web para gestionar la asistencia y tiempo de trabajo de los empleados de la empresa, orientado a presentar soluciones viables a la problemática planteada. Para ello deben aprobarse tres (3) principales facilidades que son necesarias en la toma de decisiones para la elaboración de la misma y de esta manera obtener excelentes resultados.
En tal sentido los aspectos de factibilidad que indicarán los elementos económicos envueltos en su desarrollo para alcanzar los objetivos propuestos y desde esta perspectiva serán desglosados desde su forma técnica, operativa y económica.
Factibilidad Técnica
El estudio de la factibilidad técnica, permite indagar si los recursos existentes pueden utilizarse o complementarse. El mismo se basa en recopilar información sobre los componentes técnicos (hardware, software y recursos humanos) con los que cuenta la empresa, y los que requieren para el desarrollo de este estudio.

Por tal motivo, es necesario llevar a cabo una clasificación de todos los dispositivos que posee y requiere la empresa para poner en marcha la propuesta y así lograr optimizar los procesos solicitados. Del mismo modo, los componentes que van a ser objetos de análisis se describen en el siguiente cuadro.
Hardware Requerido
Se refiere a las características que deben cumplir los equipos en donde será implantada la aplicación, para su correcto funcionamiento.
A continuación se describe el equipo requerido para el Policlínico:

Cuadro N° 5: Hardware Requerido

Cantidad	Descripción
1	Tarjeta Madre ECS H61H2-MV
1	Regulador de Voltaje 500VA
1	Memoria RAM 4 GB DDR3 1333 MHz
1	Teclado Alfanumérico
1	Lector de códigos de barra
1	Disco Duro 1 TB HDD
1	Procesador Intel Core duo
1	Mouse
+2	Cables de conexión de red
1	Módem con acceso a internet

Fuente:Los Autores (2022)


Evaluando el hardware existente dentro de la empresa, no se requirió realizar inversión inicial para la adquisición de nuevos equipos, ni tampoco para repotenciar o actualizar los equipos existentes, ya que los mismos satisfacen los requerimientos establecidos.
Software Requerido
Comprende todo tipo de programas, lenguajes de programación, aplicaciones, sistemas operativos, bases de datos, que hacen posible que los usuarios del Centro Policlínico Valencia C.A., logren instalar el software en el servidor principal. A continuación se describe el software:

Cuadro N° 6: Software Requerido

Cantidad	Descripción
1	Sistemas Operativos Windows 10 ó Ubuntu 20.04.1
1	Python 3.10.5
1	MySQL
1	Navegador web
1	WinRar
Fuente:Los autores (2022)
Instalación Física
La instalación física de la aplicación se encuentra alojada en una computadora que haga la función de servidor dentro de la red de la empresa, con buena iluminación y acondicionada con buena ventilación para el correcto funcionamiento del mismo.
Cuadro N° 7: Espacio Físico

Fuente:Los Autores (2022)

Factibilidad Económica
La necesidad de elementos técnicos y operacionales para el desarrollo del proyecto tiene una expresión en términos económicos, el cual viene presentado un factor importante para la realización de la aplicación donde la factibilidad económica es la etapa que refleja el costo estimado del equipo y del software a utilizar. Este, debe cumplir algunos aspectos que lo caractericen como tal, deberá ser económicamente aceptable debido a que la implantación de la propuesta, se compromete al porte de beneficios tanto tangible como intangible para la empresa. Dentro del mismo se debe reflejar los puntos esenciales, los costos que originan la inversión de la aplicación. Este es quizás, uno de los aspectos importantes, que se debe cumplir por un equipo que proporcione un buen nivel de seguridad, un mínimo costo para la empresa.
Cuadro N° 8: Inversión Económica

Descripción	Costo en Bs.S	Dólar
Estadounidense
Servicio de Mantenimiento	410,00	50,00
Costo del programa propuesto	2460,00	300,00
Total en Bs.:	2870,00	350,00
Fuente:Los Autores (2022)
Al momento de la impresión de este documento, la tasa de cambio del Banco Central de
Venezuela se encontraba en 8,2 Bs por dólar Estadounidense.


Factibilidad Operativa
La factibilidad operativa permite predecir si se pondrá en marcha el sistema propuesto, aprovechando los beneficios que ofrece, a todos los usuarios involucrados con el mismo, ya
sean los que interactúan en forma directa con este, como también aquellos que reciben información producida por la aplicación. Por otra parte, el correcto funcionamiento del sistema en cuestión, siempre estará sujeto a la capacidad de los empleados encargados de dicha tarea.

Esta parte del estudio de factibilidad involucra a todas las personas que se verán envueltas en el manejo de la aplicación, y a través de este estudio se determinó la funcionalidad y aceptación de los usuarios que están involucrados en la manipulación de la aplicación propuesta; porque los mismos poseen conocimientos básicos de computación, y presentan buena disposición con respecto al adiestramiento para el manejo de la propuesta. Cabe decir que se deben realizar programas de adiestramiento, para que los involucrados en el manejo de la aplicación, aprendan a usarla de la mejor manera y aprovechar todos los beneficios que esta proporciona.

        3.6. Análisis D.O.F.A
El Análisis DOFA también conocido como Matriz DOFA, es una metodología de estudio de la situación de una empresa o un proyecto, analizando sus características internas (Debilidades y Fortalezas) y su situación externa (Amenazas y Oportunidades) en una matriz cuadrada.

Es una herramienta para conocer la situación real en que se encuentra una organización, empresa o proyecto, y planificar una estrategia de futuro.

Cabe destacar, que debido a la facilidad de aplicación del análisis D.O.F.A, este también se utiliza ampliamente para estudiar problemas técnicos críticos en áreas muy distintas para la cual fue diseñado inicialmente, es así como se aplica con éxito en procesos de planta, logística, penetración de mercados, estructuración empresarial, aplicación de políticas internas, nuevas inversiones, implementación de procesos, evaluación de tecnologías y muchos temas más.

Esta herramienta de estudio, permite conocer de manera general y específica la situación de una organización o sistema con la finalidad de poder establecer un conjunto de actividades y estrategias que permitan poner en práctica la mejora.
Es por eso que durante el desarrollo de la investigación, que es factor importante en este proyecto, es utilizado la modalidad de análisis D.O.F.A, a continuación las fortalezas, debilidades, amenazas y oportunidades tanto del proceso actual, como del propuesto.
Cuadro N° 9: Análisis D.O.F.A del sistema Propuesto

Fortalezas:
    • Diseño interactivo y fácil de usar
    • Sistema automatizado
    • Diseño amigable para el usuario
    • Sistema de seguridad robusto con contraseñas cifradas
    • Cuenta con diferentes filtros para generar reportes filtrados.
    • El sistema es escalable en el tiempo y fácil de actualizar
    • Al ser una aplicación web, sólo requiere instalarse una vez en el servidor
    • Cuenta con diseño responsivo
    • Para utilizarse sólo hace falta tener un navegador web
    • Consume pocos recursos	Debilidades:
    • Depende de las conexiones de red para que este funcione correctamente
    • Depende	del	correcto funcionamiento de la computadora en el que esté alojado el servidor
Oportunidades:
    • Cuenta con instalaciones en óptimas condiciones
    • Personal experimentado
    • Mejora al sistema actual
    • El sistema puede ser actualizado en el futuro	Amenazas:
    • Ineficiencia del suministro eléctrico al servidor
    • Virus informático
Fuente: Los autores (2022)
Cuadro N° 10: Análisis D.O.F.A del sistema Actual

Fortalezas:
    • Consume pocos recursos
    • No depende de una conexión a una red
    • fácil de utilizar
    • Sistema semi automatizado	Debilidades:
    • No posee filtros para la generación de reportes personalizados
    • Depende	del	correcto funcionamiento de la computadora en el que esté alojado
    • No es compatible con los sistemas operativos modernos
    • El cálculo de horas extra y retrasos de los empleados debe hacerse manual
    • Interfaz gráfica antigua y poco amigable para el usuario
    • Carece de seguridad
Oportunidades:
    • Personal experimentado
    • Cuenta con instalaciones en óptimas condiciones	Amenazas:
    • Ineficiencia del suministro eléctrico en la computadora en la que se aloja
    • Virus informático

Fuente: Los autores (2022)
CAPÍTULO IV


LA PROPUESTA


        4.1 Descripción del Sistema actual

En el presente capítulo se puntualizan los procesos de control de asistencia del personal del Centro Policlínico Valencia C.A., Valencia Estado Carabobo. Con la finalidad de evaluar los pasos y procedimientos llevados a cabo para la correcta administración de los movimientos de los empleados dentro de la empresa.
De este modo, generalmente el proceso que se lleva a cabo comienza cuando el personal entra en la clínica, se dirigen a la zona de seguridad, sacan su carnet de identificación que cuenta con un código de barra, posteriormente escanean el código del carnet con un lector de códigos de barra que se encuentra conectado a la computadora con el sistema, el sistema marca la entrada del empleado a la hora exacta, y a continuación el empleado se dirige a su respectiva zona de trabajo.
Después, una vez llegada la hora de salida de los empleados, estos deben volver a pasar por la zona de seguridad de la clínica, para escanear los códigos de barra impresos en su carnet de identificación, para que de esta manera el sistema marque su hora de salida a la hora exacta.
Asimismo, luego de 15 días el personal del departamento de nómina se dirige hacia la zona de seguridad donde se encuentra instalado el programa y generan un reporte general de todos los empleados y sus movimientos de entrada y salida, para de esta manera, ir anotando de forma manual en la hoja impresa del reporte, las horas trabajadas de cada empleado dentro del rango de fechas establecido, además de también calcular el número de horas extras y retrasos de cada empleado, utilizando una calculadora y anotando en lápiz y papel a los más de 600 empleados, y clasificándolos por departamento de forma manual, filtrando las inconsistencia de datos.
En este sentido, se puede decir que los diagramas de casos de uso se utilizan para ilustrar los procedimientos que se puedan llevar a cabo, al mostrar cómo reacciona una respuesta a
eventos que se producen en el mismo proceso que se lleva a cabo. Es por ello que seguidamente se presentan los diagramas.
Asimismo, el diagrama mostrará la relación entre los actores y los casos de uso del sistema, es decir la conexión entre los elementos que interfieren en el proceso con la finalidad de crear un modelo sustentable para la aplicación de la propuesta.



Cuadro N° 11: Diagrama de Casos de uso sistema de marcaje de asistencias actual

Fuente: Los Autores (2022)
Cuadro N° 12 Diagrama de Casos de Uso del sistema propuesto

Fuente: Los autores (2022)

        4.2 Descripción de la Propuesta
La presente propuesta pretende funcionar como una herramienta que permita agilizar, controlar y mejorar la gestión de los movimientos de entrada y salida del personal, así como sus inasistencias, horarios, departamentos asignados y la capacidad de brindarle al gerente de cada departamento un panel administrativo donde pueda permanecer alerta en cuanto a las asistencias de su personal y sus estados. Dicha solicitud fue llevada a cabo por la Gerencia del departamento de informática en conjunto con la Gerencia del departamento de Nómina que trabajan en el Centro Policlínico Valencia C.A.
Por otra parte, fueron aplicadas las cuatros (04) fases de la Metodología RUP, como la metodología del proyecto, como se explica a continuación:
Fase 1: Preparación Inicial

En esta fase, se establecieron los alcances, enlaces, metas y perfiles de los usuarios de la aplicación web propuesta donde el propósito principal es el control de entradas, salidas y horarios de los empleados del Centro Policlínico Valencia C.A., así como la generación de reportes personalizables para el departamento de nómina, tomando en cuenta así los requerimientos generales para poder dar inicio a la elaboración de la aplicación web propuesta.
Fase 2: Preparación detallada

En esta fase se tomó la mayor parte de los requerimientos principales de la aplicación web, y se recopiló la información necesaria para realizar un plan de construcción de la misma, que permitirá solventar la problemática actual de dicha empresa.
Fase 3: Construcción

En esta tercera fase se aplica la prueba de la aplicación propuesta, utilizando el plan de entonación y afinación de la metodología; para garantizar confiabilidad y seguridad en la información generada. El mismo está constituido por las pruebas de diseño, de validación, seguridad, rendimiento y de plataforma.
Fase 4: Transición

El objetivo principal es realizar la aplicación web propuesta para el Centro Policlínico Valencia C.A., el cual será de ayuda para mantener un control de asistencias del personal, y además de facilitar el proceso de gestión de cargos y horarios ajustándose a las necesidades del departamento de nómina en cuanto al tiempo y acceso del mismo para el usuario, una vez realizadas las pruebas, ajustes y correcciones que sean requeridos.


Objetivos de la Propuesta

De acuerdo con lo antes mencionado, la importancia de contar con una aplicación web capaz de utilizarse en cualquier dispositivo y sistema operativo con acceso a un navegador
web, es facilitar la forma de administrar y gestionar a los empleados y sus asistencias, con sus horas trabajadas y los cálculos que conlleva, es por ello que para el desarrollo de esta propuesta se trazan una serie de objetivos como lo son el objetivo general de la propuesta y los objetivos específicos, los cuales se muestran a continuación.
Objetivo General

Desarrollar una aplicación web para el marcaje de las asistencias del personal del Centro Policlínico Valencia C.A., Valencia, Estado Carabobo. para mejorar la fluidez a la gestión de movimientos de los empleados mediante el uso del sistema propuesto.
Objetivos Específicos

    • Mostrar los movimientos del personal de forma directa al usuario y registrarlos en una base de datos.
    • Diseñar una interfaz responsiva que pueda ser visualizada en un dispositivo móvil

    • Mejorar la precisión del control de entrada, salida y horarios del personal

Beneficios de la Propuesta
Se puede decir que los beneficios serán todas aquellas características que favorecerán a la persona o empresa, dadas por algún evento en particular. Es importante mencionar que el sistema propuesto cuenta con una serie de beneficios, los cuales se describen a continuación:

        ◦ La optimización de los procesos de control de asistencias del personal de la clínica
        ◦ Mejor control, gestión de los horarios y cálculos de horas extras y retrasos
        ◦ Ofrecer un diseño amigable y llamativo para los empleados, para que de esta manera puedan visualizar correctamente al momento de realizar un movimiento en el sistema
        ◦ Alta satisfacción de los Usuarios del sistema gracias a que verán automatizadas sus tareas, pudiendo realizarlas eficientemente y en menos tiempo
        ◦ Capacidad de acceder al sistema mediante cualquier dispositivo conectado a la red, incluido teléfonos móviles
        ◦ Ahorro de recursos de la empresa, debido a que los reportes pueden ser filtrados de forma preciosa para evitar la pérdida de hojas al momento de imprimir un reporte
Requerimiento de la Propuesta
Se puede decir, que al mismo tiempo, el desarrollo de una aplicación se debe presentar una serie de aspectos, que contribuya con ciertas mejoras los cuales serán presentados por los usuarios del mismo, cabe decir que los procedimientos que se impartan, parten de las necesidades actuales y futuras de información que la nueva aplicación web va a satisfacer

A continuación se muestran los requerimientos de diseño, base de datos y seguridad para llevar a cabo el desarrollo de la aplicación.

Requerimiento del Diseño
Para apreciar de una manera más detallada la visualización del aplicación, se necesita una resolución de monitor especial que a continuación se presenta:


Cuadro N° 13: Resolución de la pantalla

Colores	Área de pantalla

Resolución de colores: Mínimo 256 Colores 8 bits.	
Tamaño mínimo de pantalla: 1360 x 768 píxeles para monitores

Resolución de colores: Mínimo 256 Colores 8 bits.	
Tamaño mínimo de pantalla: 320 x 550 píxeles para dispositivos móviles
Fuente: Los Autores (2022)


Fuentes Utilizadas
En este punto se muestra el color, tipo o estilo de fuente (letra), que se utilizará dentro de la aplicación web, con sus respectivos tamaños y colores que el Centro Policlínico Valencia
C.A. quiere implementar para el desarrollo del sistema. A continuación se describen las siguientes:

Cuadro N° 14: Fuentes
Descripción de fuentes

Fuente	Tamaños	Estilo	Color	Uso

Montserrat	
10px - 20px	
Normal	Blanco


	
Textos y Títulos

Monserrat	
14px	
Negrita	Azul pastel


	
Hipervínculos
Fuente: Los autores (2022)


Colores de la Aplicación
Se refiere al color, muestra y uso de fuente a utilizar dentro de las páginas de la aplicación.
A continuación se describe las siguientes:



Cuadro N° 15 Colores utilizados en la aplicación

Color	Muestra	Estilo
Blanco	
	Icónos y Logotipos
Azúl oscuro	
	Fondo
Naranja	
	Barra de navegación superior
Gris claro	
	Cajas de texto
Fuente: Los Autores (2022)
Logotipo
El logotipo fue utilizado del original, que es el emblema de la empresa.
Cuadro N° 16 Logotipo de la aplicación

Fuente: Centro Policlínico Valencia C.A (2022)
Descripción de la Aplicación
La aplicación web para el Centro Policlínico Valencia C.A. en Valencia, Estado Carabobo, está orientada a la optimización del control de asistencias del personal y a su vez brindar comodidad a los usuarios otorgándoles un sistema automatizado que sea capaz de mejorar la gestión de movimientos y horarios de los empleados.

Para el proyecto propuesto se realizó un estudio previo de todos los procesos y planteamiento de la empresa, obteniendo así un perfil completo de los pasos a seguir para la gestión de asistencias del personal del policlínico, reduciendo al máximo el margen de errores en la realización de la misma, logrando que se desarrollara de una manera eficaz.

Cabe destacar, que la aplicación web cuenta con funciones de seguridad que permite a los gerentes de departamento del Centro Policlínico Valencia C.A., Valencia, Estado Carabobo, acceder a un panel de administrador en el cual podrá gestionar y supervisar la información y movimientos de sus empleados, por medio de un nombre de usuario y una contraseña, se restringe la entrada de usuarios no autorizados al manejo de la información, asimismo cuenta con tres (3) niveles jerárquicos de usuarios, sin embargo también cuenta con un sistema de permisos y grupos de permisos personalizables para cada usuario, para que de esta forma los administradores puedan regular al resto de usuarios dependiendo de sus necesidades, obteniendo así un completo control de la seguridad
Seguridad de la Propuesta
Dado que el realizar una aplicación con base de datos es de gran importancia para una organización o empresa por la información que se almacena, también trae como consecuencia la necesidad de preservar la seguridad en la misma.

Por lo tanto, el desarrollo de esta aplicación se tiene como medidas de seguridad un control de acceso para administradores del programa, además se contará con medios de seguridad como la encriptación de las contraseñas almacenadas en la base de datos, además cuenta con medidas de protección web como el token CSRF, el cual mejora la seguridad porque permite validar que las solicitudes son generadas desde el sitio web autorizado y no desde otras fuentes, y por último también cuenta con protección frente a métodos de infiltración de datos como el SQL injection.

Mapa del Sistema
El objetivo del diseño de la aplicación es facilitar el control de las asistencias del personal de la empresa, por ejemplo, poder consultar los horarios de los empleados, las horas trabajadas y horas de retraso en un lapso de tiempo definido por el usuario, o gestionar el estatus del empleado dentro de la empresa.
Cuadro N° 17: Mapa de la aplicación
Fuente: Los Autores (2022)
Modelo Entidad Relación
Para poder establecer una buena seguridad e integridad de la información que será manejada y almacenada por la aplicación propuesta, es necesario establecer las relaciones que guardan las diferentes tablas que conforman la base de datos, esto para evitar la redundancia de la data y lograr un mejor desempeño en lo que respecta a la eficiencia de la base de datos, más adelante se presenta el cuadro que conforma el modelo entidad relación.
Cuadro N° 18 Modelo Entidad-Relación

Cuadro N° 19: Diccionario de Datos, tabla auth_group

Nombre de la base de datos	marcaje
Nombre de la tabla	auth_group
Descripción	Almacena los datos relacionados a los grupos de permisos
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	int(11)	No	
name	varchar(150)	No	
Fuente: Los autores (2022)
Cuadro N° 20: Diccionario de Datos, tabla auth_group_permissions

Nombre de la base de datos	marcaje
Nombre de la tabla	auth_group_permissions
Descripción	Tabla que realiza la conexión entre la tabla de permisos, y la tabla de grupos
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
group_id	int(11)	No	auth_group -> id
permission_id	int(11)	No	auth_permission -> id
Fuente: Los autores (2022)

Cuadro N° 21: Diccionario de Datos, tabla auth_permissions

Nombre de la base de datos	marcaje
Nombre de la tabla	auth_permissions
Descripción	Almacena los datos relacionados a los permisos dentro de la aplicación
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
name	varchar(255)	No	
content_type_id	int(11)	No	django_content_type -> id
codename	varchar(100)	No	
Fuente: Los autores (2022)
Cuadro N° 22: Diccionario de Datos, tabla auth_user

Nombre de la base de datos	marcaje
Nombre de la tabla	auth_user
Descripción	Almacena los datos relacionados al ingreso al sistema por parte del usuario
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	int(11)	No	
password	varchar(128)	No	
last_login	datetime(6)	Sí	
is_superuser	tinyint(1)	No	
username	varchar(150)	No	
first_name	varchar(150)	No	
last_name	varchar(150)	No	
email	varchar(254)	No	
is_staff	tinyint(1)	No	
is_active	tinyint(1)	No	
date_joined	datetime(6)	No	
Fuente: Los autores (2022)

Cuadro N° 23: Diccionario de Datos, tabla auth_user_groups

Nombre de la base de datos	marcaje
Nombre de la tabla	auth_user_groups
Descripción	Realiza la conexión entre la tabla de usuarios con la tabla de grupos
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
user_id	int(11)	No	auth_user -> id
group_id	int(11)	No	auth_group -> id
Fuente: Los autores (2022)

Cuadro N° 24: Diccionario de Datos, tabla auth_user_user_permissions

Nombre de la base de datos	marcaje
Nombre de la tabla	auth_user_user_permissions
Descripción	Realiza la conexión entre la tabla de usuarios con la tabla de permisos
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
user_id	int(11)	No	auth_user -> id
permission_id	int(11)	No	auth_permission -> id
Fuente: Los autores (2022)

Cuadro N° 25: Diccionario de Datos, tabla django_admin_log

Nombre de la base de datos	marcaje
Nombre de la tabla	django_admin_log
Descripción	almacena las acciones de los usuarios administradores
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	int(11)	No	
action_time	datetime(6)	No	
object_id	longtext	Sí	
object_repr	varchar(200)	No	
action_flag	smallint(5)	No	
change_message	longtext	No	
content_type_id	int(11)	Sí	django_content_type -> id
user_id	int(11)	No	auth_user -> id
Fuente: Los autores (2022)
Cuadro N° 26: Diccionario de Datos, tabla django_content_type

Nombre de la base de datos	marcaje
Nombre de la tabla	django_content_type
Descripción	Almacena los datos relacionados a los modelos para generar los nombres de las tablas en la base de datos
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	int(11)	No	
app_label	varchar(100)	No	
model	varchar(100)	No	
Fuente: Los autores (2022)

Cuadro N° 27: Diccionario de Datos, tabla django_migrations

Nombre de la base de datos	marcaje
Nombre de la tabla	django_migrations
Descripción	Almacena los datos relacionados a las migraciones hechas del código de los modelos
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
app	varchar(255)	No	
name	varchar(255)	No	
applied	datetime(6)	No	
Fuente: Los autores (2022)
Cuadro N° 28: Diccionario de Datos, tabla django_session

Nombre de la base de datos	marcaje
Nombre de la tabla	django_session
Descripción	Almacena los datos relacionados a las sesiones de los usuarios al abrir la aplicación
Columna	Tipo	Nulo	Enlaces a
session_key
(Primaria)	varchar(40)	No	
session_data	longtext	No	
expire_date	datetime(6)	No	
Fuente: Los autores (2022)

Cuadro N° 29: Diccionario de Datos, tabla marcaje_cargo

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_cargo
Descripción	Almacena los datos relacionados a los cargos que hay disponibles en la empresa
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
descripcion	varchar(40)	No	
Fuente: Los autores (2022)
Cuadro N° 30: Diccionario de Datos, tabla marcaje_departamento

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_departamento
Descripción	Almacena los datos relacionados a los departamentos que existen en la empresa
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
nombre	varchar(100)	No	
Fuente: Los autores (2022)

Cuadro N° 31: Diccionario de Datos, tabla marcaje_departamento_usuario

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_departamento_usuario
Descripción	Realiza la conexión entre la tabla de departamento con la tabla de usuarios
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
departamento_id	bigint(20)	No	marcaje_departamento -> id
user_id	int(11)	No	auth_user -> id
Fuente: Los autores (2022)
Cuadro N° 32: Diccionario de Datos, tabla marcaje_empleado

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_empleado
Descripción	Almacena los datos relacionados a los empleados que trabajan en la empresa
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
ficha	varchar(8)	No	
cedula	varchar(8)	No	
primer_nombre	varchar(80)	No	
segundo_nombre	varchar(80)	No	
primer_apellido	varchar(80)	No	
segundo_apellido	varchar(80)	No	
telefono	varchar(11)	Sí	
direccion	varchar(250)	No	
fecha_nacimiento	date	No	
fecha_ingreso	date	No	
foto	varchar(100)	Sí	
sexo	varchar(15)	No	
cargo_id	bigint(20)	No	marcaje_cargo -> id
departamento_id	bigint(20)	No	marcaje_departamento -> id
estatus_id	bigint(20)	No	marcaje_estado -> id
horario_id	bigint(20)	No	marcaje_horario -> id
Fuente: Los autores (2022)
Cuadro N° 33: Diccionario de Datos, tabla marcaje_estado

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_estado
Descripción	Almacena los datos de los posibles estados que puede tener un empleado dentro de la empresa
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
descripcion	varchar(40)	No	
Fuente: Los autores (2022)

Cuadro N° 34: Diccionario de Datos, tabla marcaje_evento

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_evento
Descripción	Almacena los datos relacionados a días feriados o no laborales
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
descripcion	varchar(40)	No	
fecha_inicio	date	No	
fecha_final	date	Sí	
tipo	varchar(1)	No	
Fuente: Los autores (2022)
Cuadro N° 35: Diccionario de Datos, tabla marcaje_horario

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_horario
Descripción	Almacena los datos relacionados a los horarios de trabajo que puede tener un empleado
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
descripcion	varchar(20)	No	
turno	varchar(15)	No	
hora_entrada	time(6)	No	
hora_salida	time(6)	No	
hora_receso	time(6)	No	
hora_fin_receso	time(6)	No	

Fuente: Los autores (2022)

Cuadro N° 36: Diccionario de Datos, tabla marcaje_movimiento

Nombre de la base de datos	marcaje
Nombre de la tabla	marcaje_movimiento
Descripción	Almacena los datos relacionados a los movimientos de entrada, salida o ausencia de un empleado
Columna	Tipo	Nulo	Enlaces a
id (Primaria)	bigint(20)	No	
movimiento	varchar(40)	No	
fecha	datetime(6)	No	
empleado_id	bigint(20)	No	marcaje_empleado -> id
Fuente: Los autores (2022)
ARQUITECTURA DE CONEXIONES

Figura N° 1: Modelo Vista Plantilla

Fuente: los autores (2022)

Django utiliza como patrón de arquitectura de software el Modelo, Vista, Plantilla, cuyo funcionamiento consiste en utilizar el todo el framework como controlador para procesar peticiones provenientes de un navegador web, las cuales son enviadas a través de una URL mediante peticiones HTTP, el cual estará asociado a una Vista, la cual, en caso de ser necesario, solicitará datos al Modelo que a su vez genera una consulta a la base de datos, con los datos recibidos serán enviados a la Plantilla para ser mostrada al usuario a través de su navegador web.
DESCRIPCIÓN DE PANTALLAS
Figura N° 2: Inicio De Sesión


Abrir el navegador e ingresar en la barra de búsqueda la dirección url en la que el servidor esta hosteado, se mostrará la pantalla de inicio de sesión en la cual se introduce el usuario y contraseña asignado en su campo correspondiente, según los permisos tendrá habilitadas ciertas funciones dentro de la página principal del marcaje
Pantalla Principal
La vista de esta pantalla varía según el tipo de usuario que haya iniciado sesión:
    1. Súper Usuarios
Los súper usuarios tienen todos los permisos dentro del sistema, pueden acceder a realizar reportes, acceder al panel de administrador con todos los permisos posibles, y realizar marcaje.
Figura N° 3: Pantalla Principal


Fuente: Los autores (2022)
    2. Usuario Supervisor
Los supervisores pueden ver únicamente los empleados que le corresponden a sus departamentos asignados, pueden acceder a la pantalla de reportes y a la pantalla de panel de administrador, pero no tienen permisos de realizar marcaje.
Figura N° 4: Pantalla principal de un Gerente


Fuente: Los autores (2022)
    3. Seguridad
Los Usuarios de Seguridad, no poseen permisos para acceder a las pantallas de Reportes, ni al panel de administrador, sin embargo sí pueden realizar marcaje, además no cuentan con el cerrado de sesión automático por inactividad
Figura N° 5: Pantalla principal del Personal de Seguridad


Fuente: Los autores (2022)
Este usuario en la barra superior tiene restringida la entrada al administrador del marcaje y a generar reportes, solo teniendo permitido registrar los movimientos con el escáner
Figura N° 6: Botones de la pantalla principal


Fuente: Los autores (2022)
    1. Entrada al panel de administrador
    2. Entrada a la pantalla de generador de reportes
    3. Cerrar Sesión
Figura N° 7: Entrada de datos para el escáner (cédula de empleados)


Fuente: Los autores (2022)

Panel administrativo
Súper usuarios
Los super usuarios tienen todos los permisos permitidos dentro del sistema, desde poder administrar la creación de permisos y otros usuarios en el sistema, hasta la administración de los registros de la base de datos, cuentan con la capacidad de agregar, modificar, eliminar y visualizar.

Figura N° 8: Panel de Administrador del Súper Usuario


Fuente: Los autores (2022)

Figura N° 9: Botones de la barra de navegación superior


Fuente: Los autores (2022)
    1. Página principal del Panel de administrador
    2. Página principal de Marcaje
    3. Página de generador de reportes
    4. Página de cambio de contraseña
    5. Cerrar sesión
Modelos


Figura N° 10: Modelo de Cargos


Fuente: Los autores (2022)
Figura N° 11: Pantalla de Modelo de Departamentos


Fuente: Los autores (2022)

Figura N° 12: Pantalla de Modelo de Empleados

Fuente: Los autores (2022)

Figura N° 13: Pantalla de Modelo de Estados



Figura N° 14: Pantalla de Modelo de Eventos

Figura N° 15: Pantalla de Modelo de Horarios


Figura N° 16: Pantalla de Modelo de Movimientos

Asimismo, al ingresar a la pantalla de agregar usuarios nuevos, estos deben ingresar el nombre de usuario y una contraseña segura, que cumpla con los requisitos que se muestra en la siguiente captura:

Figura N° 17: Pantalla de Agregar usuario

Una vez que un usuario nuevo es agregado, inmediatamente se envia a la pantalla de gestión de usuario, en la cual se pueden agregar y alterar los permisos y datos relacionados al usuario en cuestión:
Figura N° 18: Pantalla de Modificar usuario (1)


Se pueden agregar un correo electrónico, así como un nombre y apellido, y los permisos y el estado del usuario, si se encuentra activo o inactivo, la pantalla de gestión de permisos es la siguiente:
Figura N° 19: Pantalla de Modificar Usuario (2)


Figura N° 20: Pantalla de Modificar Usuario (3)

Al darle el permiso de staff a un usuario, este podrá tener acceso al panel de administrador, de otra manera no podrá entrar, luego los demás permisos se pueden observar que se pueden añadir permisos especiales para un usuario en concreto, y a su vez, se le puede añadir un grupo de permisos creado previamente a un usuario, esos grupos de permisos pueden ser compartidos con otros usuarios además del actual.
Los permisos se dividen entre los permisos genéricos de gestión de datos de las bases de datos, que constan en permisos de “puede añadir”, “puede cambiar”, “puede eliminar”, “puede ver”, cada tipo de permiso asociado a cada Modelo diferente para la alteración de registros de la base de datos.

Figura N° 21: Pantalla de gestión de permisos


Fuente: Los autores (2022)
por otro lado, se encuentran permisos especiales, los cuales son los siguientes:
    • Puede cambiar estatus de empleados: Es un permiso que permite a los usuarios el poder cambiar al campo de “Estatus” de los empleados, está diseñado para aquellos usuarios que NO tienen permitido cambiar los datos de los empleados, pero que sí pueden cambiar su Estatus actual (Activo, Inactivo, Vacaciones, Reposo), como por ejemplo un supervisor de departamento.
    • Puede ver todos los empleados: Es un permiso que permite al usuario poder visualizar todos los empleados y todos los movimientos, mientras que los usuarios que NO cuentan con este permiso, únicamente verán los empleados asociados a su departamento.
    • Puede realizar Marcaje: Este permiso está diseñado para habilitar la entrada de datos en la pantalla de marcaje, es decir, permite al usuario poder crear movimientos mediante la pantalla principal de marcaje, mientras que aquellos que no cuenten con este permiso, no podrán.

Figura N° 22: Permisos de usuario para el personal de seguridad


finalmente, una vez terminado de configurar los permisos de un usuario y sus datos correspondientes, se hace click en el botón de “Guardar”
Figura N° 23: Permisos de supervisor genérico

Fuente: Los autores (2022)
A continuación se explica el funcionamiento de las pantallas de los modelos, el funcionamiento es exactamente igual para cada Modelo:

Figura N° 24: Señalización de botones para administradores

    1. Permite expandir y contraer la barra de navegación lateral
    2. Nombre de los Modelos, se le puede dar click para acceder a la gestión de registros que posee ese Modelo.
    3. Nombre y datos del registro, puede ser clickeado para ser visualizado más a detalle, en caso de tener permisos de modificación, podrán ser modificados los datos.
    4. Información de la cantidad de empleados asociados a dicho departamento, se le puede dar click, y mostrará a los empleados relacionados.
    5. Selector de acciones, la única acción disponible es la de eliminación de registros, cuando se le da al botón ejecutar que tiene al lado del selector, eliminará los registros que hayan sido seleccionados mediante el marcador a la izquierda de cada registro.
    6. Barra de búsqueda que filtra los resultado de búsqueda de los registros en base a los datos asociados al registro, en el caso de departamento sólo puede filtrarlos por nombre, sin embargo en el modelo de Empleados, se pueden filtrar por ficha, cédula, primer nombre, primer apellido, departamento, horarios, estatus.
    7. Permite entrar a la pantalla de agregar un nuevo registro.
    8. permite ir mostrando el resto de registros mediante los botones de paginación.
Al darle click al nombre de un departamento (3), se abrirá la pantalla de Visualización o Modificación de datos del respectivo registro.

Figura N° 25: Señalización de gestión de usuarios para Gerentes

    1. Usuarios Disponibles: es el recuadro que contiene a todos los usuarios registrados en el sistema, y que NO están relacionados al departamento que está siendo visualizado.
    2. Usuarios seleccionados: es la lista de usuarios asociados al departamento, los usuarios que estén relacionados al departamento, podrán ver los empleados y movimientos del departamento.
    3. Los usuarios disponibles, pueden ser seleccionados con un click, y en caso de hacer doble click, serán asociados al departamento.
    4. Botón de agregar usuario, es un atajo que envía a la pantalla de añadir nuevo usuario, sólo disponible para aquellos que tengan el permiso de agregar usuarios.
    5. Seleccionar todos: permite seleccionar todos los usuarios con un solo click y asociarlos al departamento.
    6. Permite eliminar la asociación de todos los usuarios que estén presentes en el recuadro de usuarios seleccionados.
    7. Botones que permiten el movimiento de los usuarios seleccionados.
Usuarios supervisor
Los supervisores sólo tienen acceso a visualizar los empleados y departamentos a los que fue asociado el usuario, además sólo pueden visualizar, sin embargo no pueden modificar nada más allá que el estatus de los empleados de su departamento.

Figura N° 26: Pantalla de panel de administrador para un gerente

Al darle click a la ficha del empleado, el supervisor podrá acceder al registro del empleado, y podrá alterar el estatus de sus empleados.

Figura N° 27: Modificación de un estatus de empleado con usuario de gerente


Panel de Reportes
Pantalla de Reportes: Este es el lugar principal para generar los reportes, aquí se encuentran las opciones para determinar el tipo de reporte, el periodo de fecha, un botón de “visualizar todo” que muestra el reporte de todos los departamentos y empleados en la fecha especificada, y por último, una tabla de datos, la cual se activa cuando se escoja el tipo de reporte.

Figura N° 28: Pantalla de panel de reportes

Fuente: Los autores (2022)
Figura N° 29: Botones pantalla de reporte


Fuente: Los autores (2022)
    1. Página principal del Panel de administrador
    2. Página principal de Marcaje
    3. Cerrar Sesión

Figura N° 30: Señalización de botones en panel de reportes


Fuente: Los autores (2022)
Filtro para el reporte: Aquí se encuentran las distintas opciones para sacar un reporte, las cuales son:
    1. Tipo de reporte: Es una lista desplegable la cual contiene dos opciones funcionales:
Empleados: Muestra la tabla de datos de todos los empleados, incluyendo Cédula, Ficha, Apellidos y Nombres y Acción.

Figura N° 31: Tabla de datos de empleados para reportes individuales

Fuente: Los autores (2022)
Departamento: Muestra la tabla de datos de los departamentos, incluyendo el ID, Nombre y acción.

Figura N° 32: Tabla de datos de departamentos para reportes por departamento


Fuente: Los autores (2022)
    2. “Desde”: Esta es la fecha más anterior en la que se quieran mostrar los movimientos.
    3. “Hasta”: Esta es la fecha más próxima en la que se quieran mostrar los movimientos, aquí una imagen de ejemplo de las dos fechas introducidas para su correcto funcionamiento:

Figura N° 33: Selectores de rangos de fechas

Fuente: Los autores (2022)
    4.  Empleados Activos: Botón por el cual se muestra la cantidad de empleados activos en la clínica, cabe destacar que para que este botón funcione se necesitan tener la fecha “Desde” y “Hasta” ingresadas.
    5. Reporte General: Botón por el cual se muestra la cantidad de empleados activos en la clínica junto con sus horas trabajadas, horas extras diurnas y horas extras nocturnas, cabe destacar que para que este botón funcione se necesitan tener la fecha “Desde” y “Hasta” ingresadas, además de que los mismos influyen en los cálculos de las horas.
Figura N° 34: Reporte general de los empleados y sus horarios

Fuente: Los autores (2022)

Figura N° 35: Reporte general con el resumen de cada empleado

Fuente: Los autores (2022)

Figura N° 36: Reporte de empleado individual










Fuente: Los autores (2022)
Figura N° 37: Reporte por departamento

Fuente: Los autores (2022)
Seguridad del Sistema

Hasta el momento se ha presentado una aplicación web que ofrece el acceso a un conjunto de información que es de suma importancia para la empresa, sin embargo en determinadas circunstancias es interesante poder limitar el acceso a la modificación o eliminación de registros de las diferentes tablas de la base de datos, para que pueda acceder únicamente los usuarios autorizados a realizar dichas acciones.

Asimismo, se maneja un concepto fundamental, la autenticación (garantizar que el usuario esté registrado en el sistema y tenga acceso al mismo). Se establece la restricción de acceso a aquellos que no tengan un usuario registrado, que a su vez las contraseñas contenidas en la base de datos, se encontrarán encriptadas para reforzar la seguridad, además los usuarios de tipo “staff” tendrán un periodo de expiración para su sesión por inactividad, en caso que un usuario se olvide de cerrar sesión, la misma se cerrará automáticamente luego de pasados 15 minutos de inactividad.
Por otro lado, la aplicación también cuenta con una protección token CSRF la cual mejora la seguridad porque permite validar que las solicitudes son generadas desde el sitio web autorizado y no desde otras fuentes.

Además, el sistema también cuenta con una protección frente al SQL injection, para proteger la base de datos de posibles ataques externos que utilicen este método de infiltración de código.

RECOMENDACIONES

Para el mejor funcionamiento de la aplicación y Proteger la información en ella, se recomienda lo siguiente:

    • Asegurarse que los empleados lleven consigo su carnet de identificación con el código de barras para realizar el marcaje en la aplicación.
    • Realizar copias de la información periódicamente y resguardo en un lugar seguro hasta que pierda validez, para poder recuperar la información en caso de pérdida.
    • Es conveniente que la clave de acceso se modifique con frecuencia para de esta forma reforzar la seguridad de la aplicación y minimizar el riesgo de acceso no autorizado.
    • Capacitar a los usuarios de la empresa para que puedan utilizar cada uno de los componentes de la aplicación.
    • Los usuarios que tengan acceso al panel de administrador se les recomienda cambiar sus contraseñas por lo mínimo cada 180 días, para mantener la seguridad e integridad del sistema
    • Se recomienda que las contraseñas tengan combinaciones de mayúsculas, minúsculas, números y caracteres especiales, con longitudes mayores a 8 caracteres
FERENCIAS BIBLIOGRÁFICAS

Espino. A. (2018). con su estudio titulado "Sistema de información para el control de asistencia del personal de la empresa Global Sales Solutions Line Sucursal Perú." http://repositorio.uigv.edu.pe/handle/20.500.11818/4293

Rodriguez, A. (2019) en su trabajo titulado “Desarrollo de tecnologías de información gerencial para instituciones públicas y privadas en venezuela”. http://miunespace.une.edu.ve/jspui/handle/123456789/3319

Pérez, M., (2016) en su proyecto de grado titulado “Extensión de aplicaciones mediante python embebido”.https://tinyurl.com/3jkxedr4
Rodríguez M., (2019), en su proyecto titulado “Desarrollo de una aplicación para el análisis automatizado de datos de producción científica”.https://ruc.udc.es/dspace/handle/2183/25164

Referencias Electrónicas. https://es.wikipedia.org/wiki/Administración_de_las_tecnologías_de_la_información https://es.wikipedia.org/wiki/Sistema
https://es.wikipedia.org/wiki/Software https://edu.gcfglobal.org/es/cultura-tecnologica/ https://es.wikipedia.org/wiki/Base_de_datos https://es.wikipedia.org/wiki/Normalización_de_bases_de_datos https://www.wildcodeschool.com/es-ES/blog/ https://es.wikipedia.org/wiki/Sistema_de_control https://es.wikipedia.org/wiki/Caso_de_uso

///////////
Un poco de contexto de mi tesis: 
La Cámara de Industriales del Estado Carabobo (CIEC) es una institución gremial fundada el 4 de septiembre de 1936 bajo el nombre de Unión de Industriales de Valencia, con el propósito de impulsar el desarrollo industrial en la región. Su creación respondió a la necesidad de consolidar a Valencia como un polo industrial en Venezuela, reuniendo a 18 empresas pioneras bajo el liderazgo de figuras como el Dr. Temístocles López, su primer presidente. Desde entonces, la CIEC ha evolucionado significativamente, adaptándose a los cambios económicos, políticos y tecnológicos del país, y transformándose en un actor clave para la representación y defensa de los intereses del sector industrial carabobeño.

En sus inicios, la CIEC funcionó como un sindicato patronal enfocado en coordinar esfuerzos para fortalecer la incipiente industria local. En 1962, adoptó el nombre de Cámara de Industriales de Valencia y, posteriormente, en 1970, se reestructuró como Cámara de Industriales del Estado Carabobo para ampliar su alcance geográfico y sectorial. Este cambio reflejó su crecimiento y su rol protagónico en la articulación de políticas industriales, no solo a nivel regional, sino también nacional, al ser miembro fundador del Consejo Venezolano de la Industria (Conindustria).

A lo largo de sus 88 años de historia, la CIEC ha sido dirigida por 33 empresarios destacados, entre ellos Ernesto Stelling, Jacob Salas Romer y Ernesto Vogeler, quienes han guiado su transición de una organización gremial tradicional a una entidad moderna y multifacética. Su misión se ha expandido para incluir no solo la defensa de los intereses industriales, sino también la promoción de la responsabilidad social, la sostenibilidad ambiental y la innovación tecnológica.

Estructura y alcance actual
La CIEC opera bajo un modelo organizativo jerárquico y colaborativo, estructurado en:

    Asamblea de Afiliados: Máxima instancia decisoria.

    Junta Directiva y Consejo Consultivo: Encargados de la dirección estratégica.

    Comisiones de Trabajo: Especializadas en áreas como comercio exterior, medio ambiente, recursos humanos y tecnología, entre otras.

Estas comisiones, lideradas por representantes de empresas afiliadas, permiten abordar desafíos sectoriales mediante el intercambio de experiencias y la propuesta de soluciones conjuntas. Además, la CIEC ofrece servicios clave como:

    Asesoría técnica y legal en trámites municipales, comercio exterior y normativas laborales.

    Capacitación para mejorar la competitividad del talento humano.

    Eventos y espacios físicos (Salón Conceca, Salón Procesa) para conferencias, talleres y networking.

Crecimiento y desafíos operativos
La CIEC ha experimentado un crecimiento exponencial en su membresía, pasando de 18 empresas en 1936 a más de 500 afiliados en 2024, abarcando sectores como manufactura, alimentos, químicos, metalmecánica y servicios. Este crecimiento, aunque positivo, ha generado complejidades administrativas:

    Procesos manuales: La gestión de solicitudes de compra, órdenes de compra e inventarios se realiza mediante métodos tradicionales (planillas físicas, correos electrónicos dispersos), lo que provoca demoras, duplicación de esfuerzos y falta de trazabilidad.

    Falta de centralización: Cada departamento opera de forma independiente, dificultando la coordinación entre gerencia, finanzas y comisiones.

    Incapacidad para generar reportes precisos: La ausencia de un sistema integrado impide el monitoreo en tiempo real de presupuestos, existencias y cumplimiento de solicitudes.

Brecha tecnológica en un contexto histórico
A pesar de su liderazgo gremial, la CIEC no ha incorporado herramientas tecnológicas robustas para modernizar sus procesos internos. Mientras el entorno industrial avanza hacia la automatización y la transformación digital, la institución sigue dependiendo de prácticas obsoletas heredadas de décadas pasadas. Esto contrasta con su rol histórico de impulsar la innovación, evidenciando una paradoja entre su misión externa (fomentar el desarrollo industrial) y su realidad interna (ineficiencias administrativas).

Este desfase se agrava ante la creciente demanda de servicios por parte de los afiliados y la necesidad de cumplir con estándares internacionales de transparencia y eficiencia. La falta de un sistema centralizado no solo afecta la productividad, sino que también limita su capacidad para responder a desafíos emergentes, como la gestión de cadenas de suministro en crisis económicas o la adaptación a normativas ambientales.

Conclusión del contexto
La CIEC, como pilar histórico del desarrollo industrial en Carabobo, enfrenta el reto de modernizar sus procesos administrativos para mantener su relevancia en un mundo digitalizado. La implementación de un sistema web de gestión de solicitudes y órdenes de compra no solo resolvería problemáticas operativas actuales, sino que honraría su legado de innovación y adaptación, asegurando su continuidad como referente gremial en el siglo XXI.


Fin del contexto

Necesito que lo redactes para MI tesis, debes hacerlo lo mas extenso que tu capacidad permita, debe ser realmente extenso