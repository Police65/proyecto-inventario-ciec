Te voy a enseñar mi codigo ya que necesito tu ayuda para completar el proyecto y tambien para los errores, el proyecto realmente esta avanzado aunque aun verde, por favor espero puedas ayudarme en serio te doy las gracias de antemano 

Primero te mostrare la estructura de archivos del proyecto 

PS C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec> dir 


    Directory: C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         3/12/2025  10:26 AM                .vite
d-----          4/2/2025   4:31 PM                node_modules
d-----         3/12/2025  10:26 AM                plantillas y esas cosas
d-----         4/23/2025   2:09 PM                src
-a----         3/12/2025  10:26 AM            290 .env
-a----         3/12/2025  10:26 AM            277 .gitignore
-a----         3/12/2025  10:26 AM          35180 Captura.jpg
-a----         3/17/2025  12:35 PM         695468 Codigo aun mas viejo.rar
-a----         3/12/2025  10:26 AM            404 index.html
-a----         4/23/2025   2:09 PM          50919 logo.jpg
-a----         4/23/2025   2:09 PM         132210 package-lock.json
-a----         4/23/2025   2:09 PM           1076 package.json
-a----         4/23/2025   2:09 PM          88110 pnpm-lock.yaml
-a----         3/17/2025  12:35 PM           8229 prueba.html
-a----         3/17/2025  12:35 PM            934 prueba2.html
-a----         3/17/2025  12:35 PM              2 README.md
-a----         4/23/2025   2:09 PM           4131 script_si.sql
-a----         3/17/2025  12:35 PM            591 testConexion.js
-a----         3/17/2025  12:35 PM            206 vite.config.js


PS C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec> dir  


    Directory: C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         3/12/2025  10:26 AM                .vite
d-----          4/2/2025   4:31 PM                node_modules
d-----         3/12/2025  10:26 AM                plantillas y esas cosas
d-----         4/23/2025   2:09 PM                src
-a----         3/12/2025  10:26 AM            290 .env
-a----         3/12/2025  10:26 AM            277 .gitignore
-a----         3/12/2025  10:26 AM          35180 Captura.jpg
-a----         3/17/2025  12:35 PM         695468 Codigo aun mas viejo.rar
-a----         3/12/2025  10:26 AM            404 index.html
-a----         4/23/2025   2:09 PM          50919 logo.jpg
-a----         4/23/2025   2:09 PM         132210 package-lock.json
-a----         4/23/2025   2:09 PM           1076 package.json
-a----         4/23/2025   2:09 PM          88110 pnpm-lock.yaml
-a----         3/17/2025  12:35 PM           8229 prueba.html
-a----         3/17/2025  12:35 PM            934 prueba2.html
-a----         3/17/2025  12:35 PM              2 README.md
-a----         4/23/2025   2:09 PM           4131 script_si.sql
-a----         3/17/2025  12:35 PM            591 testConexion.js
-a----         3/17/2025  12:35 PM            206 vite.config.js


PS C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec> dir src


    Directory: C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec\src


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         3/12/2025  10:26 AM                assets
d-----         4/23/2025   2:09 PM                components
d-----         4/23/2025   2:09 PM                styles
-a----         4/23/2025   2:09 PM          10436 App.jsx
-a----         4/23/2025   2:09 PM           2857 Login.jsx
-a----         3/12/2025  10:26 AM            351 main.jsx
-a----         4/23/2025   2:09 PM           2930 supabaseClient.js
-a----         3/12/2025  10:26 AM            420 supabaseClientTest.js


PS C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec> dir src/components


    Directory: C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec\src\components


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         4/23/2025   2:09 PM          13032 AdminDashboard.jsx
-a----         4/23/2025   2:09 PM            999 Aside.jsx
-a----         4/23/2025   2:09 PM           7488 ConsolidationModal.jsx
-a----         4/23/2025   2:09 PM           2030 Home.jsx
-a----         3/17/2025  12:35 PM           1079 ModoOscuro.jsx
-a----         4/23/2025   2:09 PM           5938 Navbar.jsx
-a----         4/23/2025   2:09 PM           1859 OrderActions.jsx
-a----         4/23/2025   2:09 PM           7116 OrderCompletionForm.jsx
-a----         4/23/2025   2:09 PM           2577 OrderDetailsModal.jsx
-a----         4/23/2025   2:09 PM          11599 OrderForm.jsx
-a----         3/17/2025  12:35 PM           3545 OrderPDF.jsx
-a----         3/17/2025  12:35 PM           6009 PDFTemplate.jsx
-a----         4/23/2025   2:09 PM           1813 RequestDetailsModal.jsx
-a----         3/17/2025  12:35 PM           5131 RequestForm.jsx
-a----         4/23/2025   2:09 PM           2936 RequestTable.jsx
-a----         4/23/2025   2:09 PM           2738 Sidebar.jsx
-a----         4/23/2025   2:09 PM          18464 UserManagement.jsx


PS C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec> dir src/styles    


    Directory: C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec\src\styles


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         3/12/2025  10:26 AM            981 App.css
-a----         4/23/2025   2:09 PM              0 Home.css
-a----         4/23/2025   2:09 PM           1822 index.css
-a----         4/23/2025   2:09 PM           1242 login.css
-a----         4/23/2025   2:09 PM           2018 Navbar.css
-a----         4/23/2025   2:09 PM           2909 sidebar.css


PS C:\Users\PASANTIAS\Documents\proyecto-inventario-ciec>     





Ahora te enseñare el contenido de los archivos al menos los mas importantes para el funcionamiento del proyecto 


package.json
{
  "name": "proyecto-inventario-ciec",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "main": "/src/main.jsx",
  "homepage": "",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "preview": "vite preview",
    "update": "npm-check-updates -u",
    "deploy": "vite build && gh-pages -d dist",
    "test-conexion": "node testConexion.js"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.1",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "cdbreact": "^1.5.19",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "gh-pages": "^6.3.0",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.0",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-bootstrap-icons": "^1.11.5",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.3.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "npm-check-updates": "^17.1.15",
    "vite": "^6.2.0"
  }
}



supabaseClient.js

// supabaseClient.js
import { createClient } from '@supabase/supabase-js';

// Configuración principal de Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY;

export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    storage: localStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  }
});

// Funciones de agrupación
export const agruparSolicitudes = async (solicitudId) => {
  const { data: currentSolicitud } = await supabase
    .from('solicitudcompra')
    .select('*, detalles:solicitudcompra_detalle(*, producto:producto_id(categoria_id))')
    .eq('id', solicitudId)
    .single();

  const productosIds = currentSolicitud.detalles.map(d => d.producto_id);
  const categoriasIds = currentSolicitud.detalles.map(d => d.producto.categoria_id);

  // Corregir la sintaxis de la consulta
  const { data: agrupables } = await supabase
    .from('solicitudcompra')
    .select(`
      *,
      detalles:solicitudcompra_detalle(*, producto:producto_id(categoria_id)),
      empleado:empleado_id(nombre, apellido)
    `)
    .or(`and(estado.eq.Pendiente,detalles.producto_id.in.(${productosIds.join(',')}),
          and(estado.eq.Pendiente,producto.categoria_id.in.(${categoriasIds.join(',')}))`)
    .neq('id', solicitudId);

  return {
    porProducto: agruparPorProducto(agrupables),
    porCategoria: agruparPorCategoria(agrupables)
  };
};

// Funciones helper
const agruparPorProducto = (solicitudes) => {
  const grupos = {};
  solicitudes?.forEach(solicitud => {
    solicitud.detalles?.forEach(detalle => {
      const productoId = detalle.producto_id;
      if (!grupos[productoId]) {
        grupos[productoId] = {
          producto: detalle.producto_id,
          cantidadTotal: 0,
          solicitudes: new Set(),
          detalles: []
        };
      }
      grupos[productoId].cantidadTotal += detalle.cantidad;
      grupos[productoId].solicitudes.add(solicitud.id);
      grupos[productoId].detalles.push(detalle);
    });
  });
  return Object.values(grupos);
};

const agruparPorCategoria = (solicitudes) => {
  const grupos = {};
  solicitudes?.forEach(solicitud => {
    solicitud.detalles?.forEach(detalle => {
      const categoriaId = detalle.producto?.categoria_id;
      if (!grupos[categoriaId]) {
        grupos[categoriaId] = {
          categoria: categoriaId,
          cantidadTotal: 0,
          solicitudes: new Set(),
          productos: new Set(),
          detalles: []
        };
      }
      grupos[categoriaId].cantidadTotal += detalle.cantidad;
      grupos[categoriaId].solicitudes.add(solicitud.id);
      grupos[categoriaId].productos.add(detalle.producto_id);
      grupos[categoriaId].detalles.push(detalle);
    });
  });
  return Object.values(grupos);
};


supabaseClientTest.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = "https://pckbdperupovxrniubrl.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBja2JkcGVydXBvdnhybml1YnJsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNDM1MTIsImV4cCI6MjA1NTcxOTUxMn0.p1qIe03QXpwmMKGeiobK-i5Sv_2ANYkSUQ-eUfydOis";

export const supabase = createClient(supabaseUrl, supabaseKey);


main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/index.css';
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap-icons/font/bootstrap-icons.css";

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);


Login.jsx
import "./styles/login.css";
import { Link } from "react-router-dom";
import React, { useState } from "react";
import { Button, Form, Modal } from "react-bootstrap";
import { supabase } from "./supabaseClient.js";

const Login = ({ onLogin }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [show, setShow] = useState(true);

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
  
      if (error) throw error;
  
      // Consultar perfil sin relación automática
      const { data: profile, error: profileError } = await supabase
        .from("user_profile")
        .select(`
          id,
          rol,
          empleado_id,
          departamento_id
        `)
        .eq("id", data.user.id)
        .single();
  
      if (profileError) throw profileError;
  
      // Consultar datos del empleado por separado
      const { data: empleado, error: empleadoError } = await supabase
        .from("empleado")
        .select("id, estado")
        .eq("id", profile.empleado_id)
        .single();
  
      if (empleadoError) throw empleadoError;
  
      // Combinar los datos
      const combinedProfile = {
        ...profile,
        empleado: empleado || null
      };
  
      // Verificar estado del empleado
      if (combinedProfile && combinedProfile.empleado?.estado === 'activo') {
        onLogin(combinedProfile);
        setShow(false);
      } else {
        throw new Error("Usuario inactivo. Contacta al administrador.");
      }
    } catch (error) {
      alert("Error: " + error.message);
    }
  };
  
  return (
    <div className="addUser">
      <h3>Iniciar Sesión</h3>
      <form className="addUserForm" onSubmit={handleLogin}>
        <div className="inputGroup">
          <Form.Group controlId="formEmail">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              placeholder="Ingrese su email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="input"
            />
          </Form.Group>
          <Form.Group controlId="formPassword">
            <Form.Label>Contraseña</Form.Label>
            <Form.Control
              type="password"
              placeholder="Ingrese su contraseña"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input"
            />
          </Form.Group>

          <button type="submit" class="btn-config ">
            Login
          </button>
        </div>
      </form>
    </div>
  );
};

export default Login;


App.jsx
import React, { useState, useEffect } from "react";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { Container } from "react-bootstrap";
import Sidebar from "./components/Sidebar";
import CustomNavbar from "./components/Navbar";
import RequestForm from "./components/RequestForm";
import RequestTable from "./components/RequestTable";
import AdminDashboard from "./components/AdminDashboard";
import Home from "./components/Home";
import Login from "./Login";
import { supabase } from "./supabaseClient";
import ModoOscuro from "./components/ModoOscuro";

const checkStoredSession = () => {
  const storedUser = localStorage.getItem("userProfile");
  const storedTime = localStorage.getItem("sessionTime");

  if (storedUser && storedTime) {
    const timeElapsed = Date.now() - parseInt(storedTime);
    if (timeElapsed < 900000) {
      const parsedUser = JSON.parse(storedUser);
      if (parsedUser.empleado_id && parsedUser.rol) {
        return parsedUser;
      }
    }
  }
  return null;
};

function AuthenticatedLayout({
  userProfile,
  showForm,
  setShowForm,
  requests,
  orders,
  isSidebarVisible,
  toggleSidebar,
  activeTab,
  setActiveTab,
  handleSubmitRequest,
  getFilteredRequests,
}) {
  return (
    <>
      <CustomNavbar
        onToggleSidebar={toggleSidebar}
        userRole={userProfile.rol}
        userId={userProfile.id}
      />
      <Sidebar
        isVisible={isSidebarVisible}
        onNewRequest={() => setShowForm(true)}
        onSelectTab={setActiveTab}
        userProfile={userProfile}
        pendingRequests={getFilteredRequests(["Pendiente"])}
      />
      <div
        style={{
          marginLeft: isSidebarVisible ? "250px" : "0",
          marginTop: "56px",
          padding: "20px",
          transition: "margin-left 0.3s",
          minHeight: "calc(100vh - 56px)",
          backgroundColor: "#212529",
        }}
      >
        <Container fluid>
          <Routes>
            <Route path="/home" element={<Home />} />
            <Route
              path="/solicitudes"
              element={
                userProfile.rol === "admin" ? (
                  <AdminDashboard
                    activeTab={activeTab}
                    solicitudesPendientes={getFilteredRequests(["Pendiente"])}
                    solicitudesHistorial={getFilteredRequests([
                      "Aprobada",
                      "Rechazada",
                    ])}
                    ordenesHistorial={orders}
                    userProfile={userProfile}
                  />
                ) : (
                  <>
                    {activeTab === "solicitudes" && (
                      <RequestTable
                        requests={getFilteredRequests(["Pendiente"])}
                      />
                    )}
                    {activeTab === "historial" && (
                      <RequestTable
                        requests={getFilteredRequests(["Aprobada", "Rechazada"])}
                      />
                    )}
                  </>
                )
              }
            />
            <Route path="/" element={<Navigate to="/home" replace />} />
            <Route path="*" element={<Navigate to="/home" replace />} />
          </Routes>
        </Container>
      </div>
      {userProfile.rol === "usuario" && (
        <RequestForm
          show={showForm}
          onHide={() => setShowForm(false)}
          onSubmit={handleSubmitRequest}
        />
      )}
    </>
  );
}

function App() {
  const [showForm, setShowForm] = useState(false);
  const [requests, setRequests] = useState([]);
  const [orders, setOrders] = useState([]);
  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
  const [activeTab, setActiveTab] = useState("solicitudes");
  const [userProfile, setUserProfile] = useState(checkStoredSession());
  const [inactivityTimer, setInactivityTimer] = useState(null);

  const fetchRequests = async () => {
    try {
      const baseQuery = supabase
        .from("solicitudcompra")
        .select(
          `
          *,
          detalles:solicitudcompra_detalle(
            *,
            producto:producto_id(*)
          ),
          empleado:empleado_id(nombre, apellido)
        `
        )
        .order("fecha_solicitud", { ascending: false });

      let queryResult =
        userProfile?.rol === "admin"
          ? await baseQuery
          : await baseQuery.eq("empleado_id", userProfile?.empleado_id);

      if (queryResult.error) throw queryResult.error;
      setRequests(queryResult.data || []);
    } catch (error) {
      console.error("Error cargando solicitudes:", error);
      alert("Error al cargar las solicitudes");
    }
  };

  useEffect(() => {
    if (userProfile) {
      fetchRequests();
    }
  }, [userProfile]);

  const resetInactivityTimer = () => {
    clearTimeout(inactivityTimer);
    setInactivityTimer(
      setTimeout(() => {
        localStorage.removeItem("userProfile");
        localStorage.removeItem("sessionTime");
        setUserProfile(null);
      }, 300000)
    );
  };

  const toggleSidebar = () => setIsSidebarVisible((prev) => !prev);

  useEffect(() => {
    if (userProfile) {
      const events = ["mousemove", "keydown", "click"];
      events.forEach((e) => window.addEventListener(e, resetInactivityTimer));
      return () =>
        events.forEach((e) =>
          window.removeEventListener(e, resetInactivityTimer)
        );
    }
  }, [userProfile]);

  useEffect(() => {
    if (userProfile) {
      localStorage.setItem("userProfile", JSON.stringify(userProfile));
      localStorage.setItem("sessionTime", Date.now().toString());
      fetchRequests();
      fetchOrders();
    }
  }, [userProfile]);

  const getFilteredRequests = (estados) => {
    return requests.filter(
      (request) =>
        estados.includes(request.estado) &&
        (userProfile?.rol === "admin" ||
          request.empleado_id === userProfile?.empleado_id)
    );
  };

  const handleSubmitRequest = async (requestData) => {
    try {
      if (!userProfile?.empleado_id) {
        throw new Error("Usuario no tiene empleado asociado");
      }

      const { data: solicitud, error } = await supabase
        .from("solicitudcompra")
        .insert([
          {
            descripcion: requestData.description || "Solicitud múltiple",
            estado: "Pendiente",
            empleado_id: userProfile.empleado_id,
            departamento_id: userProfile.departamento_id,
          },
        ])
        .select("id");

      if (error) throw error;

      if (!requestData.customRequest && requestData.products) {
        const inserts = requestData.products.map((product) => ({
          solicitud_compra_id: solicitud[0].id,
          producto_id: product.productId,
          cantidad: product.quantity,
        }));

        const { error: detalleError } = await supabase
          .from("solicitudcompra_detalle")
          .insert(inserts);

        if (detalleError) throw detalleError;
      }

      // Generar notificaciones para administradores
      const { data: admins, error: adminsError } = await supabase
        .from("users")
        .select("id")
        .eq("rol", "admin");

      if (adminsError) throw adminsError;

      const notificationInserts = admins.map((admin) => ({
        user_id: admin.id,
        title: "Nueva Solicitud de Compra",
        description: `Se ha creado una nueva solicitud de compra con ID ${solicitud[0].id}`,
        created_at: new Date().toISOString(),
        type: "solicitud_compra",
        read: false,
      }));

      const { error: notificationError } = await supabase
        .from("notificaciones")
        .insert(notificationInserts);

      if (notificationError) throw notificationError;

      await fetchRequests();
      setShowForm(false);
    } catch (error) {
      alert("Error: " + error.message);
    }
  };

  const fetchOrders = async () => {
    try {
      const { data, error } = await supabase
        .from("ordencompra")
        .select(
          `
          *,
          proveedor:proveedor_id(*),
          productos:ordencompra_detalle(
            *,
            producto:producto_id(*)
          ),
          empleado:empleado_id(*),
          solicitud_compra:solicitud_compra_id(*)
        `
        )
        .order("fecha_orden", { ascending: false });

      if (error) throw error;
      setOrders(data || []);
    } catch (error) {
      console.error("Error cargando órdenes:", error);
    }
  };

  return (
    <BrowserRouter>
      <Routes>
        <Route
          path="/login"
          element={
            !userProfile ? (
              <Login
                onLogin={(profile) => {
                  if (!profile.empleado_id) {
                    alert(
                      "Tu usuario no está asociado a un empleado. Contacta al administrador."
                    );
                    return;
                  }
                  setUserProfile({
                    ...profile,
                    empleado_id: profile.empleado_id,
                  });
                  resetInactivityTimer();
                }}
              />
            ) : (
              <Navigate to="/home" replace />
            )
          }
        />
        <Route
          path="/*"
          element={
            userProfile ? (
              <AuthenticatedLayout
                userProfile={userProfile}
                showForm={showForm}
                setShowForm={setShowForm}
                requests={requests}
                orders={orders}
                isSidebarVisible={isSidebarVisible}
                toggleSidebar={toggleSidebar}
                activeTab={activeTab}
                setActiveTab={setActiveTab}
                handleSubmitRequest={handleSubmitRequest}
                getFilteredRequests={getFilteredRequests}
              />
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
      </Routes>
    </BrowserRouter>
  );
}

export default App;


App.css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.table-responsive {
  overflow-x: auto;
}

.table-dark {
  background-color: #343a40;
  color: #fff;
  width: 100%;
}

.table-dark th,
.table-dark td {
  border-color: #454d55;
  padding: 12px;
  text-align: center;
}

.table-dark th {
  background-color: #454d55;
  font-size: 1.1rem;
}

.table-dark tbody tr:hover {
  background-color: rgba(255, 255, 255, 0.075);
}

.d-flex {
  display: flex;
}

.justify-content-center {
  justify-content: center;
}

.align-items-center {
  align-items: center;
}

.h-100 {
  height: 100%;
}

.w-100 {
  width: 100%;
}



Home.css
//El archivo esta realmente vacio no tiene ninguna utilidad o relevancia


index.css
:root{
  --color1: #001c51;
  --color2: #004f7d;
  --color3: #4990b2;
  --color4: #a7d6eb;
  --color5: #faffff;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--color1) !important; /* Fondo oscuro permanente */
  color: var(--color5) !important; /* Texto claro */
  transition: background-color 0.3s ease;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.card {
  margin-bottom: 20px;
  border: 1px solid #e3e6f0;
  border-radius: 0.35rem;
  background-color: #343a40 !important;
  color: #f8f9fa !important;
}

.card-header {
  padding: 0.75rem 1.25rem;
  margin-bottom: 0;
  border-bottom: 1px solid #e3e6f0;
  background-color: #2d3338 !important;
  border-bottom: 1px solid #495057 !important;
  color: #f8f9fa !important;
}
.table-dark {
  --bs-table-bg: #343a40;
  --bs-table-striped-bg: #2d3338;
  --bs-table-striped-color: #fff;
  --bs-table-active-bg: #373b3e;
  --bs-table-active-color: #fff;
  --bs-table-hover-bg: #323539;
  --bs-table-hover-color: #fff;
  color: #fff;
  border-color: #495057;
}

.card-body {
  padding: 1.25rem;
}

.table-responsive {
  overflow-x: auto;
}

.hidden {
  left: -250px !important; 
}

.visible {
  left: 0 !important; 
}
.badge {
  padding: 0.5em 0.75em;
  border-radius: 0.25rem;
  font-size: 0.875em;
}

.bg-warning {
  background-color: #ffc107 !important;
  color: #000;
}

.bg-success {
  background-color: #198754 !important;
}

.bg-danger {
  background-color: #dc3545 !important;
}



login.css

:root{
  --color1: #001c51;
  --color2: #004f7d;
  --color3: #4990b2;
  --color4: #a7d6eb;
  --color5: #faffff;
}
.addUser {
  background-color: var(--color2);
  width: 25%;
  margin: 50px auto;
  /* margin in top and bottom will be 50px  */
  /* left and right auto  */
  padding: 40px;
  border-radius: 10px;
  box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.065);

  /* horizon offset vertical offset blur offset  */
  /* opacity of shadow */
  /* red, green, blue, and (opacity ). */
}
.addUserForm .inputGroup {
  width: 100%;
  display: flex;
  flex-direction: column;
}

.addUserForm .inputGroup label {
  margin-top: 10px;
}

.addUserForm .inputGroup input {
  margin-top: 5px;
  padding: 10px;
}

.inputGroup button {
  margin-top: 10px;
}
.login {
  margin-top: 30px;
  text-align: center;
}

.login .btn.btn-success {
  width: 50%;
}

.addUser h3 {
  text-align: center;
  font-weight: bold;
  color: var(--color5);
  text-transform: uppercase;
  text-shadow: 1px 1px 2px var(--color1);
}


.input{
  background-color: var(--color5);
  color: var(--color1);
}

.btn-config{
  background-color: var(--color1);
  color: var(--color5);
  border: none;
  padding: 10px 20px;
}


Navbar.css

:root {
  --color1: #001c51;
  --color2: #004f7d;
  --color3: #4990b2;
  --color4: #a7d6eb;
  --color5: #faffff;
}

/* General Navbar styles */
.navbar {
  background-color: var(--color1); /* Dark background */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow */
  z-index: 1030; /* Ensure it stays on top */
}

/* Brand styling */
.navbar-brand {
  font-size: 1.25rem;
  font-weight: bold;
  color: var(--color5);
}

.navbar-brand:hover {
  color: var(--color4); /* Light blue on hover */
}

/* Button styling */
.navbar .btn-dark {
  background-color: var(--color2);
  border: none;
}

.navbar .btn-dark:hover {
  background-color: var(--color3); /* Slightly lighter on hover */
}

/* NavLink styling */
.navbar .nav-link {
  color: var(--color5);
  font-size: 0.95rem;
  transition: color 0.3s ease;
}

.navbar .nav-link:hover {
  color: var(--color4); /* Light blue on hover */
}

/* Badge styling */
.navbar .badge {
  font-size: 0.75rem;
  padding: 0.25em 0.5em;
  border-radius: 50%;
  background-color: var(--color3);
  color: var(--color5);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow */
}

/* Popover styling */
.popover {
  border: none;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */
}

.popover-header {
  background-color: var(--color2);
  color: var(--color5);
  font-size: 1rem;
  font-weight: bold;
}

.popover-body {
  font-size: 0.9rem;
  color: var(--color1);
}

/* Notification item styling */
.notification-item {
  background-color: var(--color4);
  border-radius: 0.25rem;
  transition: background-color 0.3s ease;
}

.notification-item:hover {
  background-color: var(--color3); /* Slightly darker on hover */
}

/* Logout button styling */
.popover .btn-outline-danger {
  font-size: 0.85rem;
  border-color: var(--color3);
  color: var(--color3);
}

.popover .btn-outline-danger:hover {
  background-color: var(--color3);
  color: var(--color5);
}


sidebar.css
/* Root Variables */
:root {
    --color1: #001c51;
    --color2: #004f7d;
    --color3: #4990b2;
    --color4: #a7d6eb;
    --color5: #faffff;
    --shadow-color: rgba(0, 0, 0, 0.2);
}

/* Sidebar Styles */
.sidebar {
    background-color: var(--color1);
    color: var(--color5);
    min-height: 100vh;
    padding: 1rem;
    width: 250px;
    position: fixed;
    top: 56px;
    left: -250px;
    transition: left 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    z-index: 1000;
    border-radius: 0 10px 10px 0; /* Bordes redondeados */
    box-shadow: 2px 0 5px var(--shadow-color); /* Sombra */
}

.sidebar.visible {
    left: 0;
    box-shadow: 4px 0 10px var(--shadow-color); /* Sombra más pronunciada */
}

/* Sidebar Header */
.sidebar h1 {
    font-size: 1.5rem; /* Tamaño de fuente más grande */
    margin-bottom: 1.5rem; /* Más espacio debajo */
    color: var(--color5);
    text-shadow: 2px 2px 4px var(--color3); /* Sombra de texto más suave */
    text-align: center; /* Centrar el texto */
}

/* Navigation Styles */
.sidebar nav ul {
    list-style: none;
    padding: 0;
}

.sidebar nav ul li {
    margin-bottom: 0.75rem; /* Más espacio entre elementos */
}

.sidebar nav ul li .btn {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 100%;
    text-align: left;
    padding: 0.75rem; /* Más espacio interno */
    color: var(--color5);
    text-decoration: none;
    background-color: transparent;
    border: none;
    white-space: nowrap;
    border-radius: 5px; /* Bordes redondeados */
    transition: background-color 0.3s ease-in-out, transform 0.2s ease-in-out;
}

.sidebar nav ul li .btn:hover {
    background-color: var(--color2);
    transform: translateX(5px); /* Efecto de desplazamiento */
}

/* Badge Styles */
.sidebar .badge {
    background-color: var(--color3);
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 24px; /* Tamaño más grande */
    height: 24px;
    border-radius: 50%;
    margin-left: 8px;
    font-size: 14px; /* Fuente más grande */
    color: var(--color5);
    vertical-align: middle;
    margin-top: -10%;
    box-shadow: 0 2px 4px var(--shadow-color); /* Sombra */
}

/* New Request Button */
.sidebar .new-request-btn {
    margin-top: 1.5rem; /* Más espacio superior */
    width: 100%;
    background-color: var(--color2);
    color: var(--color5);
    border: none;
    padding: 0.75rem; /* Más espacio interno */
    font-size: 1.1rem; /* Fuente más grande */
    cursor: pointer;
    border-radius: 5px; /* Bordes redondeados */
    transition: background-color 0.3s ease-in-out, transform 0.2s ease-in-out;
}

.sidebar .new-request-btn:hover {
    background-color: var(--color3);
    transform: scale(1.05); /* Efecto de agrandamiento */
}


UserManagement.jsx
import React, { useState, useEffect } from 'react';
import { Table, Button, Form, Modal, Badge } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [showAddUserModal, setShowAddUserModal] = useState(false);
  const [showCargoHistorialModal, setShowCargoHistorialModal] = useState(false);
  const [showAddProfileModal, setShowAddProfileModal] = useState(false);
  const [selectedEmpleadoId, setSelectedEmpleadoId] = useState(null);
  const [cargoHistorial, setCargoHistorial] = useState([]);

  // Cargar usuarios al montar el componente
  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const { data, error } = await supabase
        .from('empleado')
        .select(`
          id,
          cedula,
          nombre,
          apellido,
          cargo_actual_id,
          departamento_id,
          estado,
          cargo:cargo_actual_id (nombre),
          departamento:departamento_id (nombre)
        `)
        .order('apellido', { ascending: true });
  
      if (error) {
        throw error;
      }
  
      // Consulta separada para obtener perfiles de usuario
      const { data: profiles, error: profileError } = await supabase
        .from('user_profile')
        .select('id, empleado_id, rol');
  
      if (profileError) {
        throw profileError;
      }
  
      // Combinar datos de empleado con perfiles
      const combinedData = data.map(empleado => {
        const userProfile = profiles.find(profile => profile.empleado_id === empleado.id);
        return {
          ...empleado,
          user_profile: userProfile || null
        };
      });
  
      console.log('Datos obtenidos:', combinedData);
      if (!combinedData || combinedData.length === 0) {
        console.log('No se encontraron empleados en la base de datos.');
      }
  
      setUsers(combinedData || []);
      setFilteredUsers(combinedData || []);
    } catch (error) {
      console.error('Error al cargar empleados:', error.message);
      alert('Error al cargar empleados: ' + error.message);
    }
  };
  // Manejar búsqueda
  const handleSearch = (e) => {
    const term = e.target.value.toLowerCase();
    setSearchTerm(term);
    if (term === '') {
      setFilteredUsers(users); // Restablecer a la lista completa si el término está vacío
    } else {
      const filtered = users.filter(user =>
        user.nombre.toLowerCase().includes(term) ||
        user.apellido.toLowerCase().includes(term) ||
        user.cedula.toLowerCase().includes(term)
      );
      setFilteredUsers(filtered);
    }
  };

  // Cambiar estado (activo/inactivo)
  const handleToggleEstado = async (empleadoId, currentEstado) => {
    const newEstado = currentEstado === 'activo' ? 'inactivo' : 'activo';
    try {
      const { error } = await supabase
        .from('empleado')
        .update({ estado: newEstado })
        .eq('id', empleadoId);

      if (error) throw error;
      fetchUsers(); // Refrescar la lista
    } catch (error) {
      console.error('Error al actualizar estado:', error);
      alert('Error al actualizar estado: ' + error.message);
    }
  };

  // Ver historial de cargos
  const handleViewCargoHistorial = async (empleadoId) => {
    setSelectedEmpleadoId(empleadoId);
    try {
      const { data, error } = await supabase
        .from('empleadocargohistorial')
        .select(`
          id,
          cargo_id,
          fecha_inicio,
          fecha_fin,
          cargo:cargo_id (nombre)
        `)
        .eq('empleado_id', empleadoId)
        .order('fecha_inicio', { ascending: false });

      if (error) throw error;
      setCargoHistorial(data || []);
      setShowCargoHistorialModal(true);
    } catch (error) {
      console.error('Error al cargar historial de cargos:', error);
      alert('Error al cargar historial: ' + error.message);
    }
  };

  // Abrir modal para añadir perfil
  const handleAddProfile = (empleadoId) => {
    setSelectedEmpleadoId(empleadoId);
    setShowAddProfileModal(true);
  };

  return (
    <div className="bg-dark rounded-3 p-4 border border-secondary">
      <h4 className="text-light mb-4">👥 Gestión de Usuarios</h4>
      
      <div className="d-flex justify-content-between mb-3">
        <Form.Control
          type="text"
          placeholder="Buscar por nombre, apellido o cédula"
          value={searchTerm}
          onChange={handleSearch}
          className="w-50"
        />
        <Button variant="primary" onClick={() => setShowAddUserModal(true)}>
          Añadir Empleado
        </Button>
      </div>

      <Table striped bordered hover variant="dark">
        <thead>
          <tr>
            <th>ID</th>
            <th>Cédula</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Cargo</th>
            <th>Departamento</th>
            <th>Estado</th>
            <th>Usuario</th>
            <th>Rol</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {filteredUsers.length > 0 ? (
            filteredUsers.map(user => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.cedula}</td>
                <td>{user.nombre}</td>
                <td>{user.apellido}</td>
                <td>{user.cargo?.nombre || 'N/A'}</td>
                <td>{user.departamento?.nombre || 'N/A'}</td>
                <td>
                  <Badge bg={user.estado === 'activo' ? 'success' : 'danger'}>
                    {user.estado}
                  </Badge>
                </td>
                <td>
                  {user.user_profile ? (
                    <Badge bg="success">Sí</Badge>
                  ) : (
                    <Badge bg="warning">No</Badge>
                  )}
                </td>
                <td>{user.user_profile?.rol || 'N/A'}</td>
                <td>
                  <Button
                    variant={user.estado === 'activo' ? 'danger' : 'success'}
                    size="sm"
                    onClick={() => handleToggleEstado(user.id, user.estado)}
                    className="me-2"
                  >
                    {user.estado === 'activo' ? 'Inhabilitar' : 'Habilitar'}
                  </Button>
                  <Button
                    variant="info"
                    size="sm"
                    onClick={() => handleViewCargoHistorial(user.id)}
                    className="me-2"
                  >
                    Ver Historial
                  </Button>
                  {!user.user_profile && (
                    <Button
                      variant="primary"
                      size="sm"
                      onClick={() => handleAddProfile(user.id)}
                    >
                      Añadir Perfil
                    </Button>
                  )}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="10" className="text-center">
                No se encontraron empleados
              </td>
            </tr>
          )}
        </tbody>
      </Table>

      {/* Modal para añadir empleado */}
      <AddUserModal
        show={showAddUserModal}
        onHide={() => setShowAddUserModal(false)}
        onAddUser={fetchUsers}
      />

      {/* Modal para añadir perfil de usuario */}
      <AddProfileModal
        show={showAddProfileModal}
        onHide={() => setShowAddProfileModal(false)}
        empleadoId={selectedEmpleadoId}
        onAddProfile={fetchUsers}
      />

      {/* Modal para historial de cargos */}
      <CargoHistorialModal
        show={showCargoHistorialModal}
        onHide={() => setShowCargoHistorialModal(false)}
        cargoHistorial={cargoHistorial}
      />
    </div>
  );
};

// Componente para el modal de añadir empleado
const AddUserModal = ({ show, onHide, onAddUser }) => {
  const [formData, setFormData] = useState({
    cedula: '',
    nombre: '',
    apellido: '',
    email: '',
    cargo_id: '',
    departamento_id: '',
    rol: 'usuario'
  });

  const [cargos, setCargos] = useState([]);
  const [departamentos, setDepartamentos] = useState([]);

  useEffect(() => {
    const fetchCargos = async () => {
      const { data } = await supabase.from('cargo').select('id, nombre');
      setCargos(data || []);
    };
    const fetchDepartamentos = async () => {
      const { data } = await supabase.from('departamento').select('id, nombre');
      setDepartamentos(data || []);
    };
    fetchCargos();
    fetchDepartamentos();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Insertar empleado
      const { data: empleadoData, error: empleadoError } = await supabase
        .from('empleado')
        .insert([{
          cedula: formData.cedula,
          nombre: formData.nombre,
          apellido: formData.apellido,
          cargo_actual_id: formData.cargo_id,
          departamento_id: formData.departamento_id,
          estado: 'activo'
        }])
        .select('id')
        .single();

      if (empleadoError) throw empleadoError;

      // Crear usuario en Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: 'defaultPassword123', // Considera pedir una contraseña al usuario
      });

      if (authError) throw authError;

      // Insertar perfil de usuario vinculado al empleado y al usuario de autenticación
      const { error: userProfileError } = await supabase
        .from('user_profile')
        .insert([{
          empleado_id: empleadoData.id,
          departamento_id: formData.departamento_id,
          rol: formData.rol,
          id: authData.user.id // Vincular con el ID del usuario autenticado
        }]);

      if (userProfileError) throw userProfileError;

      // Insertar en historial de cargos
      await supabase
        .from('empleadocargohistorial')
        .insert([{
          empleado_id: empleadoData.id,
          cargo_id: formData.cargo_id,
          fecha_inicio: new Date().toISOString().split('T')[0],
          fecha_fin: null
        }]);

      onAddUser();
      onHide();
    } catch (error) {
      console.error('Error al añadir empleado:', error);
      alert('Error al añadir empleado: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Añadir Nuevo Empleado</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Cédula</Form.Label>
            <Form.Control
              type="text"
              value={formData.cedula}
              onChange={(e) => setFormData({ ...formData, cedula: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Nombre</Form.Label>
            <Form.Control
              type="text"
              value={formData.nombre}
              onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Apellido</Form.Label>
            <Form.Control
              type="text"
              value={formData.apellido}
              onChange={(e) => setFormData({ ...formData, apellido: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Correo Electrónico</Form.Label>
            <Form.Control
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Cargo</Form.Label>
            <Form.Select
              value={formData.cargo_id}
              onChange={(e) => setFormData({ ...formData, cargo_id: e.target.value })}
              required
            >
              <option value="">Seleccionar cargo</option>
              {cargos.map(cargo => (
                <option key={cargo.id} value={cargo.id}>{cargo.nombre}</option>
              ))}
            </Form.Select>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Departamento</Form.Label>
            <Form.Select
              value={formData.departamento_id}
              onChange={(e) => setFormData({ ...formData, departamento_id: e.target.value })}
              required
            >
              <option value="">Seleccionar departamento</option>
              {departamentos.map(depto => (
                <option key={depto.id} value={depto.id}>{depto.nombre}</option>
              ))}
            </Form.Select>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Rol</Form.Label>
            <Form.Select
              value={formData.rol}
              onChange={(e) => setFormData({ ...formData, rol: e.target.value })}
            >
              <option value="usuario">Usuario</option>
              <option value="admin">Administrador</option>
            </Form.Select>
          </Form.Group>
          <Button variant="primary" type="submit">
            Añadir Empleado
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

// Componente para el modal de añadir perfil de usuario
const AddProfileModal = ({ show, onHide, empleadoId, onAddProfile }) => {
  const [rol, setRol] = useState('usuario');
  const [departamentos, setDepartamentos] = useState([]);
  const [departamentoId, setDepartamentoId] = useState('');
  const [email, setEmail] = useState('');

  useEffect(() => {
    const fetchDepartamentos = async () => {
      const { data } = await supabase.from('departamento').select('id, nombre');
      setDepartamentos(data || []);
    };
    fetchDepartamentos();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Crear usuario en Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password: 'defaultPassword123', // Considera pedir una contraseña al usuario
      });

      if (authError) throw authError;

      // Insertar perfil de usuario
      const { error } = await supabase
        .from('user_profile')
        .insert([{
          empleado_id: empleadoId,
          departamento_id: departamentoId,
          rol: rol,
          id: authData.user.id // Vincular con el ID del usuario autenticado
        }]);

      if (error) throw error;

      onAddProfile();
      onHide();
    } catch (error) {
      console.error('Error al añadir perfil:', error);
      alert('Error al añadir perfil: ' + error.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Añadir Perfil de Usuario</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Correo Electrónico</Form.Label>
            <Form.Control
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Departamento</Form.Label>
            <Form.Select
              value={departamentoId}
              onChange={(e) => setDepartamentoId(e.target.value)}
              required
            >
              <option value="">Seleccionar departamento</option>
              {departamentos.map(depto => (
                <option key={depto.id} value={depto.id}>{depto.nombre}</option>
              ))}
            </Form.Select>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Label>Rol</Form.Label>
            <Form.Select
              value={rol}
              onChange={(e) => setRol(e.target.value)}
            >
              <option value="usuario">Usuario</option>
              <option value="admin">Administrador</option>
            </Form.Select>
          </Form.Group>
          <Button variant="primary" type="submit">
            Añadir Perfil
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

// Componente para el modal de historial de cargos
const CargoHistorialModal = ({ show, onHide, cargoHistorial }) => {
  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Historial de Cargos</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Table striped bordered hover variant="dark">
          <thead>
            <tr>
              <th>Cargo</th>
              <th>Fecha Inicio</th>
              <th>Fecha Fin</th>
            </tr>
          </thead>
          <tbody>
            {cargoHistorial.map(hist => (
              <tr key={hist.id}>
                <td>{hist.cargo?.nombre || 'N/A'}</td>
                <td>{new Date(hist.fecha_inicio).toLocaleDateString()}</td>
                <td>{hist.fecha_fin ? new Date(hist.fecha_fin).toLocaleDateString() : 'Actual'}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>
    </Modal>
  );
};

export default UserManagement;



Sidebar.jsx
import React from "react";
import { Link, useLocation } from "react-router-dom";
import { Button } from "react-bootstrap";
import "../styles/sidebar.css";

const Sidebar = ({
  isVisible,
  onNewRequest,
  onSelectTab,
  userProfile,
  pendingRequests = [],
}) => {
  const location = useLocation();
  
  return (
    <aside className={`sidebar ${isVisible ? "visible" : ""}`}>
      <h1>Cámara de Industriales</h1>
      <nav>
        <ul>
          <li>
            <Link
              to="/solicitudes"
              className="btn"
              onClick={() => onSelectTab("solicitudes")}
            >
              <i className="bi bi-list-task me-2"></i>
              <span>
                Solicitudes
                <span className="badge">{pendingRequests.length}</span>
              </span>
            </Link>
          </li>
          <li>
            <Link
              to="/solicitudes"
              className="btn"
              onClick={() => onSelectTab("historial-solicitudes")}
            >
              <i className="bi bi-clock-history me-2"></i>
              Historial Solicitudes
            </Link>
          </li>
          {userProfile?.rol === "admin" && (
            <>
              <li>
                <Link
                  to="/solicitudes"
                  className="btn"
                  onClick={() => onSelectTab("ordenes")}
                >
                  <i className="bi bi-file-earmark-text me-2"></i>
                  Historial de Órdenes
                </Link>
              </li>
              <li>
                <Link
                  to="/solicitudes"
                  className="btn"
                  onClick={() => onSelectTab("ordenes-consolidadas")}
                >
                  <i className="bi bi-archive me-2"></i>
                  Órdenes Consolidadas
                </Link>
              </li>
              {/* Nueva opción de gestión de usuarios */}
              <li>
                <Link
                  to="/solicitudes"
                  className="btn"
                  onClick={() => onSelectTab("usuarios")}
                >
                  <i className="bi bi-people me-2"></i>
                  Gestión de Usuarios
                </Link>
              </li>
            </>
          )}
        </ul>
      </nav>
      {userProfile?.rol === "usuario" && (
        <Button
          variant="light"
          className="new-request-btn"
          onClick={onNewRequest}
        >
          <i className="bi bi-plus-circle me-2"></i>
          Nueva Solicitud
        </Button>
      )}
    </aside>
  );
};

export default Sidebar;



RequestTable.jsx
import React from 'react';
import { Table, Button } from 'react-bootstrap';

const RequestTable = ({ requests, withActions, onApprove, onReject, showStatus = true, onRowClick }) => {
  const getStatusBadge = (estado) => {
    const variants = {
      Pendiente: 'warning',
      Aprobada: 'success',
      Rechazada: 'danger'
    };
    
    return (
      <span className={`badge bg-${variants[estado]}`}>
        {estado}
      </span>
    );
  };

  return (
    <div className="table-responsive">
      <Table striped hover className="align-middle" variant="dark">
        <thead className="table-dark">
          <tr>
            <th>ID</th>
            <th>Descripción</th>
            <th>Productos</th>
            {showStatus && <th>Estado</th>}
            {withActions && <th>Acciones</th>}
          </tr>
        </thead>
        <tbody>
          {requests?.map(request => (
            <tr 
              key={request.id} 
              className="text-light" 
              onClick={() => onRowClick && onRowClick(request)}
              style={{ cursor: onRowClick ? 'pointer' : 'default' }}
            >
              <td>{request.id}</td>
              <td>{request.descripcion || 'N/A'}</td>
              <td>
                {request.detalles?.map((detalle, i) => (
                  <div key={i} className="mb-1 small">
                    {detalle.producto && detalle.producto.descripcion ? (
                      <>
                        <strong>{detalle.producto.descripcion}</strong>
                        <span className="ms-2">(Cantidad: {detalle.cantidad})</span>
                      </>
                    ) : (
                      'Producto no especificado'
                    )}
                  </div>
                )) || 'N/A'}
              </td>
              {showStatus && <td>{getStatusBadge(request.estado)}</td>}
              {withActions && (
                <td onClick={(e) => e.stopPropagation()}>
                  <Button 
                    variant="success" 
                    size="sm" 
                    className="me-2"
                    onClick={() => onApprove(request)}
                  >
                    Aprobar
                  </Button>
                  <Button 
                    variant="danger" 
                    size="sm"
                    onClick={() => onReject(request.id)}
                  >
                    Rechazar
                  </Button>
                </td>
              )}
            </tr>
          ))}
          {requests?.length === 0 && (
            <tr>
              <td colSpan={showStatus ? 5 : 4} className="text-center text-muted py-4">
                No hay registros para mostrar
              </td>
            </tr>
          )}
        </tbody>
      </Table>
    </div>
  );
};

export default RequestTable;


RequestForm.jsx
import React, { useState, useEffect } from 'react';
import { Modal, Form, Button } from 'react-bootstrap';
import { supabase } from '../supabaseClient.js';
import { v4 as uuidv4 } from 'uuid'; // Añadir esta importación

const RequestForm = ({ show, onHide, onSubmit }) => {
  const [products, setProducts] = useState([{ id: uuidv4(), productId: '', quantity: 1 }]);
  const [customRequest, setCustomRequest] = useState(false);
  const [description, setDescription] = useState('');
  const [fetchedProducts, setFetchedProducts] = useState([]); // Renombrado para evitar conflicto

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const { data, error } = await supabase.from('producto').select('*');
    if (!error) setFetchedProducts(data);
  };

  const handleAddProduct = () => {
    setProducts([...products, { id: uuidv4(), productId: '', quantity: 1 }]);
  };

  const handleRemoveProduct = (id) => {
    if (products.length > 1) {
      setProducts(products.filter(product => product.id !== id));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Validaciones
    if (customRequest && !description.trim()) {
      alert('Ingrese una descripción para la requisición especial');
      return;
    }
    
    if (!customRequest) {
      const hasEmptyFields = products.some(p => !p.productId || p.quantity < 1);
      if (hasEmptyFields) {
        alert('Complete todos los campos de productos');
        return;
      }
    }

    onSubmit({
      products: customRequest ? null : products,
      description: customRequest ? description : null
    });
    onHide();
  };

  return (
    <Modal show={show} onHide={onHide} centered contentClassName="bg-dark text-light">
    <Modal.Header closeButton className="bg-dark border-secondary">
      <Modal.Title className="text-light">Nueva Solicitud</Modal.Title>
    </Modal.Header>
    <Modal.Body className="bg-dark">
      <Form onSubmit={handleSubmit}>
          {!customRequest && products.map((product, index) => (
             <div key={product.id} className="mb-3 border border-secondary p-2 rounded">
              <Form.Group className="mb-3">
                <Form.Label>Producto:</Form.Label>
                <Form.Select
                  value={product.productId}
                  onChange={(e) => {
                    const newProducts = [...products];
                    newProducts[index].productId = e.target.value;
                    setProducts(newProducts);
                  }}
                >
                  <option value="">Seleccionar producto</option>
                  {fetchedProducts.map((prod) => (
                    <option key={prod.id} value={prod.id}>
                      {prod.descripcion}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>Cantidad:</Form.Label>
                <Form.Control
                  type="number"
                  value={product.quantity}
                  onChange={(e) => {
                    const newProducts = [...products];
                    newProducts[index].quantity = e.target.value;
                    setProducts(newProducts);
                  }}
                  min="1"
                />
              </Form.Group>
              {products.length > 1 && (
                <Button 
                  variant="danger" 
                  size="sm" 
                  onClick={() => handleRemoveProduct(product.id)}
                  className="mb-2"
                >
                  Eliminar producto
                </Button>
              )}
            </div>
          ))}

          <Button 
            variant="outline-primary" 
            onClick={handleAddProduct} 
            className="mb-3"
            disabled={customRequest}
          >
            Añadir otro producto
          </Button>

          <Form.Group className="mb-3">
            <Form.Check
              type="checkbox"
              label="Requisición especial"
              checked={customRequest}
              onChange={(e) => setCustomRequest(e.target.checked)}
            />
          </Form.Group>

          {customRequest && (
            <Form.Group className="mb-3">
              <Form.Label>Descripción:</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </Form.Group>
          )}

          <div className="d-flex justify-content-between">
            <Button variant="secondary" onClick={onHide}>
              Cancelar
            </Button>
            <Button variant="primary" type="submit">
              Enviar
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default RequestForm;


RequestDetailsModal.jsx
import React from 'react';
import { Modal, Table, Button } from 'react-bootstrap';

const RequestDetailsModal = ({ show, onHide, request }) => {
  if (!request) return null;

  return (
    <Modal show={show} onHide={onHide} size="lg" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Detalles de la Solicitud #{request.id}</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Table striped bordered hover variant="dark">
          <tbody>
            <tr>
              <td><strong>Descripción:</strong></td>
              <td>{request.descripcion || 'N/A'}</td>
            </tr>
            <tr>
              <td><strong>Estado:</strong></td>
              <td>{request.estado}</td>
            </tr>
            <tr>
              <td><strong>Fecha de Creación:</strong></td>
              <td>{new Date(request.created_at).toLocaleDateString()}</td>
            </tr>
          </tbody>
        </Table>
        <h5>Productos Solicitados</h5>
        <Table striped bordered hover variant="dark">
          <thead>
            <tr>
              <th>Producto</th>
              <th>Cantidad</th>
            </tr>
          </thead>
          <tbody>
            {request.detalles?.map((detalle, i) => (
              <tr key={i}>
                <td>{detalle.producto?.descripcion || 'Producto no especificado'}</td>
                <td>{detalle.cantidad}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>
      <Modal.Footer className="bg-dark">
        <Button variant="secondary" onClick={onHide}>
          Cerrar
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default RequestDetailsModal;

PDFTemplate.jsx
import React from 'react';
import { format } from 'date-fns';

const PDFTemplate = ({ orden, camara }) => {
  // Función de formato monetario
  const formatCurrency = (value, unidad) => {
    return new Intl.NumberFormat('es-VE', {
      style: 'currency',
      currency: unidad === 'USD' ? 'USD' : 'VES',
      minimumFractionDigits: 2
    }).format(value || 0);
  };

  // Estilos base para compatibilidad con html2canvas
  const baseStyles = {
    page: {
      width: '210mm',
      minHeight: '297mm',
      padding: '20px',
      fontFamily: 'Arial, sans-serif',
      fontSize: '14px',
      color: '#000000',
      backgroundColor: '#FFFFFF'
    },
    header: {
      textAlign: 'center',
      marginBottom: '20px',
      borderBottom: '2px solid #000'
    },
    table: {
      width: '100%',
      borderCollapse: 'collapse',
      margin: '10px 0',
      backgroundColor: '#FFFFFF'
    },
    th: {
      backgroundColor: '#f8f9fa',
      border: '1px solid #000',
      padding: '8px',
      textAlign: 'left'
    },
    td: {
      border: '1px solid #000',
      padding: '8px',
      backgroundColor: '#FFFFFF'
    }
  };

  return (
    <div style={baseStyles.page}>
      {/* Cabecera Institucional */}
      <div style={baseStyles.header}>
        <h2 style={{ fontSize: '24px', margin: '5px 0', color: '#000' }}>
          {camara.nombre}
        </h2>
        <h3 style={{ fontSize: '18px', margin: '5px 0', color: '#000' }}>
          Orden de Compra N°: {orden.id}
        </h3>
        <p style={{ margin: '3px 0', color: '#000' }}>
          {format(new Date(orden.fecha_orden), 'dd/MM/yyyy')}
        </p>
      </div>

      {/* Información de Contacto */}
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <p style={{ color: '#000' }}>{camara.direccion}</p>
        <p style={{ color: '#000' }}>
          Teléfonos: {camara.telefonos} | RIF: {camara.rif}
        </p>
        <p style={{ color: '#000' }}>
          Web: {camara.web} | Email: {camara.correo}
        </p>
      </div>

      {/* Tabla de Proveedor */}
      <table style={baseStyles.table}>
        <tbody>
          <tr>
            <td style={{ ...baseStyles.td, fontWeight: 'bold', width: '15%' }}>Proveedor:</td>
            <td style={{ ...baseStyles.td, width: '35%' }}>{orden.proveedor?.nombre || 'N/A'}</td>
            <td style={{ ...baseStyles.td, fontWeight: 'bold', width: '15%' }}>RIF:</td>
            <td style={{ ...baseStyles.td, width: '35%' }}>{orden.proveedor?.rif || 'N/A'}</td>
          </tr>
          <tr>
            <td style={{ ...baseStyles.td, fontWeight: 'bold' }}>Dirección:</td>
            <td colSpan="3" style={baseStyles.td}>{orden.proveedor?.direccion || 'N/A'}</td>
          </tr>
        </tbody>
      </table>

      {/* Instrucciones */}
      <div style={{ margin: '20px 0', padding: '10px', border: '1px solid #000' }}>
        <p style={{ fontWeight: 'bold', color: '#000' }}>
          ESTIMADO PROVEEDOR, DE ACUERDO A SU COTIZACIÓN ENVIADA POR WS, FAVOR SUMINISTRAR LO ABAJO INDICADO
        </p>
      </div>

      {/* Tabla de Productos */}
      <table style={baseStyles.table}>
        <thead>
          <tr>
            <th style={baseStyles.th}>REF</th>
            <th style={baseStyles.th}>CANTIDAD</th>
            <th style={baseStyles.th}>DESCRIPCIÓN</th>
            <th style={baseStyles.th}>PRECIO UNITARIO</th>
            <th style={baseStyles.th}>TOTAL</th>
          </tr>
        </thead>
        <tbody>
          {orden.productos?.map((item, index) => (
            <tr key={index}>
              <td style={baseStyles.td}>{item.producto_id}</td>
              <td style={{ ...baseStyles.td, textAlign: 'center' }}>{item.cantidad}</td>
              <td style={baseStyles.td}>{item.producto?.descripcion || 'N/A'}</td>
              <td style={{ ...baseStyles.td, textAlign: 'right' }}>
                {formatCurrency(item.precio_unitario, orden.unidad)}
              </td>
              <td style={{ ...baseStyles.td, textAlign: 'right' }}>
                {formatCurrency(item.cantidad * item.precio_unitario, orden.unidad)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Totales */}
      <div style={{ marginTop: '20px', textAlign: 'right' }}>
        <p style={{ color: '#000' }}>
          <strong>Subtotal:</strong> {formatCurrency(orden.sub_total, orden.unidad)}
        </p>
        <p style={{ color: '#000' }}>
          <strong>IVA (16%):</strong> {formatCurrency(orden.iva, orden.unidad)}
        </p>
        <p style={{ color: '#000' }}>
          <strong>Ret. IVA (75%):</strong> {formatCurrency(orden.ret_iva, orden.unidad)}
        </p>
        <p style={{ color: '#000', fontSize: '16px', fontWeight: 'bold' }}>
          Neto a pagar: {formatCurrency(orden.neto_a_pagar, orden.unidad)}
        </p>
      </div>

      {/* Firmas */}
      <div style={{ 
        display: 'flex',
        justifyContent: 'space-between',
        marginTop: '50px',
        paddingTop: '20px',
        borderTop: '1px solid #000'
      }}>
        <div style={{ width: '45%', textAlign: 'center' }}>
          <div style={{ borderBottom: '1px solid #000', height: '50px', marginBottom: '10px' }}></div>
          <p style={{ color: '#000', fontWeight: 'bold' }}>{orden.empleado?.nombre} {orden.empleado?.apellido}</p>
          <p style={{ color: '#000' }}>Departamento de Compras</p>
        </div>
        
        <div style={{ width: '45%', textAlign: 'center' }}>
          <div style={{ borderBottom: '1px solid #000', height: '50px', marginBottom: '10px' }}></div>
          <p style={{ color: '#000', fontWeight: 'bold' }}>Coordinación Financiera</p>
          <p style={{ color: '#000' }}>Aprobado por</p>
        </div>
      </div>
    </div>
  );
};

export default PDFTemplate;


OrderPDF.jsx
import React, { useRef, useState } from 'react';
import { Button } from 'react-bootstrap';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { supabase } from '../supabaseClient';
import PDFTemplate from './PDFTemplate';

const OrderPDF = ({ order }) => {
  const contentRef = useRef(null);
  const [loading, setLoading] = useState(false);
  const [pdfData, setPdfData] = useState(null);

  const handleGeneratePDF = async () => {
    setLoading(true);
    try {
      // 1. Cargar datos necesarios
      const [
        { data: camara }, 
        { data: ordenCompleta }
      ] = await Promise.all([
        supabase.from('camaraindustriales').select('*').single(),
        supabase.from('ordencompra')
          .select(`
            *,
            proveedor:proveedor_id(*),
            productos:ordencompra_detalle(
              *,
              producto:producto_id(*)
            ),
            empleado:empleado_id(*)
          `)
          .eq('id', order.id)
          .single()
      ]);

      // 2. Validar datos críticos
      if (!ordenCompleta || !camara) {
        throw new Error(`
          Datos faltantes:
          ${!ordenCompleta ? '- Orden no encontrada\n' : ''}
          ${!camara ? '- Datos de la cámara no configurados' : ''}
        `);
      }

      // 3. Actualizar estado con nuevos datos
      setPdfData({ orden: ordenCompleta, camara });

      // 4. Esperar ciclo de renderizado completo
      await new Promise(resolve => setTimeout(resolve, 100));

      // 5. Configurar elemento temporal visible
      const originalStyle = contentRef.current.style.cssText;
      contentRef.current.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
        visibility: visible;
      `;

      // 6. Generar PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const canvas = await html2canvas(contentRef.current, {
        scale: 2,
        useCORS: true,
        logging: true,
        backgroundColor: '#FFFFFF'
      });

      // 7. Restaurar estilos originales
      contentRef.current.style.cssText = originalStyle;

      // 8. Validar canvas
      if (canvas.width === 0 || canvas.height === 0) {
        throw new Error('El canvas generado no tiene dimensiones válidas');
      }

      // 9. Guardar PDF
      const imgProps = pdf.getImageProperties(canvas);
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
      
      pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);
      pdf.save(`orden_${order.id}.pdf`);

    } catch (error) {
      console.error("Error generando PDF:", error);
      alert(`Error al generar PDF: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Button 
        variant="primary" 
        onClick={handleGeneratePDF}
        size="sm"
        disabled={loading}
      >
        {loading ? 'Generando...' : 'Generar PDF'}
      </Button>

      {/* Contenedor PDF - Siempre presente en el DOM */}
      <div ref={contentRef} style={{
        width: '210mm',
        minHeight: '297mm',
        visibility: 'hidden',
        position: 'absolute',
        left: '-9999px',
        backgroundColor: 'white'
      }}>
        {pdfData && <PDFTemplate orden={pdfData.orden} camara={pdfData.camara} />}
      </div>
    </>
  );
};

export default OrderPDF;


OrderForm.jsx
import React, { useState, useEffect } from 'react';
import { Modal, Form, Button, Table, InputGroup } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const OrderForm = ({ show, onHide, ordenConsolidada, userProfile, onSuccess, selectedRequest }) => {
  const [productos, setProductos] = useState([]);
  const [proveedores, setProveedores] = useState([]);
  const [inicializado, setInicializado] = useState(false);
  const [formData, setFormData] = useState({
    sub_total: 0,
    iva: 0,
    ret_iva: 0,
    retencion_porcentaje: 75,
    neto_a_pagar: 0,
    unidad: 'Bs',
    empleado_id: userProfile?.empleado_id || null,
    proveedor_id: ordenConsolidada?.proveedor_id || null
  });

  useEffect(() => {
    const cargarDatos = async () => {
      console.log('UserProfile en OrderForm:', userProfile);  
      console.log('Empleado ID:', userProfile?.empleado_id); 
      if (!userProfile?.empleado_id) {
        alert("Error: El usuario no tiene un empleado asociado");
        onHide();
        return;
      }

      const { data: proveedoresData } = await supabase
        .from('proveedor')
        .select('id, nombre');
      
      if (proveedoresData) setProveedores(proveedoresData);

      if (ordenConsolidada && !inicializado) {
        const productosIniciales = ordenConsolidada.productos.map(p => ({
          ...p,
          cantidad: Number(p.cantidad) || 0,
          precio_unitario: Number(p.precio_unitario) || 0
        }));
        setProductos(productosIniciales);
        calcularTotales(productosIniciales);
        setInicializado(true);
      } else if (selectedRequest?.detalles && !inicializado) {
        const productosIniciales = selectedRequest.detalles.map(d => ({
          producto_id: d.producto_id,
          descripcion: d.producto?.descripcion || 'Producto sin nombre',
          cantidad: Number(d.cantidad) || 0,
          precio_unitario: 0
        }));
        setProductos(productosIniciales);
        calcularTotales(productosIniciales);
        setInicializado(true);
      }
    };

    if (show) {
      cargarDatos();
    } else {
      setInicializado(false);
      setProductos([]);
    }
  }, [show, ordenConsolidada, userProfile, onHide, inicializado, selectedRequest]);

  const calcularTotales = (productosActualizados) => {
    const productosValidos = productosActualizados.map(p => ({
      ...p,
      cantidad: Number(p.cantidad) || 0,
      precio_unitario: Number(p.precio_unitario) || 0
    }));

    const subtotal = productosValidos.reduce(
      (acc, p) => acc + (p.precio_unitario * p.cantidad),
      0
    );
    
    const iva = subtotal * 0.16;
    const retencion = iva * (formData.retencion_porcentaje / 100);
    const neto = subtotal + iva - retencion;

    setFormData(prev => ({
      ...prev,
      sub_total: subtotal,
      iva: iva,
      ret_iva: retencion,
      neto_a_pagar: neto
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      if (!formData.proveedor_id) throw new Error("¡Seleccione un proveedor!");
      if (!userProfile?.empleado_id) throw new Error("Error de autenticación");
      if (productos.length === 0) throw new Error("No hay productos");

      const solicitudesIds = ordenConsolidada?.solicitudes || 
        (selectedRequest?.id ? [selectedRequest.id] : []);
      
      console.log('Solicitudes IDs:', solicitudesIds);
      
      if (solicitudesIds.length === 0) {
        throw new Error("No hay solicitudes vinculadas");
      }

      const preciosInvalidos = productos.some(p => 
        isNaN(p.precio_unitario) || p.precio_unitario <= 0
      );
      if (preciosInvalidos) throw new Error("Precios unitarios inválidos");

      const { data: orden, error } = await supabase
        .from('ordencompra')
        .insert([{
          ...formData,
          proveedor_id: Number(formData.proveedor_id),
          empleado_id: userProfile.empleado_id,
          estado: 'Pendiente',
          fecha_orden: new Date().toISOString(),
          solicitud_compra_id: Number(solicitudesIds[0])
        }])
        .select(`
          *,
          proveedor:proveedor_id(*),
          productos:ordencompra_detalle(
            *,
            producto:producto_id(*)
          ),
          empleado:empleado_id(*),
          solicitud_compra:solicitud_compra_id(*)
        `)
        .single();

      if (error) throw error;

      const detalles = productos.map(p => ({
        orden_compra_id: orden.id,
        producto_id: p.producto_id,
        cantidad: p.cantidad,
        precio_unitario: p.precio_unitario
      }));

      await supabase.from('ordencompra_detalle').insert(detalles);

      await supabase.from('orden_solicitud').insert(
        solicitudesIds.map(solicitudId => ({
          ordencompra_id: Number(orden.id),
          solicitud_id: Number(solicitudId)
        }))
      );

      await supabase
        .from('solicitudcompra')
        .update({ estado: 'Aprobada' })
        .in('id', solicitudesIds);

      onSuccess(orden); // Pasamos la orden creada
      onHide();

    } catch (error) {
      alert('❌ Error: ' + error.message);
    }
  };

  const simboloMoneda = formData.unidad === 'Bs' ? 'Bs' : '$';

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Crear Orden de Compra</Modal.Title>
      </Modal.Header>
      
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <div className="row mb-4">
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Proveedor</Form.Label>
                <Form.Select
                  value={formData.proveedor_id || ''}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    proveedor_id: Number(e.target.value)
                  }))}
                  required
                  className="bg-secondary text-light"
                >
                  <option value="">Seleccionar proveedor...</option>
                  {proveedores.map(proveedor => (
                    <option key={proveedor.id} value={proveedor.id}>
                      {proveedor.nombre}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </div>
            
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Unidad Monetaria</Form.Label>
                <Form.Select
                  value={formData.unidad}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    unidad: e.target.value
                  }))}
                  className="bg-secondary text-light"
                >
                  <option value="Bs">Bolívares (Bs)</option>
                  <option value="USD">Dólares (USD)</option>
                </Form.Select>
              </Form.Group>
            </div>
          </div>

          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Producto</th>
                <th>Cantidad Consolidada</th>
                <th>Precio Unitario ({simboloMoneda})</th>
                <th>Total ({simboloMoneda})</th>
              </tr>
            </thead>
            <tbody>
              {productos.map((p, i) => (
                <tr key={i}>
                  <td>{p.descripcion}</td>
                  <td>{p.cantidad}</td>
                  <td>
                    <InputGroup>
                      <Form.Control
                        type="number"
                        step="0.01"
                        min="0"
                        value={productos[i].precio_unitario === '' ? '' : productos[i].precio_unitario}
                        onChange={(e) => {
                          const value = e.target.value;
                          const numericValue = parseFloat(value);
                          
                          const nuevosProductos = [...productos];
                          nuevosProductos[i].precio_unitario = value === '' ? '' : numericValue;
                          
                          setProductos(nuevosProductos);
                          calcularTotales(nuevosProductos);
                        }}
                        onBlur={(e) => {
                          if (e.target.value === '') {
                            const nuevosProductos = [...productos];
                            nuevosProductos[i].precio_unitario = 0;
                            setProductos(nuevosProductos);
                            calcularTotales(nuevosProductos);
                          }
                        }}
                      />
                      <InputGroup.Text>{simboloMoneda}</InputGroup.Text>
                    </InputGroup>
                  </td>
                  <td>
                    {((p.precio_unitario || 0) * p.cantidad).toFixed(2)}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>

          <div className="mt-4 p-3 bg-secondary rounded">
            <h5>Totales</h5>
            
            <Form.Group className="mb-3">
              <Form.Label>Porcentaje de Retención IVA</Form.Label>
              <InputGroup>
                <Form.Control
                  type="number"
                  step="1"
                  min="0"
                  max="100"
                  value={formData.retencion_porcentaje}
                  onChange={(e) => {
                    const porcentaje = Math.min(100, Math.max(0, Number(e.target.value)));
                    setFormData(prev => ({
                      ...prev,
                      retencion_porcentaje: porcentaje
                    }));
                    calcularTotales(productos);
                  }}
                />
                <InputGroup.Text>%</InputGroup.Text>
              </InputGroup>
            </Form.Group>

            <div className="d-flex justify-content-between">
              <span>Subtotal:</span>
              <span>{simboloMoneda} {formData.sub_total.toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>IVA (16%):</span>
              <span>{simboloMoneda} {formData.iva.toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between">
              <span>Retención IVA ({formData.retencion_porcentaje}%):</span>
              <span>{simboloMoneda} {formData.ret_iva.toFixed(2)}</span>
            </div>
            <div className="d-flex justify-content-between fw-bold">
              <span>Neto a Pagar:</span>
              <span>{simboloMoneda} {formData.neto_a_pagar.toFixed(2)}</span>
            </div>
          </div>

          <div className="mt-4 d-grid gap-2">
            <Button variant="success" type="submit" size="lg">
              🚀 Crear Orden
            </Button>
            <Button variant="secondary" onClick={onHide} size="lg">
              ❌ Cancelar
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default OrderForm;


OrderDetailsModal.jsx
import React from 'react';
import { Modal, Table, Button } from 'react-bootstrap';
import OrderPDF from './OrderPDF';

const OrderDetailsModal = ({ show, onHide, order }) => {
  if (!order) return null;

  return (
    <Modal show={show} onHide={onHide} size="lg" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Detalles de la Orden #{order.id}</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Table striped bordered hover variant="dark">
          <tbody>
            <tr>
              <td><strong>Proveedor:</strong></td>
              <td>{order.proveedor?.nombre || 'N/A'}</td>
            </tr>
            <tr>
              <td><strong>Fecha:</strong></td>
              <td>{new Date(order.fecha_orden).toLocaleDateString()}</td>
            </tr>
            <tr>
              <td><strong>Estado:</strong></td>
              <td>{order.estado}</td>
            </tr>
            <tr>
              <td><strong>Subtotal:</strong></td>
              <td>{order.sub_total?.toFixed(2)} {order.unidad}</td>
            </tr>
            <tr>
              <td><strong>IVA:</strong></td>
              <td>{order.iva?.toFixed(2)} {order.unidad}</td>
            </tr>
            <tr>
              <td><strong>Retención IVA:</strong></td>
              <td>{order.ret_iva?.toFixed(2)} {order.unidad}</td>
            </tr>
            <tr>
              <td><strong>Neto a Pagar:</strong></td>
              <td>{order.neto_a_pagar?.toFixed(2)} {order.unidad}</td>
            </tr>
          </tbody>
        </Table>
        <h5>Productos</h5>
        <Table striped bordered hover variant="dark">
          <thead>
            <tr>
              <th>Producto</th>
              <th>Cantidad</th>
              <th>Precio Unitario</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            {order.productos?.map((p, i) => (
              <tr key={i}>
                <td>{p.producto?.descripcion || 'N/A'}</td>
                <td>{p.cantidad}</td>
                <td>{p.precio_unitario?.toFixed(2)} {order.unidad}</td>
                <td>{(p.cantidad * p.precio_unitario).toFixed(2)} {order.unidad}</td>
              </tr>
            ))}
          </tbody>
        </Table>
        <div className="d-flex justify-content-end">
          <OrderPDF order={order} />
        </div>
      </Modal.Body>
    </Modal>
  );
};

export default OrderDetailsModal;

OrderCompletionForm.jsx
import React, { useState } from 'react';
import { Modal, Form, Button, Table } from 'react-bootstrap';
import { supabase } from '../supabaseClient';
import { v4 as uuidv4 } from 'uuid'; // Para generar nombres únicos

const OrderCompletionForm = ({ show, onHide, order, onComplete }) => {
  const [productosRecibidos, setProductosRecibidos] = useState({});
  const [factura, setFactura] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // Verificar autenticación
      const { data: { session }, error: authError } = await supabase.auth.getSession();
      if (authError || !session) {
        throw new Error('Usuario no autenticado. Inicia sesión para subir facturas.');
      }

      // Registrar productos faltantes
      const faltantes = order.productos
        .filter(p => (productosRecibidos[p.producto_id] || 0) < p.cantidad)
        .map(p => ({
          orden_compra_id: order.id,
          producto_id: p.producto_id,
          cantidad_faltante: p.cantidad - (productosRecibidos[p.producto_id] || 0),
          motivo: 'No entregado'
        }));

      if (faltantes.length > 0) {
        const { error } = await supabase.from('productos_no_recibidos').insert(faltantes);
        if (error) throw error;
      }

      // Subir factura si existe
      let facturaUrl = null;
      if (factura) {
        // Verificar que es un archivo válido
        if (!(factura instanceof File)) {
          throw new Error('El objeto seleccionado no es un archivo válido');
        }

        // Generar nombre único con UUID
        const fileExtension = factura.name.split('.').pop() || 'pdf';
        const uniqueFileName = `factura_${order.id}_${uuidv4()}.${fileExtension}`;
        const filePath = uniqueFileName; // Subir directamente al bucket sin subcarpetas

        // Verificar tamaño (50MB límite)
        if (factura.size > 50 * 1024 * 1024) {
          throw new Error('El archivo excede el límite de 50MB');
        }

        console.log('Generando URL firmada para subir archivo a:', filePath);

        // Generar URL firmada para la subida
        const { data: signedData, error: signedError } = await supabase.storage
          .from('facturas')
          .createSignedUploadUrl(filePath);

        if (signedError) {
          console.error('Error al generar URL firmada:', signedError);
          throw signedError;
        }

        console.log('URL firmada generada:', signedData.signedUrl);

        // Subir el archivo usando la URL firmada
        const response = await fetch(signedData.signedUrl, {
          method: 'PUT',
          body: factura,
          headers: {
            'Content-Type': factura.type || 'application/octet-stream',
          },
        });

        if (!response.ok) {
          throw new Error(`Error al subir archivo: ${response.statusText}`);
        }

        console.log('Archivo subido con éxito mediante URL firmada');

        // Obtener URL pública (ya que el bucket es público)
        const { data: publicUrlData, error: urlError } = supabase.storage
          .from('facturas')
          .getPublicUrl(filePath);

        if (urlError) {
          console.error('Error al obtener URL pública:', urlError);
          throw urlError;
        }

        facturaUrl = publicUrlData.publicUrl;
        console.log('Factura subida con éxito:', facturaUrl);
      }

      // Actualizar estado de la orden
      const { error: updateError } = await supabase
        .from('ordencompra')
        .update({ 
          estado: 'Completada',
          documento_factura: facturaUrl 
        })
        .eq('id', order.id);

      if (updateError) throw updateError;

      // Actualizar inventario
      const updates = order.productos.map(async (p) => {
        const cantidadRecibida = productosRecibidos[p.producto_id] || 0;
        if (cantidadRecibida > 0) {
          const { data: inventarioItem } = await supabase
            .from('inventario')
            .select('id, existencias')
            .eq('producto_id', p.producto_id)
            .single();

          if (inventarioItem) {
            await supabase
              .from('inventario')
              .update({
                existencias: inventarioItem.existencias + cantidadRecibida,
                fecha_actualizacion: new Date().toISOString()
              })
              .eq('id', inventarioItem.id);
          } else {
            await supabase
              .from('inventario')
              .insert({
                producto_id: p.producto_id,
                ubicacion: 'Almacén principal',
                existencias: cantidadRecibida,
                fecha_actualizacion: new Date().toISOString()
              });
          }
        }
      });

      await Promise.all(updates);

      onComplete();
      onHide();
    } catch (error) {
      console.error('Error al completar la orden:', error);
      alert('Error al completar la orden: ' + (error.message || 'Error desconocido'));
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered>
      <Modal.Header closeButton className="bg-dark text-light">
        <Modal.Title>Completar Orden #{order.id}</Modal.Title>
      </Modal.Header>
      <Modal.Body className="bg-dark text-light">
        <Form onSubmit={handleSubmit}>
          <Table striped bordered hover variant="dark">
            <thead>
              <tr>
                <th>Producto</th>
                <th>Cantidad Solicitada</th>
                <th>Cantidad Recibida</th>
              </tr>
            </thead>
            <tbody>
              {order.productos.map((p, i) => (
                <tr key={i}>
                  <td>{p.producto?.descripcion || 'N/A'}</td>
                  <td>{p.cantidad}</td>
                  <td>
                    <Form.Control
                      type="number"
                      min="0"
                      max={p.cantidad}
                      value={productosRecibidos[p.producto_id] || 0}
                      onChange={(e) => setProductosRecibidos(prev => ({
                        ...prev,
                        [p.producto_id]: parseInt(e.target.value) || 0
                      }))}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>

          <Form.Group className="mt-3">
            <Form.Label>Documento de Factura</Form.Label>
            <Form.Control
              type="file"
              accept=".pdf,.jpg,.png"
              onChange={(e) => setFactura(e.target.files[0])}
            />
          </Form.Group>

          <div className="mt-4 d-flex justify-content-end">
            <Button variant="primary" type="submit">
              Finalizar Recepción
            </Button>
          </div>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default OrderCompletionForm;


OrderActions.jsx
import React, { useState } from 'react';
import { Button } from 'react-bootstrap';
import OrderCompletionForm from './OrderCompletionForm';
import { supabase } from '../supabaseClient';

const OrderActions = ({ order, onUpdate }) => {
  const [showCompletionForm, setShowCompletionForm] = useState(false);

  const handleStatusChange = async (newStatus) => {
    const { error } = await supabase
      .from('ordencompra')
      .update({ estado: newStatus })
      .eq('id', order.id);

    if (!error) onUpdate();
  };

  return (
    <div className="d-flex gap-2">
      {order.estado === 'Pendiente' && (
        <>
          <Button
            variant="success"
            size="sm"
            onClick={(e) => {
              e.stopPropagation(); // Evita que el clic se propague a la fila
              setShowCompletionForm(true);
            }}
          >
            Marcar como Completada
          </Button>
          <Button
            variant="danger"
            size="sm"
            onClick={(e) => {
              e.stopPropagation(); // Evita que el clic se propague a la fila
              handleStatusChange('Anulada');
            }}
          >
            Anular Orden
          </Button>
        </>
      )}
      {order.estado === 'Completada' && (
        <Button
          variant="secondary"
          size="sm"
          onClick={(e) => {
            e.stopPropagation(); // Evita que el clic se propague a la fila
            handleStatusChange('Anulada');
          }}
        >
          Revertir a Anulada
        </Button>
      )}
      <OrderCompletionForm
        show={showCompletionForm}
        onHide={() => setShowCompletionForm(false)}
        order={order}
        onComplete={onUpdate}
      />
    </div>
  );
};

export default OrderActions;


Navbar.jsx
import React, { useState, useRef, useEffect } from "react";
import {
  Navbar,
  Nav,
  Container,
  Button,
  Overlay,
  Popover,
} from "react-bootstrap";
import { Bell, PersonCircle, List } from "react-bootstrap-icons";
import { NavLink } from "react-router-dom";
import { supabase } from "../supabaseClient";
import { useNavigate } from "react-router-dom";
import "../styles/Navbar.css";

const CustomNavbar = ({ onToggleSidebar, userRole, userId }) => {
  const navigate = useNavigate();
  const [showNotifications, setShowNotifications] = useState(false);
  const notificationRef = useRef(null);
  const [notifications, setNotifications] = useState([]);
  const [showProfileMenu, setShowProfileMenu] = useState(false);
  const profileRef = useRef(null);

  const handleNotificationClick = () => {
    setShowNotifications(!showNotifications);
  };

  const handleProfileClick = () => {
    setShowProfileMenu(!showProfileMenu);
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    localStorage.removeItem("userProfile");
    localStorage.removeItem("sessionTime");
    navigate("/login");
  };

  useEffect(() => {
    const fetchUserNotifications = async () => {
      const { data, error } = await supabase
        .from("notificaciones")
        .select("*")
        .eq("user_id", userId)
        .eq("read", false) // Solo notificaciones no leídas
        .order("created_at", { ascending: false });
      if (!error && data) {
        setNotifications(data);
      }
    };
    fetchUserNotifications();

    // Suscripción en tiempo real para nuevas notificaciones
    const subscription = supabase
      .channel("notificaciones")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "notificaciones",
          filter: `user_id=eq.${userId}`,
        },
        (payload) => {
          setNotifications((prev) => [payload.new, ...prev]);
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(subscription);
    };
  }, [userId]);

  return (
    <Navbar
      bg="dark"
      variant="dark"
      expand="lg"
      className="shadow-sm fixed-top"
    >
      <Container fluid>
        <Button variant="dark" onClick={onToggleSidebar} className="me-2">
          <List size={20} />
        </Button>
        <Navbar.Brand href="#" className="ms-2">
          Cámara de Industriales
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="navbarSupportedContent" />
        <Navbar.Collapse id="navbarSupportedContent">
          <Nav className="me-auto mb-2 mb-lg-0">
            <Nav.Link as={NavLink} to="/" end>
              Home
            </Nav.Link>
            <Nav.Link as={NavLink} to="/solicitudes">
              Solicitudes
            </Nav.Link>
          </Nav>
          <Nav className="d-flex align-items-center">
            <Nav.Link
              href="#"
              className="me-3 position-relative"
              onClick={handleNotificationClick}
              ref={notificationRef}
            >
              <Bell size={20} />
              <span
                className="badge bg-danger rounded-pill position-absolute"
                style={{ top: "-5px", right: "-5px" }}
              >
                {notifications.length}
              </span>
            </Nav.Link>
            <Overlay
              show={showNotifications}
              target={notificationRef.current}
              placement="bottom"
              container={document.body}
              rootClose
              onHide={() => setShowNotifications(false)}
            >
              <Popover id="notifications-popover">
                <Popover.Header as="h3">Notificaciones</Popover.Header>
                <Popover.Body>
                  {notifications.length > 0 ? (
                    notifications.map((notification) => (
                      <div
                        key={notification.id}
                        className="notification-item border-bottom p-2"
                      >
                        <h6 className="mb-1">{notification.title}</h6>
                        <p className="mb-1 text-muted small">
                          {notification.description}
                        </p>
                        <small className="text-muted">
                          {new Date(
                            notification.created_at
                          ).toLocaleDateString()}
                        </small>
                      </div>
                    ))
                  ) : (
                    <p className="m-0">No hay notificaciones</p>
                  )}
                </Popover.Body>
              </Popover>
            </Overlay>
            <Nav.Link
              href="#"
              className="position-relative"
              onClick={handleProfileClick}
              ref={profileRef}
            >
              <PersonCircle size={20} />
            </Nav.Link>
            <Overlay
              show={showProfileMenu}
              target={profileRef.current}
              placement="bottom"
              container={document.body}
              rootClose
              onHide={() => setShowProfileMenu(false)}
            >
              <Popover id="profile-popover">
                <Popover.Body>
                  <Button
                    variant="outline-danger"
                    onClick={handleLogout}
                    size="sm"
                  >
                    Cerrar sesión
                  </Button>
                </Popover.Body>
              </Popover>
            </Overlay>
          </Nav>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
};

export default CustomNavbar;


ModoOscuro.jsx
import React, { useEffect, useState } from 'react';

const ModoOscuro = () => {
    const [modo, setModo] = useState("dark");

    useEffect(() => {
        const htmlElement = document.documentElement;
        htmlElement.setAttribute("data-bs-theme", modo);
        
        // Aplicar el fondo según el tema
        document.body.style.backgroundColor = modo === "dark" 
            ? "#212529" 
            : "#f8f9fa";
            
    }, [modo]); 

    return (
        <div className="btn-group" role="group">
            <button 
                className='btn btn-primary'
                onClick={() => setModo("dark")}
                title="Modo oscuro"
            >
                <i className="bi bi-moon-fill"></i>
            </button>
            <button 
                className='btn btn-primary'
                onClick={() => setModo("light")}
                title="Modo claro"
            >
                <i className="bi bi-sun-fill"></i>
            </button>
        </div>
    );
};

export default ModoOscuro;


Home.jsx
import React, { useState, useEffect } from 'react';
import { Container, Table } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const Home = () => {
  const [inventory, setInventory] = useState([]);

  useEffect(() => {
    const fetchInventory = async () => {
      const { data, error } = await supabase
        .from('inventario')
        .select(`
          *,
          producto:producto_id (
            descripcion,
            categoria:categoria_id (nombre)
          )
        `)
        .order('fecha_actualizacion', { ascending: false });
      
      if (!error) {
        setInventory(data);
      } else {
        console.error('Error al cargar el inventario:', error);
      }
    };
    fetchInventory();
  }, []);

  return (
    <Container fluid className="mt-3">
      <h3 className="text-light">📝 Inventario</h3>
      <Table striped bordered hover responsive variant="dark">
        <thead>
          <tr>
            <th>Nombre del Producto</th>
            <th>Categoría</th>
            <th>Ubicación</th>
            <th>Existencias</th>
            <th>Fecha de Actualización</th>
          </tr>
        </thead>
        <tbody>
          {inventory.length > 0 ? (
            inventory.map((item) => (
              <tr key={item.id}>
                <td>{item.producto?.descripcion || 'Sin nombre'}</td>
                <td>{item.producto?.categoria?.nombre || 'Sin categoría'}</td>
                <td>{item.ubicacion || 'N/A'}</td>
                <td>{item.existencias !== null ? item.existencias : '0'}</td>
                <td>{new Date(item.fecha_actualizacion).toLocaleString()}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" className="text-center text-light">
                No hay registros en el inventario
              </td>
            </tr>
          )}
        </tbody>
      </Table>
    </Container>
  );
};

export default Home;

ConsolidationModal.jsx
import React, { useState, useEffect } from 'react';
import { Modal, Form, Button, Table, Row, Col, InputGroup, Alert, Badge } from 'react-bootstrap';
import { supabase } from '../supabaseClient';

const ConsolidationModal = ({ show, onHide, onConsolidate }) => {
  const [solicitudes, setSolicitudes] = useState([]);
  const [proveedores, setProveedores] = useState([]);
  const [selectedSolicitudes, setSelectedSolicitudes] = useState(new Set());
  const [cantidades, setCantidades] = useState(new Map());
  const [proveedorId, setProveedorId] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    const cargarDatos = async () => {
      try {
        const { data: solicitudesData } = await supabase
          .from('solicitudcompra')
          .select(`
            id,
            empleado:empleado_id(nombre, apellido),
            detalles:solicitudcompra_detalle(
              producto_id,
              cantidad,
              producto:producto_id(descripcion, categoria_id)
            )
          `)
          .eq('estado', 'Pendiente');

        const { data: proveedoresData } = await supabase
          .from('proveedor')
          .select(`
            id,
            nombre,
            categorias:proveedor_categoria(
              categoria:categoria_id(nombre)
            )
          `);

        setSolicitudes(solicitudesData || []);
        setProveedores(proveedoresData || []);
      } catch (err) {
        setError('Error cargando datos: ' + err.message);
      }
    };
    if (show) cargarDatos();
  }, [show]);

  const productosConsolidados = Array.from(selectedSolicitudes)
    .flatMap(solicitudId => {
      const solicitud = solicitudes.find(s => s.id === solicitudId);
      return solicitud?.detalles?.map(d => ({
        ...d,
        solicitudId: solicitud.id,
      })) || [];
    })
    .reduce((acc, item) => {
      const existente = acc.find(p => p.producto_id === item.producto_id);
      if (existente) {
        existente.cantidad += item.cantidad;
        existente.solicitudes.add(item.solicitudId);
      } else {
        acc.push({
          producto_id: item.producto_id,
          descripcion: item.producto.descripcion,
          cantidad: item.cantidad,
          solicitudes: new Set([item.solicitudId]),
          cantidadOrdenar: item.cantidad,
        });
      }
      return acc;
    }, []);

  const handleCrearOrden = async () => {
    try {
      const todasSolicitudes = Array.from(selectedSolicitudes);

      const ordenData = {
        proveedor_id: Number(proveedorId),
        productos: productosConsolidados.map(p => ({
          producto_id: p.producto_id,
          descripcion: p.descripcion,
          cantidad: p.cantidadOrdenar,
        })),
        solicitudes: todasSolicitudes,
        estado: 'Pendiente',
        fecha_creacion: new Date().toISOString()
      };

      const { data, error } = await supabase
        .from('ordenes_consolidadas')
        .insert([ordenData])
        .select('id, proveedor_id, productos, solicitudes');

      if (error) throw error;

      onConsolidate(data[0]);
      onHide();
    } catch (err) {
      setError('Error al crear consolidación: ' + err.message);
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="xl" centered className="bg-dark text-light">
      <Modal.Header closeButton className="bg-dark border-secondary">
        <Modal.Title>Consolidar Solicitudes</Modal.Title>
      </Modal.Header>

      <Modal.Body>
        <Row>
          <Col md={7}>
            <h5>Solicitudes Pendientes</h5>
            <Table striped bordered hover variant="dark">
              <thead>
                <tr>
                  <th></th>
                  <th>ID</th>
                  <th>Productos Solicitados</th>
                </tr>
              </thead>
              <tbody>
                {solicitudes.map(solicitud => (
                  <tr key={solicitud.id}>
                    <td>
                      <Form.Check
                        checked={selectedSolicitudes.has(solicitud.id)}
                        onChange={(e) => {
                          const newSet = new Set(selectedSolicitudes);
                          e.target.checked
                            ? newSet.add(solicitud.id)
                            : newSet.delete(solicitud.id);
                          setSelectedSolicitudes(newSet);
                        }}
                      />
                    </td>
                    <td>#{solicitud.id}</td>
                    <td>
                      {solicitud.detalles?.map((d, i) => (
                        <Badge key={i} bg="secondary" className="me-1">
                          {d.producto.descripcion} (x{d.cantidad})
                        </Badge>
                      ))}
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </Col>

          <Col md={5} className="border-start">
            <h5>Productos Consolidados</h5>
            <Table striped bordered hover variant="dark">
              <thead>
                <tr>
                  <th>Producto</th>
                  <th>Total</th>
                  <th>A Ordenar</th>
                </tr>
              </thead>
              <tbody>
                {productosConsolidados.map((p, i) => (
                  <tr key={i}>
                    <td>{p.descripcion}</td>
                    <td>{p.cantidad}</td>
                    <td>
                      <InputGroup>
                        <Form.Control
                          type="number"
                          min="0"
                          max={p.cantidad}
                          value={cantidades.get(p.producto_id) || p.cantidad}
                          onChange={(e) => {
                            const newCantidades = new Map(cantidades);
                            newCantidades.set(p.producto_id, Math.min(p.cantidad, Number(e.target.value)));
                            setCantidades(newCantidades);
                          }}
                        />
                      </InputGroup>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>

            <h5 className="mt-4">Proveedor</h5>
            <Form.Select
              value={proveedorId}
              onChange={(e) => setProveedorId(e.target.value)}
              className="bg-secondary text-light"
            >
              <option value="">Seleccionar proveedor...</option>
              {proveedores.map(proveedor => (
                <option key={proveedor.id} value={proveedor.id}>
                  {proveedor.nombre} -
                  {proveedor.categorias?.map(c => c.categoria.nombre).join(', ') || 'Sin categorías'}
                </option>
              ))}
            </Form.Select>

            <Button
              variant="success"
              className="mt-3 w-100"
              onClick={handleCrearOrden}
              disabled={!proveedorId || productosConsolidados.length === 0}
            >
              Generar Orden Consolidada
            </Button>
          </Col>
        </Row>
      </Modal.Body>
    </Modal>
  );
};

export default ConsolidationModal;


Aside.jsx
import React from "react";
import {
  CDBSidebar,
  CDBSidebarContent,
  CDBSidebarHeader,
  CDBSidebarMenu,
  CDBSidebarMenuItem,
  CDBSidebarFooter,
} from "cdbreact";

const Sidebar = () => {
  return (
    <CDBSidebar>
      <CDBSidebarHeader prefix={<i className="fa fa-bars" />}>
        Contrast
      </CDBSidebarHeader>
      <CDBSidebarContent>
        <CDBSidebarMenu>
          <CDBSidebarMenuItem icon="th-large">Dashboard</CDBSidebarMenuItem>
          <CDBSidebarMenuItem icon="sticky-note">Components</CDBSidebarMenuItem>
          <CDBSidebarMenuItem icon="credit-card" iconType="solid">
            Metrics
          </CDBSidebarMenuItem>
        </CDBSidebarMenu>
      </CDBSidebarContent>

      <CDBSidebarFooter style={{ textAlign: "center" }}>
        <div className="sidebar-btn-wrapper" style={{ padding: "20px 5px" }}>
          Sidebar Footer
        </div>
      </CDBSidebarFooter>
    </CDBSidebar>
  );
};

export default Sidebar;


AdminDashboard.jsx
import React, { useState, useEffect } from 'react';
import { Button, Badge, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap';
import OrderForm from './OrderForm';
import RequestTable from './RequestTable';
import { supabase } from '../supabaseClient';
import OrderPDF from './OrderPDF';
import OrderActions from './OrderActions';
import UserManagement from './UserManagement';
import ConsolidationModal from './ConsolidationModal';
import OrderDetailsModal from './OrderDetailsModal';
import RequestDetailsModal from './RequestDetailsModal';

const AdminDashboard = ({ activeTab, solicitudesPendientes, solicitudesHistorial, ordenesHistorial, userProfile }) => {
  const [showOrderForm, setShowOrderForm] = useState(false);
  const [showConsolidationModal, setShowConsolidationModal] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [solicitudesPendientesState, setSolicitudesPendientesState] = useState(solicitudesPendientes);
  const [ordenesConsolidadas, setOrdenesConsolidadas] = useState([]);
  const [showOrderDetails, setShowOrderDetails] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showPDFConfirmation, setShowPDFConfirmation] = useState(false);
  const [newOrder, setNewOrder] = useState(null);
  const [showRequestDetails, setShowRequestDetails] = useState(false);
  const [selectedRequestDetails, setSelectedRequestDetails] = useState(null);

  useEffect(() => {
    setSolicitudesPendientesState(solicitudesPendientes);
  }, [solicitudesPendientes]);

  useEffect(() => {
    const fetchOrdenesConsolidadas = async () => {
      const { data, error } = await supabase
        .from('ordenes_consolidadas')
        .select(`
          *,
          proveedor:proveedor_id(nombre),
          productos,
          solicitudes
        `)
        .order('fecha_creacion', { ascending: false });

      if (!error) {
        setOrdenesConsolidadas(data);
      }
    };

    fetchOrdenesConsolidadas();
  }, []);

  const handleReject = async (id) => {
    const { error } = await supabase
      .from('solicitudcompra')
      .update({ estado: 'Rechazada' })
      .eq('id', id);
  
    if (!error) {
      const updatedRequests = solicitudesPendientesState.filter(req => req.id !== id);
      setSolicitudesPendientesState(updatedRequests);
    }
  };

  const handleEliminarConsolidacion = async (id) => {
    try {
      await supabase
        .from('ordenes_consolidadas')
        .delete()
        .eq('id', id);
      setOrdenesConsolidadas(prev => prev.filter(oc => oc.id !== id));
    } catch (err) {
      console.error('Error eliminando consolidación:', err);
    }
  };

  const handleOrderClick = (order) => {
    setSelectedOrder(order);
    setShowOrderDetails(true);
  };

  const handleRequestClick = (request) => {
    setSelectedRequestDetails(request);
    setShowRequestDetails(true);
  };

  const handleOrderCreated = (createdOrder) => {
    setNewOrder(createdOrder);
    setShowPDFConfirmation(true);
    setShowOrderForm(false);
  };

  return (
    <>
      {activeTab === 'solicitudes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h4 className="text-light mb-0">🔄 Solicitudes Pendientes</h4>
            <Button 
              variant="primary"
              onClick={() => setShowConsolidationModal(true)}
            >
              <i className="bi bi-archive me-2"></i>
              Consolidar Solicitudes
            </Button>
          </div>
          <RequestTable
            requests={solicitudesPendientesState}
            withActions={true}
            onApprove={(request) => {
              setSelectedRequest({
                productos: request.detalles.map(d => ({
                  producto_id: d.producto_id,
                  descripcion: d.producto?.descripcion || 'Producto sin nombre',
                  cantidad: d.cantidad
                })),
                solicitudes: [request.id]
              });
              setShowOrderForm(true);
            }}
            onReject={handleReject}
          />
        </div>
      )}

      {activeTab === 'usuarios' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">👥 Gestión de Usuarios</h4>
          <UserManagement />
        </div>
      )}

      {showConsolidationModal && (
        <ConsolidationModal
          show={showConsolidationModal}
          onHide={() => setShowConsolidationModal(false)}
          onConsolidate={(consolidatedOrder) => {
            setOrdenesConsolidadas(prev => [consolidatedOrder, ...prev]);
            setShowConsolidationModal(false);
          }}
          solicitudes={solicitudesPendientesState} 
        />
      )}

      {activeTab === 'historial-solicitudes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">📚 Historial de Solicitudes</h4>
          <RequestTable
            requests={solicitudesHistorial}
            showStatus={true}
            onRowClick={handleRequestClick}
          />
        </div>
      )}

      {activeTab === 'ordenes-consolidadas' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">📦 Historial de Órdenes Consolidadas</h4>
          <div className="table-responsive">
            <table className="table table-dark table-hover align-middle">
              <thead className="table-dark">
                <tr>
                  <th>ID</th>
                  <th>Proveedor</th>
                  <th>Productos</th>
                  <th>Fecha</th>
                  <th>Estado</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {ordenesConsolidadas?.map(orden => {
                  const statusColor = {
                    'Pendiente': 'warning',
                    'Completada': 'success',
                    'Anulada': 'secondary'
                  }[orden.estado];

                  return (
                    <tr key={orden.id}>
                      <td>{orden.id}</td>
                      <td>{orden.proveedor?.nombre || 'N/A'}</td>
                      <td>
                        {orden.productos?.map((p, i) => (
                          <Badge key={i} bg="info" className="me-1">
                            {p.descripcion} (x{p.cantidad})
                          </Badge>
                        ))}
                      </td>
                      <td>{new Date(orden.fecha_creacion).toLocaleDateString()}</td>
                      <td>
                        <span className={`badge bg-${statusColor}`}>{orden.estado}</span>
                      </td>
                      <td>
                        <div className="d-flex gap-2">
                          <Button
                            variant="success"
                            size="sm"
                            onClick={() => {
                              setSelectedRequest(orden);
                              setShowOrderForm(true);
                            }}
                          >
                            Crear Orden
                          </Button>
                          <Button
                            variant="danger"
                            size="sm"
                            onClick={() => handleEliminarConsolidacion(orden.id)}
                          >
                            Eliminar
                          </Button>
                        </div>
                      </td>
                    </tr>
                  );
                })}
                {ordenesConsolidadas?.length === 0 && (
                  <tr>
                    <td colSpan="6" className="text-center text-muted py-4">
                      No hay órdenes consolidadas registradas
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {activeTab === 'ordenes' && (
        <div className="bg-dark rounded-3 p-4 border border-secondary">
          <h4 className="mb-4 text-light">📦 Historial de Órdenes</h4>
          <div className="table-responsive">
            <table className="table table-dark table-hover align-middle">
              <thead className="table-dark">
                <tr>
                  <th>ID</th>
                  <th>Proveedor</th>
                  <th>Solicitud Relacionada</th>
                  <th>Fecha</th>
                  <th>Total</th>
                  <th>Estado</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {ordenesHistorial?.map(orden => {
                  const statusColor = {
                    'Pendiente': 'warning',
                    'Completada': 'success',
                    'Anulada': 'secondary'
                  }[orden.estado];

                  return (
                    <tr key={orden.id} onClick={() => handleOrderClick(orden)} style={{ cursor: 'pointer' }}>
                      <td>
                        <OverlayTrigger
                          placement="top"
                          overlay={<Tooltip>Ver detalles de la orden</Tooltip>}
                        >
                          <span>{orden.id}</span>
                        </OverlayTrigger>
                      </td>
                      <td>{orden.proveedor?.nombre || 'N/A'}</td>
                      <td>{orden.solicitud_compra?.descripcion || 'N/A'}</td>
                      <td>{new Date(orden.fecha_orden).toLocaleDateString()}</td>
                      <td>{orden.neto_a_pagar?.toFixed(2)} {orden.unidad}</td>
                      <td>
                        <span className={`badge bg-${statusColor}`}>{orden.estado}</span>
                      </td>
                      <td onClick={(e) => e.stopPropagation()}>
                        <div className="d-flex gap-2">
                          <OrderPDF order={orden} key={orden.id} />
                          <OrderActions 
                            order={orden}
                            onUpdate={() => window.location.reload()}
                          />
                        </div>
                      </td>
                    </tr>
                  );
                })}
                {ordenesHistorial?.length === 0 && (
                  <tr>
                    <td colSpan="7" className="text-center text-muted py-4">
                      No hay órdenes registradas
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {showOrderForm && (
        <OrderForm
          show={showOrderForm}
          onHide={() => setShowOrderForm(false)}
          ordenConsolidada={selectedRequest}
          userProfile={userProfile} 
          onSuccess={handleOrderCreated}
          selectedRequest={selectedRequest}
        />
      )}

      {showOrderDetails && (
        <OrderDetailsModal
          show={showOrderDetails}
          onHide={() => setShowOrderDetails(false)}
          order={selectedOrder}
        />
      )}

      {showRequestDetails && (
        <RequestDetailsModal
          show={showRequestDetails}
          onHide={() => setShowRequestDetails(false)}
          request={selectedRequestDetails}
        />
      )}

      {showPDFConfirmation && (
        <Modal show={showPDFConfirmation} onHide={() => setShowPDFConfirmation(false)} centered>
          <Modal.Header closeButton className="bg-dark text-light">
            <Modal.Title>Orden Creada</Modal.Title>
          </Modal.Header>
          <Modal.Body className="bg-dark text-light">
            <p>La orden #{newOrder.id} ha sido creada exitosamente.</p>
            <p>¿Desea generar el PDF de la orden?</p>
            <div className="d-flex justify-content-end">
              <Button variant="secondary" onClick={() => {
                setShowPDFConfirmation(false);
                window.location.reload();
              }} className="me-2">
                No
              </Button>
              <Button variant="primary" onClick={() => {
                setShowPDFConfirmation(false);
                handleOrderClick(newOrder);
              }}>
                Sí
              </Button>
            </div>
          </Modal.Body>
        </Modal>
      )}
    </>
  );
};

export default AdminDashboard;

.env 
VITE_SUPABASE_KEY = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBja2JkcGVydXBvdnhybml1YnJsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNDM1MTIsImV4cCI6MjA1NTcxOTUxMn0.p1qIe03QXpwmMKGeiobK-i5Sv_2ANYkSUQ-eUfydOis
VITE_SUPABASE_URL = https://pckbdperupovxrniubrl.supabase.co



Estructura de la base de datos: 


| table_name              | column_name          | data_type                   |
| ----------------------- | -------------------- | --------------------------- |
| camaraindustriales      | id                   | integer                     |
| camaraindustriales      | nombre               | character varying           |
| camaraindustriales      | direccion            | text                        |
| camaraindustriales      | web                  | character varying           |
| camaraindustriales      | correo               | character varying           |
| camaraindustriales      | telefonos            | character varying           |
| camaraindustriales      | rif                  | character varying           |
| cargo                   | id                   | integer                     |
| cargo                   | nombre               | character varying           |
| cargo                   | departamento_id      | integer                     |
| categoria_producto      | id                   | integer                     |
| categoria_producto      | nombre               | character varying           |
| categoria_proveedor     | id                   | integer                     |
| categoria_proveedor     | nombre               | character varying           |
| departamento            | id                   | integer                     |
| departamento            | nombre               | character varying           |
| empleado                | id                   | integer                     |
| empleado                | cedula               | character varying           |
| empleado                | nombre               | character varying           |
| empleado                | apellido             | character varying           |
| empleado                | cargo_actual_id      | integer                     |
| empleado                | firma                | text                        |
| empleado                | departamento_id      | integer                     |
| empleado                | estado               | character varying           |
| empleadocargohistorial  | id                   | integer                     |
| empleadocargohistorial  | empleado_id          | integer                     |
| empleadocargohistorial  | cargo_id             | integer                     |
| empleadocargohistorial  | fecha_inicio         | date                        |
| empleadocargohistorial  | fecha_fin            | date                        |
| facturas_orden          | id                   | integer                     |
| facturas_orden          | orden_compra_id      | integer                     |
| facturas_orden          | numero_factura       | character varying           |
| facturas_orden          | fecha_recepcion      | date                        |
| facturas_orden          | documento_factura    | text                        |
| facturas_orden          | total_recepcionado   | numeric                     |
| inventario              | id                   | integer                     |
| inventario              | producto_id          | integer                     |
| inventario              | ubicacion            | text                        |
| inventario              | fecha_actualizacion  | timestamp without time zone |
| inventario              | existencias          | integer                     |
| orden_solicitud         | ordencompra_id       | integer                     |
| orden_solicitud         | solicitud_id         | integer                     |
| ordencompra             | id                   | integer                     |
| ordencompra             | solicitud_compra_id  | integer                     |
| ordencompra             | proveedor_id         | integer                     |
| ordencompra             | fecha_orden          | timestamp without time zone |
| ordencompra             | estado               | character varying           |
| ordencompra             | precio_unitario      | numeric                     |
| ordencompra             | sub_total            | numeric                     |
| ordencompra             | iva                  | numeric                     |
| ordencompra             | ret_iva              | numeric                     |
| ordencompra             | neto_a_pagar         | numeric                     |
| ordencompra             | unidad               | character varying           |
| ordencompra             | observaciones        | text                        |
| ordencompra             | empleado_id          | integer                     |
| ordencompra             | changed_by           | integer                     |
| ordencompra             | fecha_modificacion   | timestamp without time zone |
| ordencompra             | retencion_porcentaje | numeric                     |
| ordencompra_detalle     | id                   | integer                     |
| ordencompra_detalle     | orden_compra_id      | integer                     |
| ordencompra_detalle     | producto_id          | integer                     |
| ordencompra_detalle     | cantidad             | integer                     |
| ordencompra_detalle     | precio_unitario      | numeric                     |
| ordencompra_detalle     | monto_total          | numeric                     |
| ordenes_consolidadas    | id                   | integer                     |
| ordenes_consolidadas    | proveedor_id         | integer                     |
| ordenes_consolidadas    | productos            | jsonb                       |
| ordenes_consolidadas    | estado               | character varying           |
| ordenes_consolidadas    | fecha_creacion       | timestamp without time zone |
| ordenes_consolidadas    | solicitudes          | jsonb                       |
| producto                | id                   | integer                     |
| producto                | descripcion          | text                        |
| producto                | categoria_id         | integer                     |
| productos_no_recibidos  | id                   | integer                     |
| productos_no_recibidos  | orden_compra_id      | integer                     |
| productos_no_recibidos  | producto_id          | integer                     |
| productos_no_recibidos  | cantidad_faltante    | integer                     |
| productos_no_recibidos  | motivo               | text                        |
| proveedor               | id                   | integer                     |
| proveedor               | nombre               | character varying           |
| proveedor               | direccion            | text                        |
| proveedor               | rif                  | character varying           |
| proveedor               | telefono             | character varying           |
| proveedor               | correo               | character varying           |
| proveedor               | pagina_web           | character varying           |
| proveedor_categoria     | proveedor_id         | integer                     |
| proveedor_categoria     | categoria_id         | integer                     |
| solicitudcompra         | id                   | integer                     |
| solicitudcompra         | descripcion          | text                        |
| solicitudcompra         | fecha_solicitud      | timestamp without time zone |
| solicitudcompra         | estado               | character varying           |
| solicitudcompra         | empleado_id          | integer                     |
| solicitudcompra         | departamento_id      | integer                     |
| solicitudcompra_detalle | id                   | integer                     |
| solicitudcompra_detalle | solicitud_compra_id  | integer                     |
| solicitudcompra_detalle | producto_id          | integer                     |
| solicitudcompra_detalle | cantidad             | integer                     |
| user_profile            | id                   | uuid                        |
| user_profile            | empleado_id          | integer                     |
| user_profile            | departamento_id      | integer                     |



La tabla user_profile esta relacionada a la autenticacion que trae por defecto supabase 







Ahora correre el proyecto y te dare una lista de fallas que veo en su comportamiento, quiza te lo indique yo mismo con palabras, capturas de pantalla, mensajes de la consola del navegador o mensajes de la consola en el visual studio code


1: Al hacer click en alguna de las ordenes de Historial de Ordenes consolidadas no muestra los detalles como en las demas listas, deberia tener ese comportamiento tambien 

2: Las notificaciones no funcionan, deberia contar correctamente la cantidad de notificaciones donde esta el logo de notificaciones, generalmente se queda en cero a pesar de haber solicitudes pendientes

3: Quiero que haya un "home" para el usuario administrador, donde aparezca un cuadro con el nombre de cada departamento, quiero que tengan un numero indicando a modo de notificacion la cantidad de solicitudes provenientes de ese departamento, asi el usuario administrador vera algo como "Administracion" con un numero que indica la cantidad de solicitudes, y que al dar click y abrir ese departamento salgan todas las solicitudes de ese departamento, y se puede seleccionar entre las pendientes y el historial de rechazadas o aprobadas de ese departamento

4: Necesito que en la pantalla del inventario haya opciones para que el usuario administrador pueda ingresar proveedores a la base de datos y tambien productos, con toda la informacion que se requiere, si es necesario crear nuevos componentes para eso puedes hacerlo

5: En el panel del usuario normal necesito que se mejore la experiencia de usuario en cuanto al modal que se despliega al presionar "nuevas solicitud" veras, cuando se añaden productos se añaden infinitamente en vertical y eso puede llegar a ser molesto, me gustaria que tenga un diseño mas horizontal similar a los otros modales que hay en el panel de administracion para la creacion de las ordenes de compra, es mas practico de esa forma

6: Quiero que el usuario normal tenga en su historial de solicitudes unicamente el historial de las solicitudes que ese usuario ha realizado, y que pueda ver el historial de solicitudes general de su departamento, quiero tambien que se le notifique en las notificaciones si ya se ha aprobado o rechazado la solicitud que hizo 

7: quiero que el usuario tenga un home donde se vea como que una estadistica de las solicitudes de compra que ha realizado y cuales han terminado aprobadas como solicitud de compra, obviamente todo en general con respecto a su departamento, el usuario administrador tambien deberia eso añadido al home pero el si  deberia poder ver todo y filtrar por departamento si quiere 

8: el usuario administrador debe tener algun boton en alguna parte para poder realizar ordenes de compra directamente, al fin y al cabo el administrador no necesita pedir permiso 

9: al creando las ordenes de compra no se porque suele haber problemas calculando los montos totales por favor soluciona eso

Por ahora has esas cosas y luego veremos que mas hacer, debes entregarme el codigo completo y corregido con todas las implementaciones por favor 