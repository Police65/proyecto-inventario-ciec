estoy haciendo una tesis acerca de la camara de industriales del estado carabobo Venezuela, pues estoy desarrollando un sistema en react, con el postgre sql proporcionado por supabase como servicio de base de datos, javascript, html, tailwindcss, el sistema que desarrollo es porque no hay una base de datos ni un sistema que lleve a cabo solicitudes y ordenes de compra para los departamentos de la Camara de industriales del estado carabobo, por lo que todas las ordenes de compra y chequeo del inventario se hace de manera manual y empirica, al igual que las solicitudes y ordenes de compra, esa seria la problematica principal
El objetivo general de esta investigación es desarrollar un sistema web local para la gestión de solicitudes y órdenes de compra en la Cámara de Industriales del Estado Carabobo, con el fin de optimizar los procesos administrativos y mejorar la eficiencia operativa de la organización.
La ausencia de un sistema integrado para la gestión de solicitudes y órdenes de compra en la CIEC representa un desafío crítico que limita su capacidad para operar de manera eficiente y transparente. Este problema se manifiesta en varias dimensiones:

Centralización de solicitudes: Actualmente, los departamentos de la CIEC operan como silos, sin compartir información sobre sus necesidades de compras. Esto genera una fragmentación en el manejo de la información, lo que dificulta la coordinación entre las diferentes áreas y aumenta el riesgo de duplicidad en las solicitudes. Por ejemplo, dos departamentos pueden solicitar el mismo material sin saber que el otro ya lo ha hecho, lo que resulta en compras redundantes y un uso ineficiente de los recursos.

Optimización de presupuestos: La falta de un registro unificado de las compras realizadas impide que la CIEC analice patrones de gasto y optimice sus presupuestos. Sin datos consolidados, es difícil identificar áreas de ahorro o negociar mejores condiciones con los proveedores. Además, la ausencia de un sistema de control presupuestario en tiempo real aumenta el riesgo de sobrepasar los límites de gasto asignados a cada departamento.

Transparencia en el proceso: El 68% de los empleados de la CIEC desconocen el estado de sus solicitudes después de enviarlas. Esta falta de visibilidad genera incertidumbre y dificulta la planificación de las actividades diarias. Además, la ausencia de un sistema de notificaciones y alertas impide que los responsables de los departamentos estén al tanto de los avances en el proceso de compras, lo que afecta la coordinación entre las diferentes áreas de la institución.

Control de inventarios: La falta de un sistema centralizado para la gestión de inventarios ha llevado a desajustes entre los productos solicitados y los disponibles. Los encargados de la gestión de inventarios no tienen acceso a un sistema en el que puedan verificar en tiempo real las existencias y las compras realizadas, lo que puede llevar a la escasez de materiales o a la sobrecompra de insumos. Además, la gestión de presupuestos se ve afectada, ya que no existe una forma eficiente de controlar el gasto en compras de manera centralizada, lo que aumenta los costos operativos y reduce la capacidad de la CIEC para planificar de manera estratégica sus adquisiciones.

Automatización de aprobaciones: El proceso de aprobación de las solicitudes de compra es lento y burocrático. Cada solicitud debe pasar por varios niveles jerárquicos antes de ser aprobada, lo que implica la recolección de firmas manuales y la revisión de documentos físicos. Este enfoque manual no solo prolonga el tiempo de respuesta, sino que también aumenta el riesgo de errores humanos, como la pérdida de documentos o la aprobación incorrecta de solicitudes.

Comunicación interna: La falta de un sistema centralizado también crea una brecha en la comunicación entre los departamentos y la alta gerencia. Los responsables de los departamentos no tienen acceso a información clara y actualizada sobre el estado de las solicitudes en curso, lo que dificulta la toma de decisiones y la planificación estratégica. Además, la ausencia de un sistema de notificaciones y alertas impide que los usuarios estén al tanto de los avances en el proceso de compras, lo que genera frustración y desconfianza en el sistema.

esta es la estructura de mi tesis: 

PS D:\proyecto-inventario-ciec> dir


    Directory: D:\proyecto-inventario-ciec


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         2/28/2025   2:28 PM                node_modules
d-----         2/28/2025   1:50 PM                Old code
d-----         2/28/2025   1:50 PM                public
d-----         2/28/2025   1:50 PM                src
-a----         2/28/2025   1:50 PM            290 .env
-a----         2/28/2025   2:23 PM            253 .gitignore
-a----         2/28/2025   2:23 PM            844 eslint.config.js
-a----         2/28/2025   2:23 PM            361 index.html
-a----         2/28/2025   2:28 PM          92514 package-lock.json
-a----         2/28/2025   2:24 PM            622 package.json
-a----         2/28/2025   2:40 PM              0 prompts.txt
-a----         2/28/2025   2:23 PM            809 README.md
-a----         2/28/2025   2:23 PM            161 vite.config.js


PS D:\proyecto-inventario-ciec> dir src


    Directory: D:\proyecto-inventario-ciec\src


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         2/28/2025   1:50 PM                assets
-a----         2/28/2025   2:23 PM            606 App.css
-a----         2/28/2025   2:23 PM            903 App.jsx
-a----         2/28/2025   2:23 PM           1154 index.css
-a----         2/28/2025   2:23 PM            229 main.jsx
-a----         2/28/2025   1:50 PM            232 supabaseClient.js


PS D:\proyecto-inventario-ciec>

Ignora la carpeta "Old code" solo es un viejo proyecto fallido que esta dentro de Este

este es el script de postgre sql que use para hacer la base de datos en supabase 

-- Eliminamos tablas si existen para evitar conflictos al recrearlas
DROP TABLE IF EXISTS Inventario, OrdenProducto, OrdenCompra, Producto, Proveedor, Departamento, EmpleadoCargoHistorial, Cargo, Empleado, Usuario, CamaraIndustriales CASCADE;

-- Tabla de Usuario
CREATE TABLE Usuario (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    rol VARCHAR(20) CHECK (rol IN ('admin', 'usuario'))
);

-- Tabla de Cámara de Industriales
CREATE TABLE CamaraIndustriales (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    direccion TEXT NOT NULL,
    web VARCHAR(255),
    correo VARCHAR(100),
    telefonos VARCHAR(100),
    rif VARCHAR(50) UNIQUE NOT NULL
);

-- Tabla de Proveedor
CREATE TABLE Proveedor (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    direccion TEXT NOT NULL,
    rif VARCHAR(50) UNIQUE NOT NULL,
    telefono VARCHAR(50),
    correo VARCHAR(100),
    pagina_web VARCHAR(255)
);

-- Tabla de Producto
CREATE TABLE Producto (
    id SERIAL PRIMARY KEY,
    descripcion TEXT NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    unidad VARCHAR(10) CHECK (unidad IN ('Bs', 'USD')),
    proveedor_id INT NOT NULL REFERENCES Proveedor(id) ON DELETE CASCADE
);

-- Tabla de Inventario
CREATE TABLE Inventario (
    id SERIAL PRIMARY KEY,
    producto_id INT UNIQUE NOT NULL REFERENCES Producto(id) ON DELETE CASCADE,
    cantidad_disponible INT NOT NULL DEFAULT 0,
    ubicacion TEXT NOT NULL,
    fecha_actualizacion TIMESTAMP DEFAULT now(),
    changed_by INT REFERENCES Usuario(id) ON DELETE SET NULL
);

-- Tabla de Departamento
CREATE TABLE Departamento (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE
);

-- Tabla de Cargo
CREATE TABLE Cargo (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    departamento_id INT NOT NULL REFERENCES Departamento(id) ON DELETE CASCADE
);

-- Tabla de Empleado
CREATE TABLE Empleado (
    id SERIAL PRIMARY KEY,
    cedula VARCHAR(20) UNIQUE NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    cargo_actual_id INT NOT NULL REFERENCES Cargo(id) ON DELETE SET NULL,
    firma TEXT,
    departamento_id INT NOT NULL REFERENCES Departamento(id) ON DELETE CASCADE
);

-- Relación 1:1 entre Usuario y Empleado
ALTER TABLE Usuario ADD COLUMN empleado_id INT UNIQUE REFERENCES Empleado(id) ON DELETE CASCADE;

-- Tabla Historial de Cargos
CREATE TABLE EmpleadoCargoHistorial (
    id SERIAL PRIMARY KEY,
    empleado_id INT NOT NULL REFERENCES Empleado(id) ON DELETE CASCADE,
    cargo_id INT NOT NULL REFERENCES Cargo(id) ON DELETE CASCADE,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE
);

-- Tabla de Orden de Compra
CREATE TABLE OrdenCompra (
    id SERIAL PRIMARY KEY,
    fecha_orden TIMESTAMP DEFAULT now(),
    numero_orden VARCHAR(50) UNIQUE NOT NULL,
    estado VARCHAR(20) CHECK (estado IN ('Pendiente', 'Aprobada', 'Anulada')) NOT NULL,
    observaciones TEXT,
    factura TEXT, -- Puede ser un enlace o ruta de archivo
    proveedor_id INT NOT NULL REFERENCES Proveedor(id) ON DELETE CASCADE,
    departamento_id INT NOT NULL REFERENCES Departamento(id) ON DELETE CASCADE,
    empleado_id INT NOT NULL REFERENCES Empleado(id) ON DELETE SET NULL,
    fecha_creacion TIMESTAMP DEFAULT now(),
    fecha_modificacion TIMESTAMP DEFAULT now(),
    fecha_eliminacion TIMESTAMP,
    status BOOLEAN DEFAULT TRUE, -- TRUE = Activo, FALSE = Eliminado
    changed_by INT REFERENCES Usuario(id) ON DELETE SET NULL
);

-- Tabla intermedia Orden-Producto (relación N:M)
CREATE TABLE OrdenProducto (
    id SERIAL PRIMARY KEY,
    orden_compra_id INT NOT NULL REFERENCES OrdenCompra(id) ON DELETE CASCADE,
    producto_id INT NOT NULL REFERENCES Producto(id) ON DELETE CASCADE,
    cantidad INT NOT NULL CHECK (cantidad > 0)
);

-- Trigger para actualizar automáticamente fecha_modificacion en OrdenCompra
CREATE OR REPLACE FUNCTION actualizar_fecha_modificacion()
RETURNS TRIGGER AS $$
BEGIN
    NEW.fecha_modificacion = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER actualizar_fecha_modificacion_trigger
BEFORE UPDATE ON OrdenCompra
FOR EACH ROW
EXECUTE FUNCTION actualizar_fecha_modificacion();


En cuanto a como quiero que se vea el proyecto esta es la idea que se me ocurrio e hice esta plantilla 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solicitudes de Compra - Cámara de Industriales</title>
    <meta name="author" content="CIEC">
    <meta name="description" content="Sistema de gestión de solicitudes de compra para la Cámara de Industriales del Estado Carabobo">

    <!-- Tailwind -->
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
    <style>
        @import url('https://fonts.googleapis.com/css?family=Karla:400,700&display=swap');
        .font-family-karla { font-family: karla; }
        .bg-sidebar { background: #3d68ff; }
        .cta-btn { color: #3d68ff; }
        .upgrade-btn { background: #1947ee; }
        .upgrade-btn:hover { background: #0038fd; }
        .active-nav-link { background: #1947ee; }
        .nav-item:hover { background: #1947ee; }
        .account-link:hover { background: #3d68ff; }
    </style>
</head>
<body class="bg-gray-100 font-family-karla flex">

    <!-- Sidebar -->
    <aside class="relative bg-sidebar h-screen w-64 hidden sm:block shadow-xl">
        <div class="p-6">
            <a href="index.html" class="text-white text-3xl font-semibold uppercase hover:text-gray-300">Cámara de Industriales</a>
            <button id="newRequestBtn" class="w-full bg-white cta-btn font-semibold py-2 mt-5 rounded-br-lg rounded-bl-lg rounded-tr-lg shadow-lg hover:shadow-xl hover:bg-gray-300 flex items-center justify-center">
                <i class="fas fa-plus mr-3"></i> Nueva solicitud
            </button>            
        </div>
        <nav class="text-white text-base font-semibold pt-3">
            <a href="index.html" class="flex items-center active-nav-link text-white py-4 pl-6 nav-item">
                <i class="fas fa-tachometer-alt mr-3"></i>
                Panel Principal
            </a>
            <a href="orders.html" class="flex items-center text-white opacity-75 hover:opacity-100 py-4 pl-6 nav-item">
                <i class="fas fa-list mr-3"></i>
                Solicitudes de Compra
            </a>
            <a href="reports.html" class="flex items-center text-white opacity-75 hover:opacity-100 py-4 pl-6 nav-item">
                <i class="fas fa-file-alt mr-3"></i>
                Reportes
            </a>
        </nav>
        <a href="#" class="absolute w-full upgrade-btn bottom-0 active-nav-link text-white flex items-center justify-center py-4">
            <i class="fas fa-arrow-circle-up mr-3"></i>
            Upgrade to Pro!
        </a>
    </aside>

    <!-- Main Content -->
    <div class="w-full flex flex-col h-screen overflow-y-hidden">
        <!-- Desktop Header -->
        <header class="w-full items-center bg-white py-2 px-6 hidden sm:flex">
            <div class="w-1/2"></div>
            <div class="relative w-1/2 flex justify-end">
                <button class="realtive z-10 w-12 h-12 rounded-full overflow-hidden border-4 border-gray-400 hover:border-gray-300 focus:border-gray-300 focus:outline-none">
                    <img src="https://source.unsplash.com/uJ8LNVCBjFQ/400x400">
                </button>
            </div>
        </header>

        <!-- Formulario oculto por defecto -->
        <div id="newRequestForm" class="leading-loose hidden flex items-center justify-center h-screen">
            <form class="max-w-xl m-4 p-10 bg-white rounded shadow-xl w-full sm:w-96" style="max-height: 90vh; overflow-y: auto;">
                <p class="text-gray-800 font-medium">Información de la solicitud</p>
                
                <!-- Contenedor para múltiples productos -->
                <div id="productosContainer">
                    <!-- Producto 1 -->
                    <div class="producto">
                        <div class="mt-2">
                            <label class="block text-sm text-gray-600" for="product_name_1">Nombre del producto</label>
                            <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="product_name_1" name="product_name_1" type="text" required placeholder="Nombre del producto">
                        </div>
                        <div class="mt-2">
                            <label class="block text-sm text-gray-600" for="quantity_1">Cantidad</label>
                            <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="quantity_1" name="quantity_1" type="number" required placeholder="Cantidad">
                        </div>
                        <div class="mt-2">
                            <label class="block text-sm text-gray-600" for="supplier_1">Proveedor</label>
                            <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="supplier_1" name="supplier_1" type="text" required placeholder="Nombre del proveedor">
                        </div>
                        <div class="mt-2">
                            <label class="block text-sm text-gray-600" for="delivery_date_1">Fecha de entrega</label>
                            <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="delivery_date_1" name="delivery_date_1" type="date" required>
                        </div>
                        <div class="mt-2">
                            <label class="block text-sm text-gray-600" for="remarks_1">Observaciones</label>
                            <textarea class="w-full px-5 py-2 text-gray-700 bg-gray-200 rounded" id="remarks_1" name="remarks_1" rows="3" placeholder="Detalles adicionales"></textarea>
                        </div>
                        <!-- Botón para eliminar producto -->
                        <div class="mt-2">
                            <button type="button" class="removeProductBtn px-4 py-2 text-white bg-red-500 rounded">Eliminar producto</button>
                        </div>
                        <hr class="my-4">
                    </div>
                </div>

                <!-- Botón para agregar más productos -->
                <div class="mt-4">
                    <button type="button" id="addProductBtn" class="px-4 py-2 text-white bg-blue-500 rounded">Agregar otro producto</button>
                </div>

                <!-- Enviar -->
                <div class="mt-4">
                    <button class="px-4 py-2 text-white bg-gray-900 rounded" type="submit">Enviar solicitud</button>
                </div>
            </form>
        </div>

        <!-- Resto del contenido -->
        <div class="w-full overflow-x-hidden border-t flex flex-col">
            <main class="w-full flex-grow p-6">
                <h1 class="text-3xl text-black pb-6">Panel Principal</h1>
    
                <div class="flex flex-wrap mt-6">
                    <!-- Ordenes por Aprobación -->
                    <div class="w-full lg:w-1/2 pr-0 lg:pr-2">
                        <p class="text-xl pb-3 flex items-center">
                            <i class="fas fa-check mr-3"></i> Ordenes Pendientes de Aprobación
                        </p>
                        <div class="p-6 bg-white">
                            <!-- Aquí puedes agregar una representación gráfica o tabla -->
                        </div>
                    </div>
                    <!-- Solicitudes de Compra -->
                    <div class="w-full lg:w-1/2 pl-0 lg:pl-2 mt-12 lg:mt-0">
                        <p class="text-xl pb-3 flex items-center">
                            <i class="fas fa-list mr-3"></i> Solicitudes de Compra Recientes
                        </p>
                        <div class="p-6 bg-white">
                            <!-- Aquí se agregan las solicitudes de compra recientes -->
                        </div>
                    </div>
                </div>

                <!-- Lista de Solicitudes de Compra -->
                <div class="w-full mt-12">
                    <p class="text-xl pb-3 flex items-center">
                        <i class="fas fa-box mr-3"></i> Solicitudes de Compra
                    </p>
                    <div class="bg-white overflow-auto">
                        <table class="min-w-full bg-white">
                            <thead class="bg-gray-800 text-white">
                                <tr>
                                    <th class="w-1/3 text-left py-3 px-4 uppercase font-semibold text-sm">Código</th>
                                    <th class="w-1/3 text-left py-3 px-4 uppercase font-semibold text-sm">Descripción</th>
                                    <th class="text-left py-3 px-4 uppercase font-semibold text-sm">Cantidad</th>
                                    <th class="text-left py-3 px-4 uppercase font-semibold text-sm">Estado</th>
                                </tr>
                            </thead>
                            <tbody class="text-gray-700">
                                <!-- Aquí se mostrarían las filas con datos reales -->
                                <tr>
                                    <td class="w-1/3 text-left py-3 px-4">12345</td>
                                    <td class="w-1/3 text-left py-3 px-4">Laptop HP</td>
                                    <td class="text-left py-3 px-4">3</td>
                                    <td class="text-left py-3 px-4">Pendiente</td>
                                </tr>
                                <tr class="bg-gray-200">
                                    <td class="w-1/3 text-left py-3 px-4">12346</td>
                                    <td class="w-1/3 text-left py-3 px-4">Monitor LG</td>
                                    <td class="text-left py-3 px-4">2</td>
                                    <td class="text-left py-3 px-4">Aprobada</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Scripts de la página -->
    <script>
        document.getElementById('newRequestBtn').addEventListener('click', function() {
            const form = document.getElementById('newRequestForm');
            form.classList.toggle('hidden');
        });

        // Lógica para agregar más productos
        let productCounter = 1;
        document.getElementById('addProductBtn').addEventListener('click', function() {
            productCounter++;
            const newProduct = document.createElement('div');
            newProduct.classList.add('producto');
            newProduct.innerHTML = `
                <div class="mt-2">
                    <label class="block text-sm text-gray-600" for="product_name_${productCounter}">Nombre del producto</label>
                    <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="product_name_${productCounter}" name="product_name_${productCounter}" type="text" required placeholder="Nombre del producto">
                </div>
                <div class="mt-2">
                    <label class="block text-sm text-gray-600" for="quantity_${productCounter}">Cantidad</label>
                    <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="quantity_${productCounter}" name="quantity_${productCounter}" type="number" required placeholder="Cantidad">
                </div>
                <div class="mt-2">
                    <label class="block text-sm text-gray-600" for="supplier_${productCounter}">Proveedor</label>
                    <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="supplier_${productCounter}" name="supplier_${productCounter}" type="text" required placeholder="Nombre del proveedor">
                </div>
                <div class="mt-2">
                    <label class="block text-sm text-gray-600" for="delivery_date_${productCounter}">Fecha de entrega</label>
                    <input class="w-full px-5 py-1 text-gray-700 bg-gray-200 rounded" id="delivery_date_${productCounter}" name="delivery_date_${productCounter}" type="date" required>
                </div>
                <div class="mt-2">
                    <label class="block text-sm text-gray-600" for="remarks_${productCounter}">Observaciones</label>
                    <textarea class="w-full px-5 py-2 text-gray-700 bg-gray-200 rounded" id="remarks_${productCounter}" name="remarks_${productCounter}" rows="3" placeholder="Detalles adicionales"></textarea>
                </div>
                <!-- Botón para eliminar producto -->
                <div class="mt-2">
                    <button type="button" class="removeProductBtn px-4 py-2 text-white bg-red-500 rounded">Eliminar producto</button>
                </div>
                <hr class="my-4">
            `;
            document.getElementById('productosContainer').appendChild(newProduct);
        });

        // Lógica para eliminar productos
        document.addEventListener('click', function(event) {
            if (event.target.classList.contains('removeProductBtn')) {
                const producto = event.target.closest('.producto');
                if (producto) {
                    producto.remove();
                }
            }
        });
    </script>

</body>
</html>



